{"version":3,"sources":["prime-es6.js","../src/main/js/Browser.js","../src/main/js/Document/PrimeElement.js","../src/main/js/Document/PrimeElementList.js","../src/main/js/PrimeDocument.js","../src/main/js/Utils.js","../src/main/js/Widgets/Overlay.js","../src/main/js/PrimeRequest.js","../src/main/js/Window.js","../src/main/js/Widgets/Draggable.js","../src/main/js/Widgets/AJAXDialog.js","../src/main/js/Events.js","../src/main/js/Date.js","../src/main/js/Widgets/DateTimePicker.js","../src/main/js/Widgets/Dismissable.js","../src/main/js/Widgets/HTMLDialog.js","../src/main/js/Widgets/InProgress.js","../src/main/js/Widgets/Searcher.js","../src/main/js/Widgets/MultipleSelect.js","../src/main/js/Widgets/Touchable.js","../src/main/js/Widgets/SideMenu.js","../src/main/js/Widgets/SplitButton.js","../src/main/js/Storage.js","../src/main/js/Widgets/Table.js","../src/main/js/Widgets/Tabs.js","../src/main/js/Widgets/Tooltip.js","../src/main/js/Widgets/TreeView.js","../src/main/js/Effects.js","../src/main/js/DataQueue.js","../src/main/js/Template.js","../src/main/js/Prime.js"],"names":["Prime","exports","Browser","detect","this","name","_searchString","dataBrowser","version","_searchVersion","navigator","userAgent","appVersion","os","dataOS","data","i","length","dataString","string","dataProp","prop","versionSearchString","versionSearch","identity","indexOf","subString","index","parseFloat","substring","vendor","window","opera","platform","blockElementRegexp","mouseEventsRegexp","htmlEventsRegexp","anonymousId","ieAlphaRegexp","PrimeElement","element","_classCallCheck","Utils","isDefined","nodeType","TypeError","bindAll","domElement","customEventListeners","eventListeners","_createClass","key","value","classNames","currentClassName","className","currentClassNameList","split","spaceRegex","newClassNameList","push","join","event","selector","listener","addEventListener","target","matches","parentNode","removeChild","appendChild","html","insertAdjacentHTML","memo","bubbling","cancelable","evt","document","createEventObject","cancelBubble","fireEvent","createEvent","exec","initMouseEvent","initEvent","dispatchEvent","hasOwnProperty","eventObj","focus","top","e","offsetTop","offsetParent","attr","attributes","getNamedItem","attrs","hasAttributes","offsetHeight","offsetWidth","getBoundingClientRect","bottom","PrimeElementList","children","matched","child","currentStyle","defaultView","getComputedStyle","box","body","documentElement","scrollTop","pageYOffset","scrollLeft","pageXOffset","clientTop","clientLeft","left","Math","round","dataset","getAttributes","dataName","replace","g","toUpperCase","getDataSet","lastChild","getChildren","computedStyle","borderTop","borderBottom","parseCSSMeasure","innerHTML","id","elementList","sibling","nextSibling","offsetLeft","opacity","filter","undefined","match","getTagName","options","marginTop","marginBottom","outerHTML","marginLeft","marginRight","parentElement","previousSibling","getParent","parseInt","right","scrollHeight","scrollWidth","texts","tagName","selected","text","values","type","form","PrimeDocument","queryUp","query","each","isChecked","getValue","convertStyleName","style","innerText","textContent","borderLeft","borderRight","currentClassNames","findClassNameList","display","insertBefore","textNode","createTextNode","checked","parent","disabled","activeElement","firstChild","queryFirst","queryLast","_internalRemoveEventListener","removeAttribute","removeClassNameList","removeFromArray","listeners","pattern","test","range","selection","createTextRange","moveToElementText","select","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","scrollIntoView","position","toString","setAttribute","attribute","createAttribute","nodeValue","setAttributeNode","toLowerCase","height","setStyle","newHTML","getHTML","leftString","arguments","isArray","Array","prototype","slice","call","setChecked","styles","newText","getTextContent","topString","width","displayValue","hasClass","removeClass","addClass","removeFromDOM","elementString","properties","newElement","setHTML","getOuterHTML","removeEventListener","detachEvent","customListeners","get","set","Element","querySelectorAll","elements","_proxyToElement","iterationFunction","predicate","args","apply","readyFunctions","tagRegexp","bodyElement","addDelegatedEventListener","max","clientHeight","clientWidth","documentString","DOMParser","parseFromString","result","createElement","setId","callback","readyState","_callReadyListeners","attachEvent","appendToElement","appendHTML","getLastChild","getElementById","querySelector","domElements","SyntaxError","readyFunction","shift","proto","nativeParse","ex","markup","doc","implementation","createHTMLDocument","typeRegex","object","getAllPropertyNames","forEach","property","startsWith","Object","defineProperty","bind","escapeHTML","div","props","getOwnPropertyNames","getPrototypeOf","keys","bindSome","func","Function","bindSafe","context","Error","calculateTextLength","textCalculator","queryById","setStyles","fontSize","fontFamily","fontWeight","letterSpacing","whiteSpace","setTop","setLeft","appendTo","getWidth","callIteratively","totalDuration","timesToCall","stepFunction","endFunction","count","setInterval","last","clearInterval","capitalize","str","charAt","dash","start","piece","concat","dataSetToOptions","isNaN","o","leftPadNumber","number","sign","abs","measure","parseJSON","json","JSON","parse","removeAllFromArray","fromArray","toRemove","array","obj","splice","stopEvent","stopPropagation","preventDefault","instance","Overlay","overlay","hide","bodyOverflow","overflowStyle","zIndex","getStyle","show","onReady","PrimeRequest","url","method","xhr","XMLHttpRequest","async","queryParams","contentType","inProgress","errorHandler","onError","headers","loadingHandler","onLoading","openHandler","onOpen","password","sendHandler","onSend","successHandler","onSuccess","unsetHandler","onUnset","username","requestUrl","open","onreadystatechange","_handler","setRequestHeader","send","_addDataValue","primeElement","isDisabled","isInput","getAttribute","getSelectedValues","_typeof","String","stringify","responseType","encodeURIComponent","close","status","PrimeWindow","innerHeight","innerWidth","Draggable","gripSelector","wrap","offset","grip","originalStyle","_handleMouseDown","_handleMouseMove","_handleMouseUp","cursor","getOuterHeight","getOuterWidth","x","screenX","y","screenY","xDiff","yDiff","getLeft","getTop","AJAXDialog","draggable","initialized","_setInitialOptions","destroy","setTimeout","highestZIndex","_determineZIndex","setZIndex","closeTimeout","uri","ajaxRequest","withSuccessHandler","_handleAJAXDialogResponse","withErrorHandler","go","extraData","withDataFromForm","withData","_initializeDialog","classes","additionalClasses","request","closeButtonElementSelector","timeout","draggableElementSelector","formErrorCallback","enabled","formHandling","formPreSubmitCallback","formSuccessCallback","option","dialog","isVisible","class","responseText","_handleAJAXFormSubmit","initialize","successURI","location","reload","_handleAJAXFormSuccess","_handleAJAXFormError","_handleCloseClickEvent","zIndexOffset","windowHeight","getInnerHeight","dialogHeight","getHeight","Events","Keys","BACKSPACE","ENTER","ESCAPE","SPACE","TAB","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","DELETE","PrimeDate","DAYS_IN_MONTH","getHourOfDay","date","getHours","isLeapYear","year","numberOfDaysInMonth","month","plusDays","newDate","getDate","getFullYear","getMonth","plusMonths","setDate","plusHours","deltaDays","deltaHours","newHour","setHours","plusMinutes","deltaMinutes","newMinute","getMinutes","setMinutes","deltaYears","deltaMonths","currentMonth","newMonth","setYear","adjustedMonth","setMonth","plusSeconds","deltaSeconds","newSecond","getSeconds","setSeconds","plusYears","setFullYear","toDateOnlyISOString","Date","SHORT_DAY_NAMES","MONTHS","AM_PM","DateTimePicker","is","customFormatHandler","datepicker","months","years","_handleInputClick","_handleInputKey","_handleGlobalClick","_handleGlobalKey","firstDayOfMonth","getDay","daysInMonth","used","weeksInMonth","ceil","rows","startDay","startDayOfWeek","_buildCalendarWeek","calendarBody","monthDisplay","setDataAttribute","yearDisplay","setTextContent","getUTCFullYear","timeSeparator","TIME_SEPARATOR","dateSeparator","DATE_SEPARATOR","_handleDayClick","_handleMonthExpand","_handleYearExpand","time","inputs","hourInput","_handleDateTimeChange","_handleHourKey","minuteInput","_handleMinuteKey","secondInput","_handleSecondKey","ampmInput","_handleAmPmKey","monthInput","setValue","_handleMonthKey","dayInput","_handleDayKey","yearInput","_handleYearKey","_handleNextMonth","_handlePreviousMonth","getDataAttribute","closeMonthsSelect","startYear","endYear","closeYearsSelect","_rebuild","getTime","drawCalendar","getAbsoluteTop","getRelativeZIndex","getOffsetLeft","getOffsetTop","currentYear","dateOnly","toISOString","formatHandler","startDayOfMonth","startDayOfPreviousMonth","startDayOfNextMonth","row","emptyColumns","dayOfWeek","day","min","keyCode","shiftKey","setSelectionRange","current","hours","_clamp","seconds","minutes","dayElement","getBottom","getRight","openMonthSelect","nextMonth","previousMonth","openYearSelect","_refreshInputs","userOptions","Dismissable","dismissButton","_handleClick","HTMLDialog","_setupButtons","InProgress","duration","startInstant","minimumTime","iconName","coords","getCoordinates","bodyCoords","setWidth","getBorderedWidth","setHeight","getBorderedHeight","startFunction","f","Searcher","inputElement","searchResultsContainer","callbackObject","searchResults","_removeAllSearchResults","resizeInput","_handleBlurEvent","_handleClickEvent","_handleKeyUpEvent","_handleKeyDownEvent","_handleFocusEvent","searchResult","getHighlightedSearchResult","getNextSibling","highlightSearchResult","getPreviousSibling","getScrollTop","searchResultOffset","scrollTo","closeSearchResults","newLength","searchText","search","matchingSearchResultElement","results","_handleMouseOverEvent","trim","trimmedLength","customAddEnabled","doesNotContainValue","customAddLabel","noSearchResultsLabel","tooManyResults","tooManySearchResultsLabel","custom","customAddCallback","selectSearchResult","currentTarget","selectHighlightedSearchResult","console","log","previousSearchString","highlightPreviousSearchResult","isSearchResultsVisible","highlightNextSearchResult","deletedBeyondSearchInput","removeAllFromDOM","unwrap","selectableOptions","isSelected","sort","AddOptionEvent","DeselectOptionEvent","SelectOptionEvent","MultipleSelect","findOptionWithValue","containsOptionWithValue","deselectOption","setSelected","_makeOptionID","displayOption","optionList","input","placeholder","searcher","displayContainer","getOptions","findOptionWithId","cur","getId","insertAfter","removeAllEventListeners","_handleGlobalClickEvent","_redraw","removeOption","allowDuplicates","deselectOptionWithId","deselectOptionWithValue","addOption","li","inputOption","removeIcon","scrollToBottom","selectOption","setSelectedValues","errorClass","searchFunction","isLastOptionHighlightedForUnselect","removeHighlightedOption","highlightOptionForUnselect","unhighlightOptionForUnselect","findOptionWithText","removeOptionWithValue","selectElementContents","isChildOf","d","c","r","random","floor","withOptions","hasSelectedOptions","selectSearchFunction","Touchable","eventPropagationHandler","_handleTouchStart","_handleTouchMove","_handleTouchCancel","_handleTouchEnd","removeEventListenersByPattern","handler","changedTouches","touch","elapsedTime","touchStarted","touchEndX","pageX","touchEndY","pageY","touchX","touchStartX","touchY","touchStartY","swipe","swipeX","swipeY","longPress","fireCustomEvent","_collectTouchData","_finished","SideMenu","button","sideMenuElement","sideMenu","closedClass","openClass","touchable","withSwipeLeftHandler","_handleSwipeLeft","isOpen","SplitButton","nodeName","container","defaultAction","_buildSplitButton","splitButton","_handleMouseOver","_handleMouseOut","dropDown","_handleDropDownClick","dropDownDiv","defaultButton","_handleDefaultButton","_hideAllButtons","_clearActiveMarker","_setActiveMarker","prependTo","buttonDiv","hasAttribute","PrimeStorage","supported","Storage","setSessionObject","_setObject","sessionStorage","getSessionObject","_getObject","setLocalObject","localStorage","getLocalObject","storage","item","getItem","setItem","Table","column","columnIndex","sortAscending","thead","tbody","_initializeSort","selectAll","_handleSelectAllChange","_handleCheckboxEvent","checkedCount","numberofCheckboxes","_clearSortIndicators","_comparator","appendElement","localStorageKey","checkEventCallback","a","b","sortType","cell1","cell2","sortValue1","sortValue2","value1","value2","localeCompare","_toNumber","previous","currentCheckedCount","_getColumnIndex","_handleSortableColumnClick","_initializeColumn","state","Number","error","Tabs","tabsContainer","tabContents","tabs","tabArray","selectedTab","tabContentClass","redraw","tab","dataSet","href","isAnchor","tabUrl","tabId","content","deepLinkingEnabled","hash","selectTab","firstVisible","lastVisible","selectNew","noneActive","selectCallback","ajaxURL","_handleAJAXResponse","ajaxCallback","Tooltip","t","_handleMouseEnter","_handleMouseLeave","toLocaleLowerCase","tooltip","tooltipWidth","tooltipHeight","TreeView","folderToggleClassName","Widgets","freeze","BaseTransition","endValue","iterations","getFunction","setFunction","currentValue","step","self","_internalEndFunction","_subclassEndFunction","Fade","_BaseTransition","_possibleConstructorReturn","__proto__","_inherits","_changeNumberStyleIteratively","getOpacity","setOpacity","Appear","_BaseTransition2","ScrollTo","_BaseTransition3","_this3","axis","getScrollLeft","scrollLeftTo","SlideOpen","primeVisibleHeight","isTransitioning","closeCallback","openCallback","Effects","DataQueue","_elements","_head","_tail","isEmpty","_cursor","Template","template","init","parameters","templateCopy","expressedValue","lastIndexOf","RegExp","expressedKey","generate","holder","Ajax","Request","Data","Queue","Document","Window"],"mappings":"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","file":"prime-min.js","sourcesContent":["var Prime = (function (exports) {\n\t'use strict';\n\n\t/*\n\t * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\t/**\n\t * The Browser namespace. This namespace does not contain any classes, just functions.\n\t *\n\t * @namespace Browser\n\t */\n\tconst Browser = {\n\t  /**\n\t   * Detects the browser name and version.\n\t   */\n\t  detect: function() {\n\t    this.name = this._searchString(this.dataBrowser) || \"An unknown browser\";\n\t    this.version = this._searchVersion(navigator.userAgent) || this._searchVersion(navigator.appVersion) || \"an unknown version\";\n\t    this.os = this._searchString(this.dataOS) || \"an unknown OS\";\n\t  },\n\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   *\n\t   * @param {Object} data The data array.\n\t   * @returns {?string} The browser identity String.\n\t   * @private\n\t   */\n\t  _searchString: function(data) {\n\t    for (let i = 0; i < data.length; i++) {\n\t      const dataString = data[i].string;\n\t      const dataProp = data[i].prop;\n\t      this.versionSearchString = data[i].versionSearch || data[i].identity;\n\t      if (dataString && dataString.indexOf(data[i].subString) !== -1) {\n\t        return data[i].identity;\n\t      } else if (dataProp) {\n\t        return data[i].identity;\n\t      }\n\t    }\n\n\t    return null;\n\t  },\n\n\t  /**\n\t   *\n\t   * @param {string} dataString The browser data string.\n\t   * @returns {?number} The version or null.\n\t   * @private\n\t   */\n\t  _searchVersion: function(dataString) {\n\t    const index = dataString.indexOf(this.versionSearchString);\n\t    if (index === -1) {\n\t      return null;\n\t    }\n\n\t    return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));\n\t  },\n\n\t  dataBrowser: [\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"Chrome\",\n\t      identity: \"Chrome\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"OmniWeb\",\n\t      versionSearch: \"OmniWeb/\",\n\t      identity: \"OmniWeb\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"Apple\",\n\t      identity: \"Safari\",\n\t      versionSearch: \"Version\"\n\t    },\n\t    {\n\t      prop: window.opera,\n\t      identity: \"Opera\",\n\t      versionSearch: \"Version\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"iCab\",\n\t      identity: \"iCab\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"KDE\",\n\t      identity: \"Konqueror\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"Firefox\",\n\t      identity: \"Firefox\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"Camino\",\n\t      identity: \"Camino\"\n\t    },\n\t    {    // for newer Netscapes (6+)\n\t      string: navigator.userAgent,\n\t      subString: \"Netscape\",\n\t      identity: \"Netscape\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"MSIE\",\n\t      identity: \"Explorer\",\n\t      versionSearch: \"MSIE\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"Gecko\",\n\t      identity: \"Mozilla\",\n\t      versionSearch: \"rv\"\n\t    },\n\t    {     // for older Netscapes (4-)\n\t      string: navigator.userAgent,\n\t      subString: \"Mozilla\",\n\t      identity: \"Netscape\",\n\t      versionSearch: \"Mozilla\"\n\t    }\n\t  ],\n\t  dataOS: [\n\t    {\n\t      string: navigator.platform,\n\t      subString: \"Win\",\n\t      identity: \"Windows\"\n\t    },\n\t    {\n\t      string: navigator.platform,\n\t      subString: \"Mac\",\n\t      identity: \"Mac\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"iPhone\",\n\t      identity: \"iPhone/iPod\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"iPad\",\n\t      identity: \"iPad\"\n\t    },\n\t    {\n\t      string: navigator.platform,\n\t      subString: \"Linux\",\n\t      identity: \"Linux\"\n\t    }\n\t  ]\n\t};\n\tBrowser.detect();\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tconst blockElementRegexp = /^(?:ARTICLE|ASIDE|BLOCKQUOTE|BODY|BR|BUTTON|CANVAS|CAPTION|COL|COLGROUP|DD|DIV|DL|DT|EMBED|FIELDSET|FIGCAPTION|FIGURE|FOOTER|FORM|H1|H2|H3|H4|H5|H6|HEADER|HGROUP|HR|LI|MAP|OBJECT|OL|OUTPUT|P|PRE|PROGRESS|SECTION|TABLE|TBODY|TEXTAREA|TFOOT|TH|THEAD|TR|UL|VIDEO)$/;\n\tconst mouseEventsRegexp = /^(?:click|dblclick|mousedown|mouseup|mouseover|mousemove|mouseout|mouseenter|mouseleave)$/;\n\tconst htmlEventsRegexp = /^(?:abort|blur|change|error|focus|load|reset|resize|scroll|select|submit|unload)$/;\n\tlet anonymousId = 1;\n\tconst ieAlphaRegexp = /alpha\\(opacity=(.+)\\)/;\n\n\tclass PrimeElement {\n\t  /**\n\t   * Creates an Element class for the given DOM element.\n\t   *\n\t   * @constructor\n\t   * @param {Element|EventTarget} element The element\n\t   */\n\t  constructor(element) {\n\t    if (!Utils.isDefined(element.nodeType) || element.nodeType !== 1) {\n\t      throw new TypeError('You can only pass in DOM element Node objects to the PrimeDocument.Element constructor');\n\t    }\n\n\t    Utils.bindAll(this);\n\t    this.domElement = element;\n\t    this.domElement.customEventListeners = [];\n\t    this.domElement.eventListeners = {};\n\t  }\n\n\t  /**\n\t   * Regular expression that captures the tagnames of all the block elements in HTML5.\n\t   *\n\t   * @type {RegExp}\n\t   */\n\t  static get blockElementRegexp() {\n\t    return blockElementRegexp;\n\t  }\n\n\t  static get mouseEventsRegexp() {\n\t    return mouseEventsRegexp;\n\t  }\n\n\t  static get htmlEventsRegexp() {\n\t    return htmlEventsRegexp;\n\t  }\n\n\t  static get anonymousId() {\n\t    return anonymousId;\n\t  }\n\n\t  static set anonymousId(value) {\n\t    anonymousId = value;\n\t  }\n\n\t  static get ieAlphaRegexp() {\n\t    return ieAlphaRegexp;\n\t  }\n\n\t  /**\n\t   * Static method that wraps an element in a PrimeElement unless it is already wrapped. In that case, it simply\n\t   * returns the element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The element to wrap.\n\t   * @static\n\t   */\n\t  static wrap(element) {\n\t    return (element instanceof PrimeElement) ? element : new PrimeElement(element);\n\t  }\n\n\t  /**\n\t   * Static method that unwraps an element to a DOM element. This is the inverse of Element.wrap. If this is passed an\n\t   * Element, it returns domElement. Otherwise, this just returns the element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  static unwrap(element) {\n\t    return (element instanceof PrimeElement) ? element.domElement : element;\n\t  }\n\n\t  /**\n\t   * Adds the given class (or list of space separated classes) to this Element.\n\t   *\n\t   * @param {string} classNames The class name(s) separated by a space.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  addClass(classNames) {\n\t    let currentClassName = this.domElement.className;\n\t    if (currentClassName === '') {\n\t      currentClassName = classNames;\n\t    } else {\n\t      const currentClassNameList = this.domElement.className.split(Utils.spaceRegex);\n\t      const newClassNameList = classNames.split(Utils.spaceRegex);\n\t      for (let i = 0; i < newClassNameList.length; i++) {\n\t        if (currentClassNameList.indexOf(newClassNameList[i]) === -1) {\n\t          currentClassNameList.push(newClassNameList[i]);\n\t        }\n\t      }\n\n\t      currentClassName = currentClassNameList.join(' ');\n\t    }\n\n\t    this.domElement.className = currentClassName;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Attaches an event listener to the element and will only invoke the listener when the event target matches\n\t   * the provided selector.\n\t   *\n\t   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n\t   *\n\t   * @param {string} event The name of the event\n\t   * @param  {string} selector The selector to match against the Element\n\t   * @param {Function} listener The event listener function\n\t   */\n\t  addDelegatedEventListener(event, selector, listener) {\n\t    addEventListener(event, function(event) {\n\t      if (event.target.matches(selector)) {\n\t        listener(event);\n\t      }\n\t    });\n\t  }\n\n\t  /**\n\t   * Attaches an event listener to this Element.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event listener function.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  addEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      this.domElement.eventListeners = this.domElement.eventListeners || {};\n\t      this.domElement.eventListeners[event] = this.domElement.eventListeners[event] || [];\n\t      if (this.domElement.eventListeners[event].indexOf(listener) === -1) {\n\t        this.domElement.eventListeners[event].push(listener);\n\t      }\n\t      this.domElement.addEventListener(event, listener, false);\n\t    } else {\n\t      // Custom event\n\t      this.domElement.customEventListeners = this.domElement.customEventListeners || {};\n\t      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n\t      if (this.domElement.customEventListeners[event].indexOf(listener) === -1) {\n\t        this.domElement.customEventListeners[event].push(listener);\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Appends the given element to this element. If the given element already exists in the DOM, it is removed from its\n\t   * current location and placed at the end of this element.\n\t   *\n\t   * @param {PrimeElement|Node} element The element to append.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  appendElement(element) {\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    if (domElement.parentNode) {\n\t      domElement.parentNode.removeChild(domElement);\n\t    }\n\n\t    this.domElement.appendChild(domElement);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Appends the given HTML string to this element.\n\t   *\n\t   * @param {string} html The HTML to append.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  appendHTML(html) {\n\t    this.domElement.insertAdjacentHTML('beforeend', html);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very end of the given\n\t   * element.\n\t   *\n\t   * @param {PrimeElement|Node} element The element to insert this Element into.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  appendTo(element) {\n\t    // Error out for now if this element is in the document so we can punt on cloning for now\n\t    if (this.domElement.parentNode) {\n\t      throw new TypeError('You can only insert new PrimeElements for now');\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    if (domElement.parentNode) {\n\t      domElement.appendChild(this.domElement);\n\t    } else {\n\t      throw new TypeError('The element you passed into appendTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Fires an event on the Element.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Object} [memo] Assigned to the memo field of the event.\n\t   * @param {Object} [target] The target.\n\t   * @param {boolean} [bubbling] If the event is bubbling, defaults to true.\n\t   * @param {boolean} [cancelable] If the event is cancellable, defaults to true.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  fireEvent(event, memo, target, bubbling, cancelable) {\n\t    memo = Utils.isDefined(memo) ? memo : {};\n\t    target = Utils.isDefined(target) ? target : this;\n\t    bubbling = Utils.isDefined(bubbling) ? bubbling : true;\n\t    cancelable = Utils.isDefined(cancelable) ? cancelable : true;\n\n\t    let evt;\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      if (document.createEventObject) {\n\t        // Dispatch for IE\n\t        evt = document.createEventObject();\n\t        evt.memo = memo || {};\n\t        evt.cancelBubble = !bubbling;\n\t        this.domElement.fireEvent('on' + event, evt);\n\t      } else if (document.createEvent) {\n\t        // Dispatch for others\n\t        if (PrimeElement.mouseEventsRegexp.exec(event)) {\n\t          evt = document.createEvent(\"MouseEvents\");\n\t          evt.initMouseEvent(event, bubbling, cancelable, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t        } else if (PrimeElement.htmlEventsRegexp.exec(event)) {\n\t          evt = document.createEvent(\"HTMLEvents\");\n\t          evt.initEvent(event, bubbling, cancelable);\n\t        } else {\n\t          throw new TypeError('Invalid event [' + event + ']');\n\t        }\n\n\t        evt.memo = memo || {};\n\t        this.domElement.dispatchEvent(evt);\n\t      } else {\n\t        throw new TypeError('Unable to fire event. Neither createEventObject nor createEvent methods are available');\n\t      }\n\t    } else {\n\t      // Custom event\n\t      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n\t      evt = {event: event, memo: memo, target: target};\n\t      for (let index in this.domElement.customEventListeners[event]) {\n\t        if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n\t          this.domElement.customEventListeners[event][index](evt);\n\t        }\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Fires a custom event on the Element using the given event object rather than creating a new event object. This is\n\t   * useful for pass-through event handling.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Object} eventObj The event object to pass to the handlers.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  fireCustomEvent(event, eventObj) {\n\t    eventObj = Utils.isDefined(eventObj) ? eventObj : {};\n\t    if (event.indexOf(':') === -1) {\n\t      throw new TypeError('This method can only be used for custom events');\n\t    }\n\n\t    // Custom event\n\t    this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n\t    for (let index in this.domElement.customEventListeners[event]) {\n\t      if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n\t        this.domElement.customEventListeners[event][index](eventObj);\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Puts the focus on this element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  focus() {\n\t    this.domElement.focus();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Returns the absolute top of this element relative to the document.\n\t   *\n\t   * @returns {number} The number of pixels that this element is from the top of the document.\n\t   */\n\t  getAbsoluteTop() {\n\t    let top = 0;\n\t    let e = this.domElement;\n\t    while (e) {\n\t      top += e.offsetTop;\n\t      e = e.offsetParent;\n\t    }\n\n\t    return top;\n\t  }\n\n\t  /**\n\t   * Returns the value of the given attribute.\n\t   *\n\t   * @param {string} name The attribute name.\n\t   * @returns {string} This attribute value or null.\n\t   */\n\t  getAttribute(name) {\n\t    const attr = this.domElement.attributes.getNamedItem(name);\n\t    if (attr) {\n\t      return attr.value;\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * Returns all of the attributes on the element as an object.\n\t   *\n\t   * @returns {object} This attributes or an empty object if there are no attributes on this element.\n\t   */\n\t  getAttributes() {\n\t    const attrs = {};\n\t    if (this.domElement.hasAttributes()) {\n\t      for (let i = 0; i < this.domElement.attributes.length; i++) {\n\t        attrs[this.domElement.attributes[i].name] = this.domElement.attributes[i].value;\n\t      }\n\t    }\n\n\t    return attrs;\n\t  }\n\n\t  /**\n\t   * Gets the viewable height of the Element as an integer value in pixels. This height includes border, padding and scroll bar but excludes the margins.\n\t   *\n\t   * @returns {number} The height as pixels (number) or a string.\n\t   */\n\t  getBorderedHeight() {\n\t    return this.domElement.offsetHeight;\n\t  }\n\n\t  /**\n\t   * Gets the width of the Element as an integer value. This width includes border, padding and scroll bar but excludes the margins.\n\t   *\n\t   * @returns {number} The height in pixels.\n\t   */\n\t  getBorderedWidth() {\n\t    return this.domElement.offsetWidth;\n\t  }\n\n\t  /**\n\t   * @returns {number} The bottom position (in pixels) of the current element.\n\t   */\n\t  getBottom() {\n\t    return this.domElement.getBoundingClientRect().bottom;\n\t  }\n\n\t  /**\n\t   * Gets the children elements of this Element, optionally reduced to those matching the optional selector.\n\t   *\n\t   * @param {string} [selector] The selector. Optional, if not provided all children will be returned.\n\t   * @returns {PrimeElementList} The children.\n\t   */\n\t  getChildren(selector) {\n\t    if (!Utils.isDefined(selector)) {\n\t      return new PrimeElementList(this.domElement.children);\n\t    }\n\n\t    const matched = [];\n\t    for (let i = 0; i < this.domElement.children.length; i++) {\n\t      const child = this.domElement.children[i];\n\t      if (child.matches(selector)) {\n\t        matched.push(child);\n\t      }\n\t    }\n\n\t    return new PrimeElementList(matched);\n\t  }\n\n\t  /**\n\t   * Gets the class value of the current element. This might be a single class or multiple class names.\n\t   *\n\t   * @returns {string} The class.\n\t   */\n\t  getClass() {\n\t    return this.domElement.className;\n\t  }\n\n\t  /**\n\t   * Gets the computed style information for this Element.\n\t   *\n\t   * @returns {IEElementStyle|CSSStyleDeclaration} The style information.\n\t   */\n\t  getComputedStyle() {\n\t    return (this.domElement.currentStyle) ? this.domElement.currentStyle : document.defaultView.getComputedStyle(this.domElement, null);\n\t  }\n\n\t  /**\n\t   * Calculates the location of this element with respect to the document rather than the elements parent, offset parent\n\t   * or scroll position.\n\t   *\n\t   * @returns {{top: number, left: number}}\n\t   */\n\t  getCoordinates() {\n\t    const box = this.domElement.getBoundingClientRect();\n\n\t    const body = document.body;\n\t    const documentElement = document.documentElement;\n\n\t    const scrollTop = window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n\t    const scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n\n\t    const clientTop = documentElement.clientTop || body.clientTop || 0;\n\t    const clientLeft = documentElement.clientLeft || body.clientLeft || 0;\n\n\t    const top = box.top + scrollTop - clientTop;\n\t    const left = box.left + scrollLeft - clientLeft;\n\n\t    return {top: Math.round(top), left: Math.round(left)};\n\t  }\n\n\t  /**\n\t   * Returns the dataset if it exists, otherwise, this creates a new dataset object and returns it.\n\t   *\n\t   * @returns {object} This dataset object.\n\t   */\n\t  getDataSet() {\n\t    if (this.domElement.dataset) {\n\t      return this.domElement.dataset;\n\t    }\n\n\t    this.domElement.dataset = {};\n\t    const attrs = this.getAttributes();\n\t    for (let prop in attrs) {\n\t      if (attrs.hasOwnProperty(prop) && prop.indexOf('data-') === 0) {\n\t        const dataName = prop.substring(5).replace(/-([a-z])/g, function(g) {\n\t          return g[1].toUpperCase();\n\t        });\n\t        this.domElement.dataset[dataName] = attrs[prop];\n\t      }\n\t    }\n\t    return this.domElement.dataset;\n\t  }\n\n\t  /**\n\t   * Returns the data value if it exists, otherwise returns null.\n\t   *\n\t   * @param {string} name The attribute name.\n\t   * @returns {string} This attribute value or null.\n\t   */\n\t  getDataAttribute(name) {\n\t    return this.getDataSet()[name] || null;\n\t  }\n\n\t  /**\n\t   * Get the first child element of this Element, optionally filtered using the optional selector.\n\t   *\n\t   * @param {string} [selector] The selector. Optional.\n\t   * @returns {PrimeElement} The first child element or null if the element has no children or a selector was provided and nothing matched the selector..\n\t   */\n\t  getFirstChild(selector) {\n\t    const lastChild = this.getChildren(selector)[0];\n\t    if (!Utils.isDefined(lastChild)) {\n\t      return null;\n\t    }\n\t    return lastChild;\n\t  }\n\n\t  /**\n\t   * Gets the viewable height of the Element as an integer value in pixels. This height includes padding and scroll bar\n\t   * but excludes the margin and borders. This is often called the innerHeight of the element.\n\t   *\n\t   * @returns {number} The height as pixels (number) or a string.\n\t   */\n\t  getHeight() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetHeight = this.domElement.offsetHeight;\n\t    const borderTop = computedStyle['borderTopWidth'];\n\t    const borderBottom = computedStyle['borderBottomWidth'];\n\t    return offsetHeight - Utils.parseCSSMeasure(borderTop) - Utils.parseCSSMeasure(borderBottom);\n\t  }\n\n\t  /**\n\t   * Gets the inner HTML content of the Element.\n\t   *\n\t   * @returns {string} The HTML content.\n\t   */\n\t  getHTML() {\n\t    return this.domElement.innerHTML;\n\t  }\n\n\t  /**\n\t   * Gets the ID of this element from the domElement.\n\t   *\n\t   * @returns {string} ID The id of the domElement if it exists.\n\t   */\n\t  getId() {\n\t    return this.domElement.id;\n\t  }\n\n\t  /**\n\t   * Get the last child element of this Element, optionally filtered using the optional selector.\n\t   *\n\t   * @param {string} [selector] The selector. Optional.\n\t   * @returns {PrimeElement} The last child element or null if the element has no children or a selector was provided and nothing matched the selector..\n\t   */\n\t  getLastChild(selector) {\n\t    const elementList = this.getChildren(selector);\n\t    if (elementList.length > 0) {\n\t      return elementList[elementList.length - 1];\n\t    }\n\t    return null;\n\t  }\n\n\t  /**\n\t   * @returns {number} The left position (in pixels) of the current element.\n\t   */\n\t  getLeft() {\n\t    return this.domElement.getBoundingClientRect().left;\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElement} This elements next sibling or null.\n\t   */\n\t  getNextSibling() {\n\t    let sibling = this.domElement.nextSibling;\n\t    while (sibling !== null && sibling.nodeType !== 1) {\n\t      sibling = sibling.nextSibling;\n\t    }\n\n\t    if (sibling === null) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(sibling);\n\t  }\n\n\t  /**\n\t   * The elements offset left in pixels.\n\t   *\n\t   * @returns {number} The offset left.\n\t   */\n\t  getOffsetLeft() {\n\t    return this.domElement.offsetLeft;\n\t  }\n\n\t  /**\n\t   * The elements offset top in pixels.\n\t   *\n\t   * @returns {number} The offset top.\n\t   */\n\t  getOffsetTop() {\n\t    return this.domElement.offsetTop;\n\t  }\n\n\t  /**\n\t   * Retrieves the opacity value for the Element. This handles the IE alpha filter.\n\t   *\n\t   * @returns {number} The opacity value.\n\t   */\n\t  getOpacity() {\n\t    const computedStyle = this.getComputedStyle();\n\t    let opacity = 1.0;\n\t    if (Browser.name === 'Explorer' && Browser.version < 9) {\n\t      const filter = computedStyle['filter'];\n\t      if (filter !== undefined && filter !== '') {\n\t        const matches = PrimeElement.ieAlphaRegexp.match(filter);\n\t        if (matches.length > 0) {\n\t          opacity = parseFloat(matches[0]);\n\t        }\n\t      }\n\t    } else {\n\t      opacity = parseFloat(computedStyle['opacity']);\n\t    }\n\n\t    return opacity;\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElementList} If this element is a select box, this returns the options of the select box in\n\t   *          an ElementList.\n\t   */\n\t  getOptions() {\n\t    if (this.getTagName() !== 'SELECT') {\n\t      throw new TypeError('You can only get the options for select elements');\n\t    }\n\n\t    return new PrimeElementList(this.domElement.options);\n\t  }\n\n\t  /**\n\t   * Gets the outer height of the element, including the margins. This does not include the padding or borders.\n\t   *\n\t   * @returns {number} The outer height of the element.\n\t   */\n\t  getOuterHeight() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetHeight = this.domElement.offsetHeight;\n\t    const marginTop = computedStyle['marginTop'];\n\t    const marginBottom = computedStyle['marginBottom'];\n\t    return offsetHeight + Utils.parseCSSMeasure(marginTop) + Utils.parseCSSMeasure(marginBottom);\n\t  }\n\n\t  /**\n\t   * Gets the outer HTML content of the Element.\n\t   *\n\t   * @returns {string} The outer HTML content.\n\t   */\n\t  getOuterHTML() {\n\t    return this.domElement.outerHTML;\n\t  }\n\n\t  /**\n\t   * Gets the outer width of the element, including the margins. This does not include the padding or borders.\n\t   *\n\t   * @returns {number} The outer width of the element.\n\t   */\n\t  getOuterWidth() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetWidth = this.domElement.offsetWidth;\n\t    const marginLeft = computedStyle['marginLeft'];\n\t    const marginRight = computedStyle['marginRight'];\n\t    return offsetWidth + Utils.parseCSSMeasure(marginLeft) + Utils.parseCSSMeasure(marginRight);\n\t  }\n\n\t  /**\n\t   * Returns this element's parent as a PrimeElement.\n\t   *\n\t   * @returns {PrimeElement} This element's parent or null if there is no parent\n\t   */\n\t  getParent() {\n\t    if (Utils.isDefined(this.domElement.parentElement)) {\n\t      return new PrimeElement(this.domElement.parentElement);\n\t    } else {\n\t      return null;\n\t    }\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElement} This elements previous sibling or null.\n\t   */\n\t  getPreviousSibling() {\n\t    let sibling = this.domElement.previousSibling;\n\t    while (sibling !== null && sibling.nodeType !== 1) {\n\t      sibling = sibling.previousSibling;\n\t    }\n\n\t    if (sibling === null) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(sibling);\n\t  }\n\n\t  /**\n\t   * @returns {number} The zIndex style of this element based on the element or the first positioned parent.\n\t   */\n\t  getRelativeZIndex() {\n\t    let e = this;\n\t    while (e !== null && e.getComputedStyle()['zIndex'] === 'auto') {\n\t      e = e.getParent();\n\t    }\n\t    return e === null ? 0 : parseInt(e.getComputedStyle()['zIndex']);\n\t  }\n\n\t  /**\n\t   * @returns {number} The right position (in pixels) of the current element.\n\t   */\n\t  getRight() {\n\t    return this.domElement.getBoundingClientRect().right;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll height of this element.\n\t   */\n\t  getScrollHeight() {\n\t    return this.domElement.scrollHeight;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll left position of this element.\n\t   */\n\t  getScrollLeft() {\n\t    return this.domElement.scrollLeft;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll top position of this element.\n\t   */\n\t  getScrollTop() {\n\t    return this.domElement.scrollTop;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll width of this element.\n\t   */\n\t  getScrollWidth() {\n\t    return this.domElement.scrollWidth;\n\t  }\n\n\t  /**\n\t   * Retrieves the selected texts of this Element, if the element is a select. If it is anything else this returns\n\t   * null.\n\t   *\n\t   * @returns {Array} The texts of this Element.\n\t   */\n\t  getSelectedTexts() {\n\t    let texts;\n\t    if (this.domElement.tagName === 'SELECT') {\n\t      texts = [];\n\t      for (let i = 0; i < this.domElement.options.length; i++) {\n\t        if (this.domElement.options[i].selected) {\n\t          texts.push(this.domElement.options[i].text);\n\t        }\n\t      }\n\t    } else {\n\t      texts = null;\n\t    }\n\n\t    return texts;\n\t  }\n\n\t  /**\n\t   * Retrieves the values of this Element, if the element is a checkbox or select. If it is anything else this returns\n\t   * null.\n\t   *\n\t   * @returns {Array} The values of this Element.\n\t   */\n\t  getSelectedValues() {\n\t    let values;\n\t    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n\t      values = [];\n\t      const name = this.domElement.name;\n\t      const form = PrimeDocument.queryUp('form', this.domElement);\n\t      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n\t        if (element.isChecked()) {\n\t          values.push(element.getValue());\n\t        }\n\t      });\n\t    } else if (this.domElement.tagName === 'SELECT') {\n\t      values = [];\n\t      for (let i = 0; i < this.domElement.length; i++) {\n\t        if (this.domElement.options[i].selected) {\n\t          values.push(this.domElement.options[i].value);\n\t        }\n\t      }\n\t    } else {\n\t      values = null;\n\t    }\n\n\t    return values;\n\t  }\n\n\t  /**\n\t   * Gets value of a style attribute.\n\t   *\n\t   * @returns {string} The style value.\n\t   */\n\t  getStyle(name) {\n\t    name = Utils.convertStyleName(name);\n\t    return this.domElement.style[name];\n\t  }\n\n\t  /**\n\t   * @returns {string} The tag name of this element as a string. This is always uppercase.\n\t   */\n\t  getTagName() {\n\t    return this.domElement.tagName;\n\t  }\n\n\t  /**\n\t   * Retrieves the text content of this Element.\n\t   *\n\t   * @returns {string} The text contents of this Element.\n\t   */\n\t  getTextContent() {\n\t    return this.domElement.innerText ? this.domElement.innerText : this.domElement.textContent;\n\t  }\n\n\t  /**\n\t   * @returns {number} The top position (in pixels) of the current element.\n\t   */\n\t  getTop() {\n\t    return this.domElement.getBoundingClientRect().top;\n\t  }\n\n\t  /**\n\t   * Gets the width of the Element as an integer value. This width includes padding and scroll bar but excludes the margin and borders.\n\t   * This is often called the innerWidth of the element.\n\t   *\n\t   * @returns {number} The height in pixels.\n\t   */\n\t  getWidth() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetWidth = this.domElement.offsetWidth;\n\t    const borderLeft = computedStyle['borderLeftWidth'];\n\t    const borderRight = computedStyle['borderRightWidth'];\n\t    return offsetWidth - Utils.parseCSSMeasure(borderLeft) - Utils.parseCSSMeasure(borderRight);\n\t  }\n\n\t  /**\n\t   * Retrieves the value attribute of this Element. This works on all checkboxes, radio buttons, text, text areas, and\n\t   * options. However, this does not retrieve the selected options in a select box, checked checkboxes or checked radio\n\t   * buttons. Use the getSelectedValues function for that.\n\t   *\n\t   * @returns {string} The value of this Element.\n\t   */\n\t  getValue() {\n\t    return this.domElement.value;\n\t  }\n\n\t  /**\n\t   * Returns true if the element has one or all class names\n\t   *\n\t   * @param {string} classNames The class name(s) in a string.\n\t   * @returns {boolean} True if all class names are present.\n\t   */\n\t  hasClass(classNames) {\n\t    const currentClassNames = this.domElement.className;\n\t    if (currentClassNames === '') {\n\t      return classNames === '';\n\t    }\n\n\t    const currentClassNameList = currentClassNames.split(Utils.spaceRegex);\n\t    const findClassNameList = classNames.split(Utils.spaceRegex);\n\t    for (let i = 0; i < findClassNameList.length; i++) {\n\t      if (currentClassNameList.indexOf(findClassNameList[i]) === -1) {\n\t        return false;\n\t      }\n\t    }\n\n\t    return true;\n\t  }\n\n\t  /**\n\t   * Hides the Element by setting the display style to none.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  hide() {\n\t    this.domElement.style.display = 'none';\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts this Element into the DOM after the given element, removing it from it's parent if it's an existing element.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to insert this Element after.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertAfter(element) {\n\t    if (this.domElement.parentNode) {\n\t      this.domElement.parentNode.removeChild(this.domElement);\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    const parentElement = domElement.parentNode;\n\t    if (parentElement) {\n\t      parentElement.insertBefore(this.domElement, domElement.nextSibling);\n\t    } else {\n\t      throw new TypeError('The element you passed into insertAfter is not in the DOM. You can\\'t insert a PrimeElement after an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts this Element into the DOM before the given element, removing it from it's parent if it's an existing element.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to insert this Element before.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertBefore(element) {\n\t    if (this.domElement.parentNode) {\n\t      this.domElement.parentNode.removeChild(this.domElement);\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    const parentElement = domElement.parentNode;\n\t    if (parentElement) {\n\t      parentElement.insertBefore(this.domElement, domElement);\n\t    } else {\n\t      throw new TypeError('The element you passed into insertBefore is not in the DOM. You can\\'t insert a PrimeElement before an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given HTML snippet directly after this element.\n\t   *\n\t   * @param {string} html The HTML string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertHTMLAfter(html) {\n\t    this.domElement.insertAdjacentHTML('afterend', html);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given HTML snippet inside this element, before its first child.\n\t   *\n\t   * @param {string} html The HTML string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertHTMLAfterBegin(html) {\n\t    this.domElement.insertAdjacentHTML('afterbegin', html);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given text after this Element.\n\t   *\n\t   * @param {string} text The text to insert.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertTextAfter(text) {\n\t    if (!this.domElement.parentNode) {\n\t      throw new TypeError('This Element is not currently in the DOM');\n\t    }\n\n\t    const textNode = document.createTextNode(text);\n\t    this.domElement.parentNode.insertBefore(textNode, this.domElement.nextSibling);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given text before this Element.\n\t   *\n\t   * @param {string} text The text to insert.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertTextBefore(text) {\n\t    if (!this.domElement.parentNode) {\n\t      throw new TypeError('This Element is not currently in the DOM');\n\t    }\n\n\t    const textNode = document.createTextNode(text);\n\t    this.domElement.parentNode.insertBefore(textNode, this.domElement);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Returns true if the element matches the provided selector.\n\t   *\n\t   * @param {string} selector to match against the Element\n\t   * @returns {boolean} True if the element matches the selector, false if it does not match the selector.\n\t   */\n\t  is(selector) {\n\t    return this.domElement.matches(selector);\n\t  }\n\n\t  /**\n\t   * Returns whether or not the element is checked. If the element is not a checkbox or a radio this returns false.\n\t   *\n\t   * @returns {boolean} True if the element is selected, false if it isn't or is not a checkbox or a radio.\n\t   */\n\t  isChecked() {\n\t    return this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio') && this.domElement.checked;\n\t  }\n\n\t  /**\n\t   * Determines if this element is a child of the given element.\n\t   *\n\t   * @param {PrimeElement|Node} element The element to check to see if this element is a child of.\n\t   * @returns {boolean} True if this element is a child of the given element, false otherwise.\n\t   */\n\t  isChildOf(element) {\n\t    const domElement = element instanceof PrimeElement ? element.domElement : element;\n\t    let parent = this.domElement.parentNode;\n\t    while (domElement !== parent && parent !== null) {\n\t      parent = parent.parentNode;\n\t    }\n\n\t    return domElement === parent;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} Whether or not this element is disabled according to the disabled property.\n\t   */\n\t  isDisabled() {\n\t    return this.domElement.disabled;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if this element has focus.\n\t   */\n\t  isFocused() {\n\t    return document.activeElement === this.domElement;\n\t  }\n\n\t  /**\n\t   * @return {boolean} True if this element is an INPUT, SELECT or TEXTAREA.\n\t   */\n\t  isInput() {\n\t    const tagName = this.getTagName();\n\t    return tagName === 'SELECT' || tagName === 'INPUT' || tagName === 'TEXTAREA';\n\t  }\n\n\t  /**\n\t   * Determines if the this element is inside the given element\n\t   *\n\t   * @param target {PrimeElement} The target element.\n\t   * @returns {boolean} True if this element is inside the given element.\n\t   */\n\t  isInside(target) {\n\t    if (this.domElement === document.body || this.domElement === document.documentElement || this.domElement === document) {\n\t      return false;\n\t    }\n\n\t    let parent = this.getParent();\n\t    while (parent.domElement !== document.body) {\n\t      if (parent.domElement === target.domElement) {\n\t        return true;\n\t      }\n\t      parent = parent.getParent();\n\t    }\n\n\t    return false;\n\t  }\n\n\t  /**\n\t   * Returns whether or not the element is selected. If the element is not an option this returns false.\n\t   *\n\t   * @returns {boolean} True if the element is selected, false if it isn't or is not an option.\n\t   */\n\t  isSelected() {\n\t    return this.domElement.tagName === 'OPTION' && this.domElement.selected;\n\t  }\n\n\t  /**\n\t   * Determines if the element is visible using its display and visibility styles.\n\t   *\n\t   * @returns {boolean} True if the element is visible, false otherwise. This might return an invalid value if the element\n\t   * is absolutely positioned and off the screen, but is still technically visible.\n\t   */\n\t  isVisible() {\n\t    const computedStyle = this.getComputedStyle();\n\t    return computedStyle['display'] !== 'none' && computedStyle['visibility'] !== 'hidden';\n\t  }\n\n\t  /**\n\t   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very beginning of the given\n\t   * element.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to insert this Element into.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  prependTo(element) {\n\t    // Error out for now if this element is in the document so we can punt on cloning for now\n\t    if (this.domElement.parentNode) {\n\t      throw new TypeError('You can only insert new PrimeElements for now');\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    if (domElement.parentNode) {\n\t      domElement.insertBefore(this.domElement, domElement.firstChild);\n\t    } else {\n\t      throw new TypeError('The element you passed into prependTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at this element and returns all the matched elements.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElementList} An element list.\n\t   */\n\t  query(selector) {\n\t    return PrimeDocument.query(selector, this);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at this element and returns the first matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  queryFirst(selector) {\n\t    return PrimeDocument.queryFirst(selector, this);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at this element and returns the last matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  queryLast(selector) {\n\t    return PrimeDocument.queryLast(selector, this);\n\t  }\n\n\t  /**\n\t   * Traverses up the DOM from this element and looks for a match to the selector.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  queryUp(selector) {\n\t    return PrimeDocument.queryUp(selector, this);\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners for the given element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeAllEventListeners() {\n\t    for (let event in this.domElement.eventListeners) {\n\t      if (this.domElement.eventListeners.hasOwnProperty(event)) {\n\t        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n\t          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n\t        }\n\t      }\n\t    }\n\n\t    this.domElement.eventListeners = {};\n\t    this.domElement.customEventListeners = {};\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes an attribute from the Element\n\t   *\n\t   * @param {string} name The name of the attribute.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeAttribute(name) {\n\t    this.domElement.removeAttribute(name);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes the given class (or list of space separated classes) from this Element.\n\t   *\n\t   * @param {string} classNames The class name(s).\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeClass(classNames) {\n\t    const currentClassName = this.domElement.className;\n\t    if (currentClassName === '') {\n\t      return this;\n\t    }\n\n\t    const currentClassNameList = currentClassName.split(Utils.spaceRegex);\n\t    const removeClassNameList = classNames.split(Utils.spaceRegex);\n\t    for (let i = 0; i < removeClassNameList.length; i++) {\n\t      Utils.removeFromArray(currentClassNameList, removeClassNameList[i]);\n\t    }\n\n\t    this.domElement.className = currentClassNameList.join(' ');\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes an event listener for a specific event from this Element, you must have attached using addEventListener\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {*} listener The event listener that was bound.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeEventListener(event, listener) {\n\t    let listeners;\n\t    if (event.indexOf(':') === -1) {\n\t      this._internalRemoveEventListener(event, listener);\n\t      listeners = this.domElement.eventListeners[event];\n\t    } else {\n\t      listeners = this.domElement.customEventListeners[event];\n\t    }\n\n\t    if (listeners) {\n\t      Utils.removeFromArray(listeners, listener);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners for the given event from this element.\n\t   *\n\t   * @param {string} event The name of the event to remove the listeners for.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeEventListeners(event) {\n\t    if (event.indexOf(':') === -1) {\n\t      if (this.domElement.eventListeners[event]) {\n\t        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n\t          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n\t        }\n\n\t        delete this.domElement.eventListeners[event];\n\t      }\n\t    } else {\n\t      if (this.domElement.customEventListeners[event]) {\n\t        delete this.domElement.customEventListeners[event];\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners for the given pattern from this element.\n\t   *\n\t   * @param {RegExp} pattern The regular expression that matches the names of the events to remove the listeners for.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeEventListenersByPattern(pattern) {\n\t    for (let event in this.domElement.eventListeners) {\n\t      if (this.domElement.eventListeners.hasOwnProperty(event) && pattern.test(event)) {\n\t        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n\t          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n\t        }\n\n\t        delete this.domElement.eventListeners[event];\n\t      }\n\t    }\n\n\t    for (let event in this.domElement.customEventListeners) {\n\t      if (this.domElement.customEventListeners.hasOwnProperty(event) && pattern.test(event)) {\n\t        delete this.domElement.customEventListeners[event];\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes this Element from the DOM. If the Element isn't in the DOM this does nothing.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeFromDOM() {\n\t    if (this.domElement.parentNode) {\n\t      this.domElement.parentNode.removeChild(this.domElement);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Create a selected range for this element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  selectElementContents() {\n\t    let range;\n\t    let selection;\n\n\t    if (document.body.createTextRange) {\n\t      /* IE */\n\t      range = document.body.createTextRange();\n\t      range.moveToElementText(this.domElement);\n\t      range.select();\n\t    } else if (window.getSelection) {\n\t      /* Rest of the world */\n\t      selection = window.getSelection();\n\t      range = document.createRange();\n\t      range.selectNodeContents(this.domElement);\n\t      selection.removeAllRanges();\n\t      selection.addRange(range);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this Element into the visible area of the browser window.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollIntoView() {\n\t    this.domElement.scrollIntoView();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the given horizontal position.\n\t   *\n\t   * @param {number} position The position to scroll the element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollLeftTo(position) {\n\t    this.domElement.scrollLeft = position;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the given vertical position.\n\t   *\n\t   * @param {number} position The position to scroll the element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollTo(position) {\n\t    this.domElement.scrollTop = position;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the bottom.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollToBottom() {\n\t    this.domElement.scrollTop = this.domElement.scrollHeight;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the top.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollToTop() {\n\t    this.domElement.scrollTop = 0;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets an attribute of the Element.\n\t   *\n\t   * @param {string} name The attribute name\n\t   * @param {number|string} value The attribute value\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setAttribute(name, value) {\n\t    if (typeof value === 'number') {\n\t      value = value.toString();\n\t    }\n\t    if (this.domElement.setAttribute) {\n\t      this.domElement.setAttribute(name, value);\n\t    } else {\n\t      const attribute = document.createAttribute(name);\n\t      attribute.nodeValue = value;\n\t      this.domElement.setAttributeNode(attribute);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a data- attribute of the Element.\n\t   *\n\t   * Example: setDataAttribute('fooBar', 'baz');\n\t   *  is equivalent to calling setAttribute('data-foo-bar', 'baz');\n\t   *\n\t   * @param {string} name The attribute name\n\t   * @param {number|string} value The attribute value\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setDataAttribute(name, value) {\n\t    const dataName = 'data-' + name.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\t    return this.setAttribute(dataName, value);\n\t  }\n\n\t  /**\n\t   * Sets multiple attributes of the Element from the hash\n\t   *\n\t   * @param {Object} attributes An object of key value style pairs.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setAttributes(attributes) {\n\t    for (let key in attributes) {\n\t      if (attributes.hasOwnProperty(key)) {\n\t        this.setAttribute(key, attributes[key]);\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n\t   * value.\n\t   *\n\t   * @param {boolean} value The value to set the checked state of this element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setChecked(value) {\n\t    this.domElement.checked = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n\t   *\n\t   * @param {boolean} value The value to set the disabled state of this element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setDisabled(value) {\n\t    this.domElement.disabled = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the height of this element using the height style.\n\t   *\n\t   * @param {number|string} height The new height as a number (for pixels) or string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setHeight(height) {\n\t    if (typeof(height) === 'number') {\n\t      height = height + 'px';\n\t    }\n\n\t    this.setStyle('height', height);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the inner HTML content of the Element.\n\t   *\n\t   * @param {string|PrimeElement} newHTML The new HTML content for the Element.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setHTML(newHTML) {\n\t    if (newHTML !== null) {\n\t      if (newHTML instanceof PrimeElement) {\n\t        this.domElement.innerHTML = newHTML.getHTML();\n\t      } else {\n\t        this.domElement.innerHTML = newHTML;\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the ID of the Element.\n\t   *\n\t   * @param {string} id The ID.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setId(id) {\n\t    this.domElement.id = id;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets left position of the element.\n\t   *\n\t   * @param {number|string} left The left position of the element in pixels or as a string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setLeft(left) {\n\t    let leftString = left;\n\t    if (typeof(left) === 'number') {\n\t      leftString = left + 'px';\n\t    }\n\n\t    this.setStyle('left', leftString);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the opacity of the element. This also sets the IE alpha filter for IE version 9 or younger.\n\t   *\n\t   * @param {number} opacity The opacity.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setOpacity(opacity) {\n\t    if (Browser.name === 'Explorer' && Browser.version < 9) {\n\t      this.domElement.style.filter = 'alpha(opacity=' + opacity + ')';\n\t    } else {\n\t      this.domElement.style.opacity = opacity;\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the selected value on the element. If the element is not an option or radio, this does nothing.\n\t   *\n\t   * @param {boolean} selected Selected value.\n\t   */\n\t  setSelected(selected) {\n\t    this.domElement.selected = selected;\n\t  }\n\n\t  /**\n\t   * Sets the selected value(s) of this element. This works on selects, checkboxes, and radio buttons.\n\t   *\n\t   * @param {string} [arguments] The value(s) to select (var args).\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setSelectedValues() {\n\t    // Handle the case where they passed in an array\n\t    let values = null;\n\t    if (arguments.length === 1 && Utils.isArray(arguments[0])) {\n\t      values = arguments[0];\n\t    } else {\n\t      values = Array.prototype.slice.call(arguments, 0);\n\t    }\n\n\t    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n\t      const name = this.domElement.name;\n\t      const form = PrimeDocument.queryUp('form', this.domElement);\n\t      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n\t        element.setChecked(values.indexOf(element.getValue()) !== -1);\n\t      });\n\t    } else if (this.domElement.tagName === 'SELECT') {\n\t      for (let i = 0; i < this.domElement.length; i++) {\n\t        this.domElement.options[i].selected = values.indexOf(this.domElement.options[i].value) !== -1;\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the style for the name of this Element.\n\t   *\n\t   * @param {string} name The style name.\n\t   * @param {number|string} value The style value.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setStyle(name, value) {\n\t    if (typeof value === 'number') {\n\t      value = value.toString();\n\t    }\n\t    this.domElement.style[name] = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets multiple styles of this Element.\n\t   *\n\t   * @param {Object} styles An object with key value pairs for the new style names and values.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setStyles(styles) {\n\t    for (let key in styles) {\n\t      if (styles.hasOwnProperty(key)) {\n\t        this.setStyle(key, styles[key]);\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the textContent of the Element.\n\t   *\n\t   * @param {number|string|PrimeElement} newText The new text content for the Element.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setTextContent(newText) {\n\t    if (newText !== null) {\n\t      if (newText instanceof PrimeElement) {\n\t        this.domElement.textContent = newText.getTextContent();\n\t      } else {\n\t        if (typeof newText === 'number') {\n\t          newText = newText.toString();\n\t        }\n\t        this.domElement.textContent = newText;\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets top position of the element.\n\t   *\n\t   * @param {number|string} top The top position of the element in pixels or as a string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setTop(top) {\n\t    let topString = top;\n\t    if (typeof(top) === 'number') {\n\t      topString = top + 'px';\n\t    }\n\n\t    this.setStyle('top', topString);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the value of this Element. This handles checkboxes, radio buttons, options, text inputs and text areas. This\n\t   * works on checkboxes and radio buttons, but it change the value attribute on them rather than checking and unchecking\n\t   * the buttons themselves. To check and uncheck the buttons, use the select method.\n\t   *\n\t   * @param {number|string} value The new value.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setValue(value) {\n\t    if (typeof value === 'number') {\n\t      value = value.toString();\n\t    }\n\t    this.domElement.value = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the width of this element using the height style.\n\t   *\n\t   * @param {number|string} width The new width as a number (for pixels) or string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setWidth(width) {\n\t    if (typeof(width) === 'number') {\n\t      width = width + 'px';\n\t    }\n\n\t    this.setStyle('width', width);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shows the Element by setting the display style first to empty string. After this, the elements computed style is\n\t   * checked to see if the element is still not visible. If that is true, the element must have a CSS style defined in\n\t   * a stylesheet that is setting it to display: none. In this case, we determine if the element is a block level element\n\t   * and either set the display to 'block' or 'inline'.\n\t   *\n\t   * @param {string} [displayValue] The display value to use for the show. This defaults to the W3C standard display\n\t   * setting depending on the type of element you are showing. For example, INPUT is inline and DIV is block.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  show(displayValue) {\n\t    if (Utils.isDefined(displayValue)) {\n\t      this.domElement.style.display = displayValue;\n\t      return this;\n\t    }\n\n\t    this.domElement.style.display = '';\n\n\t    const computedDisplay = this.getComputedStyle()['display'];\n\t    if (computedDisplay === 'none') {\n\t      if (!Utils.isDefined(displayValue)) {\n\t        displayValue = (PrimeElement.blockElementRegexp.test(this.domElement.tagName)) ? 'block' : 'inline';\n\t      }\n\n\t      this.domElement.style.display = displayValue;\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Toggle the class on this element.\n\t   *\n\t   * @param {string} className The class name.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  toggleClass(className) {\n\t    if (this.hasClass(className)) {\n\t      this.removeClass(className);\n\t    } else {\n\t      this.addClass(className);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes this element from the DOM while preserving the inner HTML.\n\t   *\n\t   * Example, call unwrap on the italic element:\n\t   *   <strong>Hello</strong><italic> World </italic> --> <strong>Hello</strong> World\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  unwrap() {\n\t    const parent = this.getParent().domElement;\n\t    while (this.domElement.firstChild) {\n\t      parent.insertBefore(this.domElement.firstChild, this.domElement);\n\t    }\n\n\t    this.removeFromDOM();\n\t  }\n\n\t  /**\n\t   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n\t   *\n\t   * @param {string} elementString The element string.\n\t   * @param {Object} [properties={}] The properties for the new element.\n\t   * @returns {PrimeElement} A new PrimeElement.\n\t   */\n\t  wrapInnerHTML(elementString, properties) {\n\t    const element = PrimeDocument.newElement(elementString, properties);\n\t    element.setHTML(this.getOuterHTML());\n\t    this.domElement.outerHTML = element.domElement.outerHTML;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Removes the event listener proxy from this element.\n\t   *\n\t   * @param {string} event The event name.\n\t   * @param {Function} listener The listener function.\n\t   * @private\n\t   */\n\t  _internalRemoveEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      if (this.domElement.removeEventListener) {\n\t        this.domElement.removeEventListener(event, listener, false);\n\t      } else if (this.domElement.detachEvent) {\n\t        this.domElement.detachEvent('on' + event, listener);\n\t      } else {\n\t        throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n\t      }\n\t    } else if (this.domElement.customEventListeners && this.domElement.customEventListeners[event]) {\n\t      // Custom event\n\t      const customListeners = this.domElement.customEventListeners[event];\n\t      Utils.removeFromArray(customListeners, listener);\n\t    }\n\t  }\n\t}\n\n\n\t/* ===================================================================================================================\n\t * Polyfill\n\t * ===================================================================================================================*/\n\n\t(function() {\n\t  if (!Element.prototype.matches) {\n\t    Element.prototype.matches = function(selector) {\n\t      const domElement = this;\n\t      const matches = (domElement.parentNode || domElement.document).querySelectorAll(selector);\n\t      let i = 0;\n\n\t      while (matches[i] && matches[i] !== domElement) {\n\t        i++;\n\t      }\n\n\t      return !!matches[i];\n\t    };\n\t  }\n\t})();\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass PrimeElementList {\n\t  /**\n\t   * Constructs an PrimeElementList object using the given array containing DOMElements or PrimeElement objects, or the NodeList containing Node objects.\n\t   *\n\t   * @constructor\n\t   * @param {Array|NodeList} elements An array containing DOMElement or PrimeElement objects, or a NodeList containing Node objects.\n\t   */\n\t  constructor(elements) {\n\t    Utils.bindAll(this);\n\n\t    // NodeList does not inherit from Array so do not assume object type.\n\t    this.length = elements.length;\n\t    for (let i = 0; i < elements.length; i++) {\n\t      if (elements[i] instanceof PrimeElement) {\n\t        this[i] = elements[i];\n\t      } else {\n\t        this[i] = new PrimeElement(elements[i]);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.addClass} on each Element in the PrimeElementList.\n\t   *\n\t   * Adds the given class (or list of space separated classes) to all Elements in this PrimeElementList.\n\t   *\n\t   * @param {string} classNames The class name(s) separated by a space.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  addClass(classNames) {\n\t    return this._proxyToElement('addClass', classNames);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.addEventListener} on each Element in the PrimeElementList.\n\t   *\n\t   * Attaches an event listener to all Elements in this PrimeElementList.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event listener function.\n\t   * @returns {PrimeElement|PrimeElementList} This Element.\n\t   */\n\t  addEventListener(event, listener) {\n\t    return this._proxyToElement('addEventListener', event, listener);\n\t  }\n\n\t  /**\n\t   * Iterates over each of the PrimeElement objects in this PrimeElementList and calls the given function for each one.\n\t   * The <code>this</code> variable inside the function will be managed by the caller of this method. You should use the\n\t   * <code>bind</code> method on the Function object if you want to manage the <code>this</code> reference.\n\t   *\n\t   * The function can optionally take two parameters. The first parameter is the current element. The second parameter\n\t   * is the current index.\n\t   *\n\t   * @param {Function} iterationFunction The function to call.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  each(iterationFunction) {\n\t    for (let i = 0; i < this.length; i++) {\n\t      iterationFunction(this[i], i);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.hide} on each Element in the PrimeElementList.\n\t   *\n\t   * Hides the Element by setting the display style to none.\n\t   *\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  hide() {\n\t    return this._proxyToElement('hide');\n\t  }\n\n\t  /**\n\t   * Returns the indexOf the element that matches the parameter, either Prime Element or DOMElement.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to look for\n\t   * @returns {number} The position of the element in the list, or -1 if not present.\n\t   */\n\t  indexOf(element) {\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\n\t    for (let i = 0; i < this.length; i++) {\n\t      if (this[i].domElement === domElement) {\n\t        return i;\n\t      }\n\t    }\n\n\t    return -1;\n\t  }\n\n\t  /**\n\t   * Removes all the matched elements in the PrimeElementList from the DOM.\n\t   *\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  removeAllFromDOM() {\n\t    for (let i = 0; i < this.length; i++) {\n\t      this[i].removeFromDOM();\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.removeClass} on each Element in the PrimeElementList.\n\t   *\n\t   * Removes the given class (or list of space separated classes) from all Elements in this PrimeElementList.\n\t   *\n\t   * @param {string} classNames The class name(s) separated by a space.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  removeClass(classNames) {\n\t    return this._proxyToElement('removeClass', classNames);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.setChecked} on each Element in the PrimeElementList.\n\t   *\n\t   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n\t   * value.\n\t   *\n\t   * @param {boolean} value The value to set the checked state of this element to.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  setChecked(value) {\n\t    return this._proxyToElement('setChecked', value);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.setDisabled} on each Element in the PrimeElementList.\n\t   *\n\t   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n\t   *\n\t   * @param {boolean} value The value to set the disabled state of this element to.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  setDisabled(value) {\n\t    return this._proxyToElement('setDisabled', value);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.show} on each Element in the PrimeElementList.\n\t   *\n\t   * Shows the element.\n\t   *\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  show() {\n\t    return this._proxyToElement('show');\n\t  }\n\n\t  /**\n\t   * @callback PrimeElementListPredicate\n\t   *\n\t   * A function that defines a condition on a PrimeElement\n\t   *\n\t   * @param {PrimeElement} element\n\t   * @returns {boolean} True if the element matches a condition\n\t   */\n\n\t  /**\n\t   * A function that tests for any element that matches a condition.\n\t   * @param {PrimeElementListPredicate} predicate A function that defines the condition to check\n\t   * @returns {boolean} True if any element matches the predicate\n\t   */\n\t  some(predicate) {\n\t    for (let i = 0; i < this.length; ++i) {\n\t      if (predicate(this[i])) {\n\t        return true;\n\t      }\n\t    }\n\t    return false;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Proxy function calls to each Element in the PrimeElementList.\n\t   * The first parameter is function name, followed by a variable length of arguments.\n\t   *\n\t   * Example usage: this._proxyToElement('addClass', classNames);\n\t   *\n\t   * @returns {PrimeElementList}\n\t   * @private\n\t   */\n\t  _proxyToElement() {\n\t    const args = Array.prototype.slice.apply(arguments);\n\t    for (let i = 0; i < this.length; i++) {\n\t      this[i][args[0]].apply(this[i], args.slice(1));\n\t    }\n\t    return this;\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tconst readyFunctions = [];\n\tconst tagRegexp = /^<(\\w+)\\s*\\/?>.*(?:<\\/\\1>)?$/;\n\n\t/**\n\t * The Body element as a PrimeElement object.\n\t *\n\t * @type {?PrimeElement}\n\t */\n\tlet bodyElement = null;\n\n\tclass PrimeDocument {\n\n\t  /**\n\t   * @returns {PrimeElement}\n\t   */\n\t  static get Element() {\n\t    return PrimeElement;\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElementList}\n\t   */\n\t  static get ElementList() {\n\t    return PrimeElementList;\n\t  }\n\n\t  /**\n\t   * @returns {Array<Function>}\n\t   */\n\t  static get readyFunctions() {\n\t    return readyFunctions;\n\t  }\n\n\t  /**\n\t   * @returns {RegExp}\n\t   */\n\t  static get tagRegexp() {\n\t    return tagRegexp;\n\t  }\n\n\t  /**\n\t   * @returns {?PrimeElement} the Prime body element\n\t   */\n\t  static get bodyElement() {\n\t    if (bodyElement === null) {\n\t      bodyElement = new PrimeElement(document.body);\n\t    }\n\t    return bodyElement;\n\t  }\n\n\t  /**\n\t   * Set the body element\n\t   * @param {?PrimeElement} body the Prime body element\n\t   */\n\t  static set bodyElement(body) {\n\t    bodyElement = body;\n\t  }\n\n\t  /**\n\t   * Attaches an event listener to the document body and will only invoke the listener when the event target matches\n\t   * the provided selector.\n\t   *\n\t   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n\t   *\n\t   * @param {string} event The name of the event\n\t   * @param  {string} selector The selector to match against the Element\n\t   * @param {Function} listener The event listener function\n\t   */\n\t  static addDelegatedEventListener(event, selector, listener) {\n\t    PrimeDocument.bodyElement.addDelegatedEventListener(event, selector, listener);\n\t  }\n\n\t  /**\n\t   * Attaches an event listener to the document, returning the handler proxy.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event listener function.\n\t   * @returns {PrimeDocument} The PrimeDocument object so you can chain method calls together.\n\t   */\n\t  static addEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      document.eventListeners = document.eventListeners || {};\n\t      document.eventListeners[event] = document.eventListeners[event] || [];\n\t      document.eventListeners[event].push(listener);\n\t      document.addEventListener(event, listener, false);\n\t    } else {\n\t      // Custom event\n\t      document.customEventListeners = document.customEventListeners || {};\n\t      document.customEventListeners[event] = document.customEventListeners[event] || [];\n\t      document.customEventListeners[event].push(listener);\n\t    }\n\n\t    return PrimeDocument;\n\t  }\n\n\t  /**\n\t   * Returns the height of the document.\n\t   *\n\t   * @returns {number} The height of the document in pixels.\n\t   */\n\t  static getHeight() {\n\t    const body = document.body;\n\t    const html = document.documentElement;\n\n\t    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n\t  }\n\n\t  /**\n\t   * Returns the width of the document.\n\t   *\n\t   * @returns {number} The width of the document in pixels.\n\t   */\n\t  static getWidth() {\n\t    const body = document.body;\n\t    const html = document.documentElement;\n\n\t    return Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);\n\t  }\n\n\t  /**\n\t   * Builds a new document using the given HTML document.\n\t   *\n\t   * @param {string} documentString The HTML string to build the document.\n\t   * @returns {Document} A new document.\n\t   */\n\t  static newDocument(documentString) {\n\t    return new DOMParser().parseFromString(documentString, \"text/html\");\n\t  }\n\n\t  /**\n\t   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n\t   *\n\t   * @param {string} elementString The element string.\n\t   * @param {Object} [properties={}] The properties for the new element.\n\t   * @returns {PrimeElement} A new PrimeElement.\n\t   */\n\t  static newElement(elementString, properties) {\n\t    properties = Utils.isDefined(properties) ? properties : {};\n\t    const result = PrimeDocument.tagRegexp.exec(elementString);\n\t    if (result === null) {\n\t      throw new TypeError('Invalid string to create a new element [' + elementString + ']. It should look like <a/>');\n\t    }\n\n\t    const element = new PrimeElement(document.createElement(result[1]));\n\t    for (let key in properties) {\n\t      if (properties.hasOwnProperty(key)) {\n\t        if (key === 'id') {\n\t          element.setId(properties[key]);\n\t        } else {\n\t          element.setAttribute(key, properties[key]);\n\t        }\n\t      }\n\t    }\n\n\t    return element;\n\t  }\n\n\t  /**\n\t   * Adds the given callback function to the list of functions to invoke when the document is ready. If the document is\n\t   * already fully loaded, this simply invokes the callback directly.\n\t   *\n\t   * @param {Function} callback The callback function.\n\t   */\n\t  static onReady(callback) {\n\t    if (document.readyState === 'complete') {\n\t      callback();\n\t    } else {\n\t      // If this is the first call, register the event listener on the document\n\t      if (this.readyFunctions.length === 0) {\n\t        if (document.addEventListener) {\n\t          document.addEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n\t        } else if (document.attachEvent) {\n\t          document.attachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n\t        } else {\n\t          throw new TypeError('No way to attach an event to the document. What browser are you running?');\n\t        }\n\t      }\n\n\t      // Add the callback\n\t      PrimeDocument.readyFunctions.push(callback);\n\t    }\n\t  }\n\n\t  /**\n\t   * Take the HTML string and append it to the body.\n\t   *\n\t   * @param {string} html The HTML to append\n\t   */\n\t  static appendHTML(html) {\n\t    document.body.insertAdjacentHTML('beforeend', html);\n\t  }\n\n\t  /**\n\t   * Moves the given element by appending it to the element provided by the second argument.\n\t   *\n\t   * @param {Element|PrimeElement} element The element to move.\n\t   * @param {Element|PrimeElement} appendToElement [appendToElement=body] The element to append to, defaults to the body if not provided.\n\t   * @returns {PrimeElement} The element that has been moved.\n\t   */\n\t  static move(element, appendToElement) {\n\t    element = (element instanceof PrimeElement) ? element : new PrimeElement(element);\n\n\t    if (!Utils.isDefined(appendToElement)) {\n\t      appendToElement = new PrimeElement(document.body);\n\t    } else {\n\t      appendToElement = (appendToElement instanceof PrimeElement) ? appendToElement : new PrimeElement(appendToElement);\n\t    }\n\n\t    appendToElement.appendHTML(element.getOuterHTML());\n\t    element.removeFromDOM();\n\t    return appendToElement.getLastChild();\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at the given element and returns all the matched elements.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n\t   * @returns {PrimeElementList} An element list.\n\t   */\n\t  static query(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      domElement = document;\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    const elements = domElement.querySelectorAll(selector);\n\t    return new PrimeElementList(elements);\n\t  }\n\n\t  /**\n\t   * Queries the DOM for an element that has the given ID.\n\t   *\n\t   * @param {string} id The ID.\n\t   * @returns {PrimeElement} The element or null.\n\t   */\n\t  static queryById(id) {\n\t    let element = document.getElementById(id);\n\t    if (!element) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(element);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at the given element and returns the first matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  static queryFirst(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      domElement = document;\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    domElement = domElement.querySelector(selector);\n\t    if (domElement === null) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(domElement);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at the given element and returns the last matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  static queryLast(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      domElement = document;\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    const domElements = domElement.querySelectorAll(selector);\n\t    if (domElements.length === 0) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(domElements[domElements.length - 1]);\n\t  }\n\n\t  /**\n\t   * Traverses up the DOM from the starting element and looks for a match to the selector.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {PrimeElement|Element} element The starting point for the upward traversal.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  static queryUp(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      throw new SyntaxError('Missing required parameter. The element is required.');\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    domElement = domElement.parentNode;\n\t    while (domElement !== null && !domElement.matches(selector)) {\n\t      domElement = domElement.parentNode;\n\t      if (domElement === document) {\n\t        domElement = null;\n\t      }\n\t    }\n\n\t    if (domElement !== null) {\n\t      return new PrimeElement(domElement);\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * Removes an event handler for a specific event from the document that you attached using addEventListener\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The listener function.\n\t   */\n\t  static removeEventListener(event, listener) {\n\t    if (document.removeEventListener) {\n\t      document.removeEventListener(event, listener, false);\n\t    } else if (document.detachEvent) {\n\t      document.detachEvent('on' + event, listener);\n\t    } else {\n\t      throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n\t    }\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Calls all the registered document ready listeners.\n\t   *\n\t   * @private\n\t   */\n\t  static _callReadyListeners() {\n\t    if (document.addEventListener || document.readyState === 'complete') {\n\t      let readyFunction;\n\t      while (readyFunction = PrimeDocument.readyFunctions.shift()) {\n\t        readyFunction();\n\t      }\n\t    }\n\n\t    if (document.removeEventListener) {\n\t      document.removeEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n\t    } else {\n\t      document.detachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n\t    }\n\t  }\n\t}\n\n\t/* ===================================================================================================================\n\t * Polyfill\n\t * ===================================================================================================================*/\n\n\t/* https://developer.mozilla.org/en-US/docs/Web/API/DOMParser */\n\t(function(DOMParser) {\n\t  const proto = DOMParser.prototype;\n\t  const nativeParse = proto.parseFromString;\n\n\t  // Firefox/Opera/IE throw errors on unsupported types\n\t  try {\n\t    // WebKit returns null on unsupported types\n\t    if ((new DOMParser()).parseFromString('', 'text/html')) {\n\t      // text/html parsing is natively supported\n\t      return;\n\t    }\n\t  } catch (ex) {\n\t  }\n\n\t  proto.parseFromString = function(markup, type) {\n\t    if (/^\\s*text\\/html\\s*(?:;|$)/i.test(type)) {\n\t      const doc = document.implementation.createHTMLDocument('');\n\t      if (markup.toLowerCase().indexOf('<!doctype') > -1) {\n\t        doc.documentElement.innerHTML = markup;\n\t      } else {\n\t        doc.body.innerHTML = markup;\n\t      }\n\t      return doc;\n\t    } else {\n\t      return nativeParse.apply(this, arguments);\n\t    }\n\t  };\n\t}(DOMParser));\n\n\t/*\n\t * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\t/**\n\t * The Utils namespace. This contains utility functions.\n\t *\n\t * @namespace Utils\n\t */\n\tconst Utils = {\n\t  spaceRegex: /\\s+/,\n\t  typeRegex: /^\\[object\\s(.*)\\]$/,\n\n\t  /**\n\t   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n\t   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n\t   * references manually you can instead bind all of the functions in the object and then use them directly for event\n\t   * listeners.\n\t   *\n\t   * Here's an example:\n\t   *\n\t   * <pre>\n\t   *   function Foo() {\n\t   *     Utils.bindAll(this);\n\t   *\n\t   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n\t   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n\t   *   }\n\t   *\n\t   *   Foo.prototype = {\n\t   *     handleClick: function(event) {\n\t   *       ...\n\t   *     }\n\t   *   };\n\t   * </pre>\n\t   *\n\t   * @param {*} object The object to bind all the functions for.\n\t   */\n\t  bindAll: function(object) {\n\t    Utils.getAllPropertyNames(object).forEach((property) => {\n\t      if (property !== 'constructor' && typeof object[property] === 'function' &&\n\t          !(object[property].name && object[property].name.startsWith('bound '))) { // name isn't defined in ie\n\t        Object.defineProperty(object, property, {value: object[property].bind(object)});\n\t      }\n\t    });\n\t  },\n\n\t  /**\n\t   * HTML escape a string.\n\t   *\n\t   * @param string The string to escape\n\t   * @returns {string} the escaped string\n\t   */\n\t  escapeHTML: function(string) {\n\t    let div = document.createElement('div');\n\t    div.appendChild(document.createTextNode(string));\n\t    return div.innerHTML;\n\t  },\n\n\t  /**\n\t   * Returns all of the properties for this object and all of its\n\t   * inherited properties from parent objects.\n\t   *\n\t   * @param object\n\t   * @returns {Array<string>}\n\t   */\n\t  getAllPropertyNames: function(object) {\n\t    let props = {};\n\n\t    do {\n\t      Object.getOwnPropertyNames(object).forEach((prop) => {\n\t        if (!props[prop]) {\n\t          props[prop]=prop;\n\t        }\n\t      });\n\t    } while (object = Object.getPrototypeOf(object));\n\n\t    return Object.keys(props);\n\t  },\n\n\t  /**\n\t   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n\t   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n\t   * references manually you can instead bind all of the functions in the object and then use them directly for event\n\t   * listeners.\n\t   *\n\t   * Here's an example:\n\t   *\n\t   * <pre>\n\t   *   function Foo() {\n\t   *     Utils.bindAll(this);\n\t   *\n\t   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n\t   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n\t   *   }\n\t   *\n\t   *   Foo.prototype = {\n\t   *     handleClick: function(event) {\n\t   *       ...\n\t   *     }\n\t   *   };\n\t   * </pre>\n\t   *\n\t   * @param {*} object The object to bind all the functions for.\n\t   * @param {String} arguments A varargs list of function names to bind.\n\t   */\n\t  bindSome: function(object) {\n\t    if (arguments.length > 1) {\n\t      for (let i = 1; i < arguments.length; i++) {\n\t        const func = object[arguments[i]];\n\t        if (!Utils.isDefined(func) || !(func instanceof Function)) {\n\t          throw new TypeError('The object does not contain a function named [' + arguments[i] + ']');\n\t        }\n\n\t        object[arguments[i]] = func.bind(object);\n\t      }\n\t    }\n\t    for (let property in object) {\n\t      if (object[property] instanceof Function) {\n\t        object[property] = object[property].bind(object);\n\t      }\n\t    }\n\t  },\n\n\t  /**\n\t   * Safely binds a function to a context.\n\t   *\n\t   * @param {Function} func The function to bind.\n\t   * @param {Object} [context] An optional context to bind the function to.\n\t   * @returns {Function} Either <code>func</code> or the newly bound function.\n\t   */\n\t  bindSafe: function(func, context) {\n\t    if (!Utils.isDefined(func)) {\n\t      throw new Error('Invalid arguments');\n\t    }\n\n\t    if (!Utils.isDefined(context)) {\n\t      return func;\n\t    }\n\n\t    return func.bind(context);\n\t  },\n\n\t  /**\n\t   * Calculates the length of the given text using the style of the given element.\n\t   *\n\t   * @param {PrimeElement} element The element to use the style of.\n\t   * @param {string} text The text to calculate the length of.\n\t   * @returns {number} The length of the text.\n\t   */\n\t  calculateTextLength: function(element, text) {\n\t    const computedStyle = element.getComputedStyle();\n\t    let textCalculator = PrimeDocument.queryById('prime-text-calculator');\n\t    if (textCalculator === null) {\n\t      textCalculator = PrimeDocument.newElement('<span/>')\n\t          .setStyles({\n\t            position: 'absolute',\n\t            width: 'auto',\n\t            fontSize: computedStyle['fontSize'],\n\t            fontFamily: computedStyle['fontFamily'],\n\t            fontWeight: computedStyle['fontWeight'],\n\t            letterSpacing: computedStyle['letterSpacing'],\n\t            whiteSpace: 'nowrap'\n\t          })\n\t          .setId('prime-text-calculator')\n\t          .setTop(-9999)\n\t          .setLeft(-9999)\n\t          .appendTo(document.body);\n\t    }\n\n\t    textCalculator.setHTML(text);\n\t    return textCalculator.getWidth();\n\t  },\n\n\t  /**\n\t   * Attempts to invoke a function iteratively in the background a specific number of times within a specific duration.\n\t   * This might not complete in the specified duration. The functions passed in should be short functions that return as\n\t   * quickly as possible. If you are using long functions, use the recursive setTimeout trick by-hand instance.\n\t   *\n\t   * @param {number} totalDuration The duration in milliseconds.\n\t   * @param {number} timesToCall The number of times to call the function.\n\t   * @param {Function} stepFunction The step function to call each iteration.\n\t   * @param {Function} [endFunction] The function to invoke at the end.\n\t   */\n\t  callIteratively: function(totalDuration, timesToCall, stepFunction, endFunction) {\n\t    const step = totalDuration / timesToCall;\n\t    let count = 0;\n\t    const id = setInterval(function() {\n\t      count++;\n\t      const last = (count >= timesToCall);\n\t      stepFunction(last);\n\t      if (last) {\n\t        clearInterval(id);\n\n\t        if (Utils.isDefined(endFunction)) {\n\t          endFunction();\n\t        }\n\t      }\n\t    }, step - 1);\n\t  },\n\n\t  /**\n\t   * Capitalizes the given String.\n\t   *\n\t   * @param {string} str The String to capitalize.\n\t   * @returns {string} The capitalized String.\n\t   */\n\t  capitalize: function(str) {\n\t    return str.charAt(0).toUpperCase() + str.substring(1);\n\t  },\n\n\t  /**\n\t   * Converts CSS style names to style JavaScript names.\n\t   *\n\t   * @param {string} name The CSS style name to convert\n\t   * @returns {string} The converted style name.\n\t   */\n\t  convertStyleName: function(name) {\n\t    if (name === 'float') {\n\t      return 'cssFloat';\n\t    }\n\n\t    let dash = name.indexOf('-');\n\t    if (dash === -1) {\n\t      return name;\n\t    }\n\n\t    let start = 0;\n\t    let result = '';\n\t    while (dash !== -1) {\n\t      const piece = name.substring(start, dash);\n\t      if (start === 0) {\n\t        result = result.concat(piece);\n\t      } else {\n\t        result = result.concat(Utils.capitalize(piece));\n\t      }\n\n\t      start = dash + 1;\n\t      dash = name.indexOf('-', start);\n\t    }\n\n\t    return result + Utils.capitalize(name.substring(start));\n\t  },\n\n\t  /**\n\t   * Return an options map {Object} of the data set values coerced to a typed value of boolean, string or number.\n\t   *\n\t   * @param {PrimeElement} element The element.\n\t   * @returns {Object} The options object.\n\t   */\n\t  dataSetToOptions: function(element) {\n\t    const options = {};\n\t    const data = element.getDataSet();\n\t    for (let prop in data) {\n\t      if (!data.hasOwnProperty(prop)) {\n\t        continue;\n\t      }\n\t      const value = data[prop];\n\t      if (isNaN(value)) {\n\t        if (value === 'true') {\n\t          options[prop] = true;\n\t        } else if (value === 'false') {\n\t          options[prop] = false;\n\t        } else {\n\t          options[prop] = value;\n\t        }\n\t      } else {\n\t        options[prop] = parseInt(value);\n\t      }\n\t    }\n\n\t    return options;\n\t  },\n\n\t  /**\n\t   * Determines if an object is an array or not.\n\t   *\n\t   * @param {*} o The object to check.\n\t   * @returns {boolean} True if the object is an array, false otherwise.\n\t   */\n\t  isArray: function(o) {\n\t    return Object.prototype.toString.call(o) === '[object Array]';\n\t  },\n\n\t  /**\n\t   * Tests whether or not the value is not null and not 'undefined'.\n\t   *\n\t   * @param {*} value The value to test.\n\t   * @returns {boolean} True if the value is defined (not null or undefined).\n\t   */\n\t  isDefined: function(value) {\n\t    return value !== null && typeof(value) !== 'undefined';\n\t  },\n\n\t  /**\n\t   * Left pad a number.\n\t   * @param {number} number the number to pad\n\t   * @param {number} width the width of the final result\n\t   * @returns {string}\n\t   */\n\t  leftPadNumber: function(number, width) {\n\t    const sign = Math.sign(number) === -1 ? '-' : '';\n\t    return sign + new Array(width).concat([Math.abs(number)]).join('0').slice(-width);\n\t  },\n\n\t  /**\n\t   * Parses a CSS measure value (12px) as an integer.\n\t   *\n\t   * @param {string} measure The CSS measure\n\t   * @returns {number} The value as an integer.\n\t   */\n\t  parseCSSMeasure: function(measure) {\n\t    const index = measure.indexOf('px');\n\t    if (index > 0) {\n\t      return parseInt(measure.substring(0, measure.length - 2));\n\t    }\n\n\t    return parseInt(measure) || 0;\n\t  },\n\n\t  /**\n\t   * Parses JSON.\n\t   *\n\t   * @param {string} json The JSON.\n\t   * @returns {Object} The JSON data as an object.\n\t   */\n\t  parseJSON: function(json) {\n\t    return JSON.parse(json);\n\t  },\n\n\t  /**\n\t   * Removes the objects in the toRemove array from the fromArray.\n\t   *\n\t   * @param {Array} fromArray The array to remove from.\n\t   * @param {Array} toRemove The values to remove.\n\t   */\n\t  removeAllFromArray: function(fromArray, toRemove) {\n\t    for (let i = 0; i < toRemove.length; i++) {\n\t      Utils.removeFromArray(fromArray, toRemove[i]);\n\t    }\n\t  },\n\n\t  /**\n\t   * Removes the given object from the given array.\n\t   *\n\t   * @param {Array} array The array to remove from.\n\t   * @param {*} obj The object to remove.\n\t   */\n\t  removeFromArray: function(array, obj) {\n\t    const index = array.indexOf(obj);\n\t    if (index !== -1) {\n\t      const shift = array.splice(index + 1, array.length);\n\t      array.length = index;\n\t      array.push.apply(array, shift);\n\t    }\n\t  },\n\n\t  /**\n\t   * Helper function to provide a one liner to behave as if you returned 'false' from a legacy version of Prime.js.\n\t   *\n\t   * Calling this method is equivalent to calling event.preventDefault and event.stopPropagation.\n\t   * @param event\n\t   */\n\t  stopEvent: function(event) {\n\t    // Compatibility with older versions of IE\n\t    event.cancelBubble = true;\n\t    if (event.stopPropagation) {\n\t      event.stopPropagation();\n\t    }\n\t    if (event.preventDefault) {\n\t      event.preventDefault();\n\t    }\n\t  },\n\n\t  type: function(object) {\n\t    return Object.prototype.toString.call(object).match(Utils.typeRegex)[1];\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\t/**\n\t * The singleton instance.\n\t *\n\t * @type {Overlay}\n\t */\n\tlet instance;\n\n\tclass Overlay {\n\t  /**\n\t   * Constructs a new Overlay instance once per DOM.\n\t   *\n\t   * @constructor\n\t   */\n\t  constructor() {\n\t    Utils.bindAll(this);\n\n\t    // Check if the overlay doesn't exist and add it\n\t    this.overlay = PrimeDocument.queryById('prime-overlay');\n\t    if (this.overlay === null) {\n\t      this.overlay = PrimeDocument.newElement('<div/>').setId('prime-overlay').appendTo(document.body).hide();\n\t    }\n\t    this.bodyOverflow = null;\n\t  }\n\n\t  /**\n\t   * Return the instance of the Overlay widget\n\t   * @returns {Overlay}\n\t   */\n\t  static get instance() {\n\t    return instance;\n\t  }\n\n\t  /**\n\t   * Set the instance value of the Overlay instance\n\t   * @param  value {Overlay}\n\t   */\n\t  static set instance(value) {\n\t    instance = value;\n\t  }\n\n\t  /**\n\t   * Closes the overlay and the target element.\n\t   */\n\t  close() {\n\t    // using null ensures that if this style is not defined, we'll remove it when we're done\n\t    let overflowStyle = this.bodyOverflow || '';\n\t    PrimeDocument.bodyElement.setStyle('overflow', overflowStyle);\n\t    this.overlay.setStyle('zIndex', '10');\n\t    this.overlay.hide();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the overlay and positions the element over it.\n\t   * @param zIndex {Number|string}\n\t   */\n\t  open(zIndex) {\n\t    if (this.bodyOverflow === null) {\n\t      this.bodyOverflow = PrimeDocument.bodyElement.getStyle('overflow');\n\t    }\n\t    PrimeDocument.bodyElement.setStyle('overflow', 'hidden');\n\t    this.overlay.show();\n\n\t    // Set the z-index of this dialog and the overlay\n\t    this.overlay.setStyle('zIndex', zIndex.toString());\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Changes the id of the Overlay element.\n\t   *\n\t   * @param id {string} The new id.\n\t   * @returns {Overlay}\n\t   */\n\t  setId(id) {\n\t    this.overlay.setId(id);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Updates the zindex of the overlay.\n\t   *\n\t   * @param zIndex {string|number} The new zIndex.\n\t   */\n\t  setZIndex(zIndex) {\n\t    this.overlay.setStyle('zIndex', zIndex.toString());\n\t    return this;\n\t  }\n\t}\n\n\tPrimeDocument.onReady(function() {\n\t  Overlay.instance = new Overlay();\n\t});\n\n\t/*\n\t * Copyright (c) 2014-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass PrimeRequest {\n\t  /**\n\t   * Makes a new AJAX request.\n\t   *\n\t   * @constructor\n\t   * @param {string} [url] The URL to call. This can be left out for sub-classing but should otherwise be provided.\n\t   * @param {string} [method=GET] The HTTP method to use. You can specify GET, POST, PUT, DELETE, HEAD, SEARCH, etc.\n\t   */\n\t  constructor(url, method) {\n\t    Utils.bindAll(this);\n\t    this.xhr = new XMLHttpRequest();\n\t    this.async = true;\n\t    this.body = null;\n\t    this.queryParams = null;\n\t    this.contentType = null;\n\t    this.inProgress = null;\n\t    this.errorHandler = this.onError;\n\t    this.headers = {};\n\t    this.loadingHandler = this.onLoading;\n\t    this.method = method || 'GET';\n\t    this.openHandler = this.onOpen;\n\t    this.password = null;\n\t    this.sendHandler = this.onSend;\n\t    this.successHandler = this.onSuccess;\n\t    this.unsetHandler = this.onUnset;\n\t    this.url = url;\n\t    this.username = null;\n\t  }\n\n\t  /**\n\t   * Changes the URL to call.\n\t   *\n\t   * @param {string} url The new URL to call.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  forURL(url) {\n\t    this.url = url;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Invokes the AJAX request. If the URL is not set, this throws an exception.\n\t   *\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  go() {\n\t    if (!this.url) {\n\t      throw new TypeError('No URL set for AJAX request');\n\t    }\n\n\t    let requestUrl = this.url;\n\t    if ((this.method === 'GET' || this.method === 'DELETE') && this.queryParams !== null) {\n\t      if (requestUrl.indexOf('?') === -1) {\n\t        requestUrl += '?' + this.queryParams;\n\t      } else {\n\t        requestUrl += '&' + this.queryParams;\n\t      }\n\t    }\n\n\t    if (this.async) {\n\t      if (this.inProgress !== null) {\n\t        this.inProgress.open();\n\t      }\n\n\t      this.xhr.onreadystatechange = this._handler.bind(this);\n\t    }\n\n\t    this.xhr.open(this.method, requestUrl, this.async, this.username, this.password);\n\n\t    if (Object.keys(this.headers).length > 0) {\n\t      for (let key in this.headers) {\n\t        if (this.headers.hasOwnProperty(key)) {\n\t          this.xhr.setRequestHeader(key, this.headers[key]);\n\t        }\n\t      }\n\t    }\n\n\t    if (this.contentType) {\n\t      this.xhr.setRequestHeader('Content-Type', this.contentType);\n\t    }\n\n\t    this.xhr.send(this.body);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Default handler for the \"completed\" state and an HTTP response status of anything but 2xx. Sub-classes can override\n\t   * this handler or you can pass in a handler function to the {@link #withUnsetHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onError(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"loading\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withLoadingHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onLoading(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"open\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withOpenHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onOpen(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"send\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withSendHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onSend(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"complete\" state and an HTTP response status of 2xx. Sub-classes can override this handler\n\t   * or you can pass in a handler function to the {@link #withUnsetHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onSuccess(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"unset\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withUnsetHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onUnset(xhr) {\n\t  }\n\n\t  /**\n\t   * Sets the async flag to false.\n\t   *\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  synchronously() {\n\t    this.async = false;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the method used to make the AJAX request.\n\t   *\n\t   * @param {string} method The HTTP method.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  usingMethod(method) {\n\t    this.method = method;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the request body for the request.\n\t   *\n\t   * @param {string} body The request body.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withBody(body) {\n\t    this.body = body;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the content type for the request.\n\t   *\n\t   * @param {string} contentType The contentType.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withContentType(contentType) {\n\t    this.contentType = contentType;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the data object for the request. Will store the values for query parameters or post data depending on the\n\t   * method that is set.  If the method is a post or put, will also set content-type to x-www-form-urlencoded.\n\t   *\n\t   * @param {Object} data The data object.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withData(data) {\n\t    for (let prop in data) {\n\t      if (data.hasOwnProperty(prop)) {\n\t        if (this.method === 'PUT' || this.method === 'POST') {\n\t          this.body = this._addDataValue(this.body, prop, data[prop]);\n\t        } else {\n\t          this.queryParams = this._addDataValue(this.queryParams, prop, data[prop]);\n\t        }\n\t      }\n\t    }\n\n\t    if (this.method === \"PUT\" || this.method === \"POST\") {\n\t      this.contentType = 'application/x-www-form-urlencoded';\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the data for the request using the form fields in the given form element. Will store the values for query\n\t   * parameters or post data depending on the method that is set.  If the method is a post or put, will also set\n\t   * content-type to x-www-form-urlencoded.\n\t   *\n\t   * @param {PrimeElement|HTMLFormElement} form The form object.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withDataFromForm(form) {\n\t    let domElement = form;\n\t    if (form instanceof PrimeElement) {\n\t      domElement = form.domElement;\n\t    }\n\n\t    for (let i = 0; i < domElement.elements.length; i++) {\n\t      const primeElement = new PrimeElement(domElement.elements[i]);\n\t      if (primeElement.isDisabled() || !primeElement.isInput()) {\n\t        continue;\n\t      }\n\n\t      let type = primeElement.getAttribute('type');\n\t      if (type !== null) {\n\t        type = type.toLowerCase();\n\t      }\n\n\t      let values;\n\t      if (primeElement.getTagName() === 'SELECT') {\n\t        values = primeElement.getSelectedValues();\n\t      } else if ((type === 'radio' || type === 'checkbox') && !primeElement.isChecked()) {\n\t        continue;\n\t      } else {\n\t        values = primeElement.getValue();\n\t      }\n\n\t      const name = primeElement.domElement.name;\n\t      if (this.method === 'PUT' || this.method === 'POST') {\n\t        this.body = this._addDataValue(this.body, name, values);\n\t      } else {\n\t        this.queryParams = this._addDataValue(this.queryParams, name, values);\n\t      }\n\t    }\n\n\t    if (this.method === \"PUT\" || this.method === \"POST\") {\n\t      this.contentType = 'application/x-www-form-urlencoded';\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n\t   * not 2xx.\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withErrorHandler(func) {\n\t    this.errorHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets an InProgress object that will be called by this AJAX request.\n\t   *\n\t   * @param {InProgress} inProgress The InProgress object.\n\t   * @return {PrimeRequest} This.\n\t   */\n\t  withInProgress(inProgress) {\n\t    this.inProgress = inProgress;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the body of the AJAX request to the string value of the provided JSON object. The content-type of the request\n\t   * will also be set to 'application/json'. The provided JSON object may be passed as a string or an object.\n\t   *\n\t   * @param {Object} json The JSON object.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withJSON(json) {\n\t    this.body = typeof(json) === String ? json : JSON.stringify(json);\n\t    this.contentType = 'application/json';\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"loading\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withLoadingHandler(func) {\n\t    this.loadingHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set the request headers using the key and value.\n\t   *\n\t   * @param {String} key The key name.\n\t   * @param {String} value The value.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withHeader(key, value) {\n\t    this.headers[key] = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set the key value pairs provided as request headers.\n\t   *\n\t   * @param {Object} headers A map of key value pairs.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withHeaders(headers) {\n\t    for (let key in headers) {\n\t      if (headers.hasOwnProperty(key)) {\n\t        this.headers[key] = headers[key];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the XMLHTTPRequest's response type field, which will control how the response is parsed.\n\t   *\n\t   * @param {string} responseType The response type.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withResponseType(responseType) {\n\t    this.xhr.responseType = responseType;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"open\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withOpenHandler(func) {\n\t    this.openHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"send\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withSendHandler(func) {\n\t    this.sendHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n\t   * 2xx.\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withSuccessHandler(func) {\n\t    this.successHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"unset\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withUnsetHandler(func) {\n\t    this.unsetHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Resets the Request back to a base state (basically just the URL + method).  This can be\n\t   * useful if a component is going to make many requests to the same endpoint with different parameters.\n\t   *\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  reset() {\n\t    this.queryParams = null;\n\t    this.data = null;\n\t    this.body = null;\n\t    this.contentType = null;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Adds the given name-value pair to the given data String. If the value is an array, it adds multiple values for each\n\t   * piece. Otherwise, it assumes value is a String or can be converted to a String.\n\t   *\n\t   * @param {string} dataString The data String used to determine if an ampersand is necessary.\n\t   * @param {string} name The name of the name-value pair.\n\t   * @param {string|Array} value The value of the name-value pair.\n\t   * @returns {string} The new data string.\n\t   * @private\n\t   */\n\t  _addDataValue(dataString, name, value) {\n\t    let result = '';\n\t    if (value instanceof Array) {\n\t      for (let i = 0; i < value.length; i++) {\n\t        result += encodeURIComponent(name) + '=' + encodeURIComponent(value[i]);\n\t        if (i + 1 < value.length) {\n\t          result += '&';\n\t        }\n\t      }\n\t    } else {\n\t      result = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n\t    }\n\n\t    if (dataString !== null && result !== '') {\n\t      result = dataString + '&' + result;\n\t    } else if (dataString !== null && result === '') {\n\t      result = dataString;\n\t    }\n\n\t    return result;\n\t  }\n\n\t  /**\n\t   * @private\n\t   */\n\t  _handler() {\n\t    if (this.xhr.readyState === 0) {\n\t      this.unsetHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 1) {\n\t      this.openHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 2) {\n\t      this.sendHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 3) {\n\t      this.loadingHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 4) {\n\n\t      // Call the InProgress before hand because the success handler might call another AJAX method that might open another InProgress\n\t      if (this.inProgress !== null) {\n\t        this.inProgress.close(function() {\n\t          if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n\t            this.successHandler(this.xhr);\n\t          } else {\n\t            this.errorHandler(this.xhr);\n\t          }\n\t        }.bind(this));\n\t      } else {\n\t        if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n\t          this.successHandler(this.xhr);\n\t        } else {\n\t          this.errorHandler(this.xhr);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass PrimeWindow {\n\t  /**\n\t   * Attaches an event listener to the window, returning the handler proxy.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event handler.\n\t   * @returns {Window} The window object.\n\t   */\n\t  static addEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      window.eventListeners = window.eventListeners || {};\n\t      window.eventListeners[event] = window.eventListeners[event] || [];\n\t      window.eventListeners[event].push(listener);\n\t      if (window.addEventListener) {\n\t        window.addEventListener(event, listener, false);\n\t      } else if (window.attachEvent) {\n\t        window.attachEvent('on' + event, listener);\n\t      } else {\n\t        throw new TypeError('Unable to set event onto the window. Neither addEventListener nor attachEvent methods are available');\n\t      }\n\t    } else {\n\t      // Custom event\n\t      window.customEventListeners = window.customEventListeners || {};\n\t      window.customEventListeners[event] = window.customEventListeners[event] || [];\n\t      window.customEventListeners[event].push(listener);\n\t    }\n\n\t    return window;\n\t  }\n\n\t  /**\n\t   * Returns the inner height of the window. This includes only the rendering area and not the window chrome (toolbars,\n\t   * status bars, etc). If this method can't figure out the inner height, it throws an exception.\n\t   *\n\t   * @returns {number} The inner height of the window.\n\t   */\n\t  static getInnerHeight() {\n\t    if (typeof(window.innerHeight) === 'number') {\n\t      // Most browsers\n\t      return window.innerHeight;\n\t    } else if (document.documentElement && document.documentElement.clientHeight) {\n\t      // IE 6+ in 'standards compliant mode'\n\t      return document.documentElement.clientHeight;\n\t    } else if (document.body && document.body.clientHeight) {\n\t      // IE 4 compatible\n\t      return document.body.clientHeight;\n\t    }\n\n\t    throw new Error('Unable to determine inner height of the window');\n\t  }\n\n\t  /**\n\t   * Returns the inner width of the window. This includes only the rendering area and not the window chrome (toolbars,\n\t   * status bars, etc). If this method can't figure out the inner width, it throws an exception.\n\t   *\n\t   * @returns {number} The inner width of the window.\n\t   */\n\t  static getInnerWidth() {\n\t    if (typeof(window.innerWidth) === 'number') {\n\t      // Most browsers\n\t      return window.innerWidth;\n\t    } else if (document.documentElement && document.documentElement.clientWidth) {\n\t      // IE 6+ in 'standards compliant mode'\n\t      return document.documentElement.clientWidth;\n\t    } else if (document.body && document.body.clientWidth) {\n\t      // IE 4 compatible\n\t      return document.body.clientWidth;\n\t    }\n\n\t    throw new Error('Unable to determine inner width of the window');\n\t  }\n\n\t  /**\n\t   * Returns the number of pixels the Window is scrolled by.\n\t   *\n\t   * @returns {number} The number of pixels.\n\t   */\n\t  static getScrollTop() {\n\t    if (typeof(window.pageYOffset) === 'number') {\n\t      return window.pageYOffset;\n\t    } else if (document.body && document.body.scrollTop) {\n\t      return document.body.scrollTop;\n\t    } else if (document.documentElement && document.documentElement.scrollTop) {\n\t      return document.documentElement.scrollTop;\n\t    }\n\n\t    throw new Error('Unable to determine scrollTop of the window');\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass Draggable {\n\t  /**\n\t   * Constructs a new Draggable object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Draggable widget.\n\t   * @param {string} [gripSelector=] gripSelector The optional selector to identify the 'grippy' part.\n\t   * @constructor\n\t   */\n\t  constructor(element, gripSelector) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.offset = {};\n\n\t    if (!Utils.isDefined(gripSelector)) {\n\t      this.grip = this.element;\n\t    } else {\n\t      this.grip = this.element.queryFirst(gripSelector);\n\t      if (this.grip === null) {\n\t        throw Error('Unable to find an element using the provided selector [' + gripSelector + ']');\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Destroys the Draggable Widget\n\t   */\n\t  destroy() {\n\t    this.element.removeClass('active');\n\t    this.element.setStyles(this.originalStyle);\n\n\t    this.grip.removeEventListener('mousedown', this._handleMouseDown);\n\t    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\t  }\n\n\t  /**\n\t   * Initializes the Draggable by attaching the event listeners.\n\t   *\n\t   * @returns {Draggable} This.\n\t   */\n\t  initialize() {\n\t    this.originalStyle = {\n\t      cursor: this.element.getStyle('cursor'),\n\t      zIndex: this.element.getStyle('zIndex')\n\t    };\n\n\t    this.grip.addEventListener('mousedown', this._handleMouseDown).setStyle('cursor', 'move');\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handle Mouse Down Event\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleMouseDown(event) {\n\t    event.preventDefault();\n\t    this.element.addClass('active');\n\n\t    this.offset = {\n\t      zIndex: this.element.getStyle('zIndex'),\n\t      height: this.element.getOuterHeight(),\n\t      width: this.element.getOuterWidth(),\n\t      x: event.screenX,\n\t      y: event.screenY\n\t    };\n\n\t    this.element.setStyle('zIndex', this.offset.zIndex + 10);\n\n\t    // Remove old listeners\n\t    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\n\t    // Attach all the events\n\t    PrimeDocument.addEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.addEventListener('mouseup', this._handleMouseUp);\n\t  }\n\n\t  /**\n\t   * Handle the Mouse Move event for the body element.\n\t   *\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleMouseMove(event) {\n\t    const xDiff = event.screenX - this.offset.x;\n\t    const yDiff = event.screenY - this.offset.y;\n\t    this.offset.x = event.screenX;\n\t    this.offset.y = event.screenY;\n\t    this.element.setLeft(this.element.getLeft() + xDiff);\n\t    this.element.setTop(this.element.getTop() + yDiff);\n\t  }\n\n\t  /**\n\t   * Handle the Mouse Up event for this draggable widget.\n\t   * @private\n\t   */\n\t  _handleMouseUp() {\n\t    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\t    this.element.setStyle('zIndex', this.offset.zIndex);\n\t    this.element.removeClass('active');\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass AJAXDialog {\n\t  /**\n\t   * Constructs a new dialog box, which is dynamically built and then populated with the HTML returned from an AJAX call.\n\t   *\n\t   * @constructor\n\t   */\n\t  constructor() {\n\t    Utils.bindAll(this);\n\n\t    this.draggable = null;\n\t    this.element = null;\n\t    this.initialized = false;\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  close() {\n\t    this.element.removeClass('open');\n\t    if (this.draggable !== null) {\n\t      this.draggable.destroy();\n\t      this.draggable = null;\n\t    }\n\n\t    setTimeout(function() {\n\t      this.element.removeFromDOM();\n\t      this.element = null;\n\n\t      const highestZIndex = this._determineZIndex();\n\t      if (highestZIndex !== 0) {\n\t        Overlay.instance.setZIndex(highestZIndex);\n\t      } else {\n\t        Overlay.instance.close();\n\t      }\n\t    }.bind(this), this.options.closeTimeout);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the dialog by calling the close function.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  destroy() {\n\t    this.close();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the dialog.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  initialize() {\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the dialog by making the AJAX GET request to the given URI and the opening then dialog.\n\t   *\n\t   * @param uri {string} The URI to make the AJAX GET request to.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  open(uri) {\n\t    const request = this.options.ajaxRequest || new PrimeRequest(uri, 'GET');\n\t    request.withSuccessHandler(this._handleAJAXDialogResponse)\n\t        .withErrorHandler(this._handleAJAXDialogResponse)\n\t        .go();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the dialog by making the AJAX POST request to the given URI with the given form and extra data (optional)\n\t   * and then opening the dialog.\n\t   *\n\t   * @param uri {string} The URI to make the AJAX POST request to.\n\t   * @param form {HTMLFormElement|PrimeElement} The Form element to retrieve the data from.\n\t   * @param extraData [extraData=] {object} (Optional) Extra data to send with the POST.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  openPost(uri, form, extraData) {\n\t    new PrimeRequest(uri, 'POST')\n\t        .withDataFromForm(form)\n\t        .withData(extraData)\n\t        .withSuccessHandler(this._handleAJAXDialogResponse)\n\t        .go();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Updates the HTML contents of the dialog.\n\t   *\n\t   * @param html {String} The HTML.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  setHTML(html) {\n\t    this.element.setHTML(html);\n\t    this._initializeDialog();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets any additional classes that should be on the dialog.\n\t   *\n\t   * @param classes {string} The list of additional classes.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withAdditionalClasses(classes) {\n\t    this.options.additionalClasses = classes;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Override the default Ajax Request used to open the dialog. This does not override the\n\t   * success and error handlers.\n\t   *\n\t   * @param request {PrimeRequest} The Ajax Request to use to open the dialog.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withAjaxRequest(request) {\n\t    this.options.ajaxRequest = request;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the callback that is called after the dialog has been fetched and rendered.\n\t   *\n\t   * @param callback {function} The callback function.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withCallback(callback) {\n\t    this.options.callback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the dialog element.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withClassName(className) {\n\t    if (className.indexOf(' ') !== -1) {\n\t      throw 'Invalid class name [' + className + ']. You can use the additionalClasses options to add more classes.';\n\t    }\n\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n\t   * the server.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withCloseButtonElementSelector(selector) {\n\t    this.options.closeButtonElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the draggable element selector that is used for the DraggableWidget.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withDraggableButtonElementSelector(selector) {\n\t    this.options.draggableElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets an error callback for AJAX form handling. This is called after a failed form submission.\n\t   *\n\t   * @param callback {Function} The callback function. The callback function will called with two parameters,\n\t   *        the first is a reference this object, the second is the XMLHttpRequest object.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormErrorCallback(callback) {\n\t    this.options.formErrorCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not forms inside the dialog are handled via AJAX or not.\n\t   *\n\t   * @param enabled {boolean} The choice.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormHandling(enabled) {\n\t    this.options.formHandling = enabled;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a pre-submit callback for AJAX form handling. This is called before the form is submitted.\n\t   *\n\t   * @param callback {Function} The callback function.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormPreSubmitCallback(callback) {\n\t    this.options.formPreSubmitCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a success callback for AJAX form handling. This is called after a successful form submission.\n\t   *\n\t   * @param callback {Function} The callback function. The callback function will called with two parameters,\n\t   *        the first is a reference this object, the second is the XMLHttpRequest object.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormSuccessCallback(callback) {\n\t    this.options.formSuccessCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  _determineZIndex() {\n\t    let highestZIndex = 0;\n\t    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n\t      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n\t      if (dialog.isVisible() && zIndex > highestZIndex) {\n\t        highestZIndex = zIndex;\n\t      }\n\t    });\n\t    return highestZIndex;\n\t  }\n\n\t  _handleCloseClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    this.close();\n\t  }\n\n\t  _handleAJAXDialogResponse(xhr) {\n\t    this.element = PrimeDocument.newElement('<div/>', {class: this.options.className + ' ' + this.options.additionalClasses}).appendTo(document.body);\n\t    this.setHTML(xhr.responseText);\n\t  }\n\n\t  _handleAJAXFormError(xhr) {\n\t    this.setHTML(xhr.responseText);\n\t    this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n\n\t    if (this.options.formErrorCallback !== null) {\n\t      this.options.formErrorCallback(this, xhr);\n\t    }\n\n\t    if (this.draggable !== null) {\n\t      this.draggable.destroy();\n\t    }\n\n\t    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n\t      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n\t    }\n\t  }\n\n\t  _handleAJAXFormSuccess(xhr) {\n\t    if (this.options.formSuccessCallback !== null) {\n\t      this.options.formSuccessCallback(this, xhr);\n\t    } else {\n\t      const successURI = this.form.getDataSet()['ajaxSuccessUri'];\n\t      if (successURI !== undefined) {\n\t        window.location = successURI;\n\t      } else {\n\t        window.location.reload();\n\t      }\n\t    }\n\t  }\n\n\t  _handleAJAXFormSubmit(event) {\n\t    Utils.stopEvent(event);\n\n\t    if (this.options.formPreSubmitCallback !== null) {\n\t      this.options.formPreSubmitCallback(this);\n\t    }\n\n\t    new PrimeRequest(this.form.getAttribute('action'), this.form.getAttribute('method'))\n\t        .withDataFromForm(this.form)\n\t        .withSuccessHandler(this._handleAJAXFormSuccess)\n\t        .withErrorHandler(this._handleAJAXFormError)\n\t        .go();\n\t  }\n\n\t  _initializeDialog() {\n\t    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n\t      e.addEventListener('click', this._handleCloseClickEvent);\n\t    }.bind(this));\n\n\t    // Only set the z-index upon first open\n\t    if (!this.initialized) {\n\t      const highestZIndex = this._determineZIndex();\n\t      Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n\t      this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n\t      this.element.addClass('open');\n\t    }\n\n\t    // Call the callback before positioning to ensure all changes to the dialog have been made\n\t    if (this.options.callback !== null) {\n\t      this.options.callback(this);\n\t    }\n\n\t    // Setup forms if enabled\n\t    if (this.options.formHandling) {\n\t      this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n\t    }\n\n\t    // Only set the position of the dialog when we first open it, if someone calls setHTML on the dialog we are not resizing it.\n\t    if (!this.initialized) {\n\t      // Position the fixed dialog in the center of the screen\n\t      const windowHeight = PrimeWindow.getInnerHeight();\n\t      const dialogHeight = this.element.getHeight();\n\t      this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n\t    }\n\n\t    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n\t      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n\t    }\n\n\t    this.initialized = true;\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      additionalClasses: '',\n\t      ajaxRequest: null,\n\t      callback: null,\n\t      className: 'prime-dialog',\n\t      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n\t      closeTimeout: 200,\n\t      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n\t      formErrorCallback: null,\n\t      formHandling: false,\n\t      formPreSubmitCallback: null,\n\t      formSuccessCallback: null,\n\t      zIndexOffset: 1000\n\t    };\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\t/**\n\t * @const {{Keys: {BACKSPACE: number, ENTER: number, ESCAPE: number, SPACE: number, TAB: number, LEFT_ARROW: number, UP_ARROW: number, RIGHT_ARROW: number, DOWN_ARROW: number, DELETE: number}} Events}\n\t */\n\tconst Events = {\n\t  Keys: {\n\t    BACKSPACE: 8,\n\t    ENTER: 13,\n\t    ESCAPE: 27,\n\t    SPACE: 32,\n\t    TAB: 9,\n\t    LEFT_ARROW: 37,\n\t    UP_ARROW: 38,\n\t    RIGHT_ARROW: 39,\n\t    DOWN_ARROW: 40,\n\t    DELETE: 46\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tconst PrimeDate = {\n\t  DAYS_IN_MONTH: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n\t  /**\n\t   * Return the hour in a 12-hour format. AM and PM are not communicated by the returned hour.\n\t   *\n\t   * @param date {Date} The date object to retrieve the hour from.\n\t   * @returns {Number} The hour of the day between 1 and 12.\n\t   */\n\t  getHourOfDay: function(date) {\n\t    return (date.getHours() + 24) % 12 || 12;\n\t  },\n\n\t  /**\n\t   * @param year The year.\n\t   * @returns {boolean} True if this is a leap year, otherwise false.\n\t   */\n\t  isLeapYear: function(year) {\n\t    return !((year % 4) || (!(year % 100) && (year % 400)));\n\t  },\n\n\t  /**\n\t   * Return the number of days in the month.\n\t   * @param year The year, the days in the month may change during a leap year.\n\t   * @param month The month.\n\t   * @returns {Number} The number of days in the month.\n\t   */\n\t  numberOfDaysInMonth: function(year, month) {\n\t    if (month === 1 && this.isLeapYear(year)) {\n\t      return 29;\n\t    } else {\n\t      return PrimeDate.DAYS_IN_MONTH[month];\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of days to the given Date.\n\t   *\n\t   * @param date {Date} The date to add the days to.\n\t   * @param number {Number} The number of days to add.\n\t   */\n\t  plusDays: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    let newDate = date.getDate() + number;\n\t    let numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\n\t    if (newDate > 0) {\n\t      while (newDate > numberOfDaysInMonth) {\n\t        PrimeDate.plusMonths(date, 1);\n\t        newDate = newDate - numberOfDaysInMonth;\n\t        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\t      }\n\n\t      date.setDate(newDate);\n\t    } else {\n\t      while (newDate <= 0) {\n\t        PrimeDate.plusMonths(date, -1);\n\t        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\t        newDate = newDate + numberOfDaysInMonth;\n\t      }\n\n\t      date.setDate(newDate);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of hours to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of hours to add.\n\t   */\n\t  plusHours: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    const deltaDays = parseInt(number / 24);\n\t    PrimeDate.plusDays(date, deltaDays);\n\n\t    const deltaHours = number % 24;\n\t    const newHour = date.getHours() + deltaHours;\n\t    if (newHour > 23) {\n\t      PrimeDate.plusDays(date, 1);\n\t      date.setHours(newHour - 24);\n\t    } else if (newHour < 0) {\n\t      PrimeDate.plusDays(date, -1);\n\t      date.setHours(24 + newHour);\n\t    } else {\n\t      date.setHours(newHour);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of minutes to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of minutes to add.\n\t   */\n\t  plusMinutes: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    const deltaHours = parseInt(number / 60);\n\t    PrimeDate.plusHours(date, deltaHours);\n\n\t    const deltaMinutes = number % 60;\n\t    const newMinute = date.getMinutes() + deltaMinutes;\n\t    if (newMinute > 60) {\n\t      PrimeDate.plusHours(date, 1);\n\t      date.setMinutes(newMinute - 60);\n\t    } else if (newMinute < 0) {\n\t      PrimeDate.plusHours(date, -1);\n\t      date.setMinutes(60 + newMinute);\n\t    } else {\n\t      date.setMinutes(newMinute);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of months to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of months to add.\n\t   */\n\t  plusMonths: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    let deltaYears = parseInt(number / 12);\n\t    let deltaMonths = number % 12;\n\t    let currentMonth = date.getMonth();\n\t    const newMonth = currentMonth + deltaMonths;\n\t    if (newMonth < 0) {\n\t      deltaYears--;\n\t      deltaMonths = newMonth;\n\t      currentMonth = 12;\n\t    } else if (newMonth >= 12) {\n\t      deltaYears++;\n\t      deltaMonths = newMonth - 12;\n\t      currentMonth = 0;\n\t    }\n\n\t    date.setYear(date.getFullYear() + deltaYears);\n\t    // If the day is 31 and you set month to 1 (February) it will adjust to March 3 (Feb 28 + 3)\n\t    const adjustedMonth = currentMonth + deltaMonths;\n\t    if (date.getDate() > this.DAYS_IN_MONTH[adjustedMonth]) {\n\t      date.setDate(this.DAYS_IN_MONTH[adjustedMonth]);\n\t    }\n\t    date.setMonth(adjustedMonth);\n\t  },\n\n\t  /**\n\t   * Adds the given number of seconds to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of seconds to add.\n\t   */\n\t  plusSeconds: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    const deltaMinutes = parseInt(number / 60);\n\t    PrimeDate.plusMinutes(date, deltaMinutes);\n\n\t    const deltaSeconds = number % 60;\n\t    const newSecond = date.getSeconds() + deltaSeconds;\n\t    if (newSecond > 60) {\n\t      PrimeDate.plusMinutes(date, 1);\n\t      date.setSeconds(newSecond - 60);\n\t    } else if (newSecond < 0) {\n\t      PrimeDate.plusMinutes(date, -1);\n\t      date.setSeconds(60 + newSecond);\n\t    } else {\n\t      date.setSeconds(newSecond);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of years to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of years to add.\n\t   */\n\t  plusYears: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    date.setFullYear(date.getFullYear() + number);\n\t  },\n\n\t  /**\n\t   * Return a string in simplified extended ISO format (ISO 8601) truncated to only return YYYY-MM-DD.\n\t   *\n\t   * For example: new Date(2015, 6, 4) --> 2015-07-04\n\t   *\n\t   * @param date {Date} The date.\n\t   * @returns {String} A date string in the format YYYY-MM-DD.\n\t   */\n\t  toDateOnlyISOString: function(date) {\n\t    if (date instanceof Date) {\n\t      return date.getFullYear()\n\t          + '-' + Utils.leftPadNumber(date.getMonth() + 1, 2)\n\t          + '-' + Utils.leftPadNumber(date.getDate(), 2);\n\t    }\n\t    throw TypeError('date parameter must be a Date object.');\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tconst SHORT_DAY_NAMES = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\tconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\tconst DATE_SEPARATOR = '/';\n\tconst TIME_SEPARATOR = ':';\n\tconst AM_PM = ['AM', 'PM'];\n\n\tclass DateTimePicker {\n\t  /**\n\t   * Constructs a new DateTimePicker object for the given input element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the DateTimePicker widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    if (!this.element.is('input')) {\n\t      throw new TypeError('You can only use DateTimePicker with an input element');\n\t    }\n\n\t    this.callback = null;\n\t    this.customFormatHandler = null;\n\t    this._setInitialOptions();\n\t  };\n\n\t  static get SHORT_DAY_NAMES() {\n\t    return SHORT_DAY_NAMES;\n\t  }\n\n\t  static get MONTHS() {\n\t    return MONTHS;\n\t  }\n\n\t  static get DATE_SEPARATOR() {\n\t    return DATE_SEPARATOR;\n\t  }\n\n\t  static get TIME_SEPARATOR() {\n\t    return TIME_SEPARATOR;\n\t  }\n\n\t  static get AM_PM() {\n\t    return AM_PM;\n\t  }\n\n\t  /**\n\t   * Closes the Date Picker widget.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  close() {\n\t    this.datepicker.removeClass('open');\n\n\t    // Pause a bit to cancel focus event and allow transition to play\n\t    setTimeout(function() {\n\t      this.datepicker.hide();\n\t    }.bind(this), this.options.closeTimeout);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Closes the months select box.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  closeMonthsSelect() {\n\t    this.months.removeClass('open');\n\t    setTimeout(function() {\n\t      this.months.hide();\n\t    }.bind(this), this.options.closeTimeout);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Closes the years select box.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  closeYearsSelect() {\n\t    this.years.removeClass('open');\n\t    setTimeout(function() {\n\t      this.years.hide();\n\t    }.bind(this), this.options.closeTimeout);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the DateTimePicker Widget\n\t   */\n\t  destroy() {\n\t    this.datepicker.removeFromDOM();\n\t    this.element.removeEventListener('click', this._handleInputClick)\n\t        .removeEventListener('focus', this._handleInputClick)\n\t        .removeEventListener('keydown', this._handleInputKey);\n\t    PrimeDocument.removeEventListener('click', this._handleGlobalClick);\n\t    PrimeDocument.removeEventListener('keydown', this._handleGlobalKey);\n\t  }\n\n\t  /**\n\t   * Draws the calendar using the month and year from the given Date object.\n\t   *\n\t   * @param date {Date} The date to draw the calendar for.\n\t   * @return {DateTimePicker} This DateTimePicker.\n\t   */\n\t  drawCalendar(date) {\n\t    const month = date.getMonth();\n\t    const year = date.getFullYear();\n\t    const firstDay = new Date(year, month, 1);\n\t    const firstDayOfMonth = firstDay.getDay();\n\t    const daysInMonth = PrimeDate.numberOfDaysInMonth(year, month);\n\t    const used = firstDayOfMonth + daysInMonth;\n\t    const weeksInMonth = Math.ceil(used / 7);\n\n\t    let rows = '';\n\t    let startDay = 1;\n\t    for (let i = 0; i < weeksInMonth; i++) {\n\t      const startDayOfWeek = i === 0 ? firstDayOfMonth : 0;\n\t      rows += this._buildCalendarWeek(date, startDayOfWeek, startDay, daysInMonth);\n\t      startDay += 7 - startDayOfWeek; // increment by 7 adjusted by a week day of week offset\n\t    }\n\n\t    this.calendarBody.setHTML(rows);\n\n\t    // update data- attributes\n\t    this.monthDisplay.setDataAttribute('month', month);\n\t    this.yearDisplay.setDataAttribute('year', year);\n\n\t    // update text\n\t    this.monthDisplay.setTextContent(DateTimePicker.MONTHS[month]);\n\t    this.yearDisplay.setTextContent(year);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Rebuilds the entire widget using the date value. Even if the user has moved to a different month display, this will\n\t   * rebuild the table completely.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  initialize() {\n\t    const value = this.element.getValue();\n\t    if (value === '' || value === null) {\n\t      this.date = new Date();\n\t    } else {\n\t      this.date = new Date(value);\n\t    }\n\n\t    const year = this.date.getUTCFullYear();\n\t    const timeSeparator = `<span>${DateTimePicker.TIME_SEPARATOR}</span>`;\n\t    const dateSeparator = `<span>${DateTimePicker.DATE_SEPARATOR}</span>`;\n\t    let html =\n\t        `<div class=\"${this.options.className }\">\n  <header>\n    <span class=\"prev\">&#9664;</span>\n    <span class=\"month\"></span>\n    <span class=\"year\"></span>\n    <span class=\"next\">&#9654;</span>\n  </header>\n  <table>\n    <thead>\n      <tr>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[0]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[1]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[2]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[3]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[4]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[5]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[6]}</th>\n      </tr>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n  <div class=\"inputs\">\n    <div class=\"date\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"month\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"day\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"4\" maxlength=\"4\" type=\"text\" name=\"year\" autocomplete=\"off\"/>\n    </div>\n    <div class=\"time\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"hour\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"minute\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"second\" autocomplete=\"off\"/>\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"am_pm\" autocomplete=\"off\"/>\n    </div>\n  </div>\n</div>`;\n\t    PrimeDocument.appendHTML(html);\n\t    this.datepicker = PrimeDocument.queryLast('.' + this.options.className).hide();\n\t    this.element.addEventListener('click', this._handleInputClick);\n\t    this.element.addEventListener('focus', this._handleInputClick);\n\t    this.element.addEventListener('keydown', this._handleInputKey);\n\n\t    this.calendarBody = this.datepicker.queryFirst('table tbody').addEventListener('click', this._handleDayClick);\n\t    this.monthDisplay = this.datepicker.queryFirst('header .month').addEventListener('click', this._handleMonthExpand);\n\t    this.yearDisplay = this.datepicker.queryFirst('header .year').addEventListener('click', this._handleYearExpand);\n\n\t    this.time = this.datepicker.queryFirst('.time');\n\t    this.inputs = this.datepicker.queryFirst('div.inputs');\n\t    this.hourInput = this.inputs.queryFirst('input[name=hour]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleHourKey);\n\t    this.minuteInput = this.inputs.queryFirst('input[name=minute]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMinuteKey);\n\t    this.secondInput = this.inputs.queryFirst('input[name=second]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleSecondKey);\n\t    this.ampmInput = this.inputs.queryFirst('input[name=am_pm]').addEventListener('keydown', this._handleAmPmKey);\n\t    this.monthInput = this.inputs.queryFirst('input[name=month]').setValue(this.date.getMonth() + 1).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMonthKey);\n\t    this.dayInput = this.inputs.queryFirst('input[name=day]').setValue(this.date.getDate()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleDayKey);\n\t    this.yearInput = this.inputs.queryFirst('input[name=year]').setValue(this.date.getFullYear()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleYearKey);\n\n\t    this.datepicker.queryFirst('header .next').addEventListener('click', this._handleNextMonth);\n\t    this.datepicker.queryFirst('header .prev').addEventListener('click', this._handlePreviousMonth);\n\n\t    PrimeDocument.addEventListener('click', this._handleGlobalClick);\n\t    PrimeDocument.addEventListener('keydown', this._handleGlobalKey);\n\n\t    // Setup months dropdown\n\t    html = '<div class=\"months\">';\n\t    for (let i = 0; i < DateTimePicker.MONTHS.length; i++) {\n\t      html += `<div data-month=\"${i}\">${DateTimePicker.MONTHS[i]}</div>`;\n\t    }\n\t    html += '</div>';\n\t    this.datepicker.appendHTML(html);\n\t    this.months = this.datepicker.queryFirst('.months');\n\t    this.months.hide();\n\t    this.months.getChildren().each(function(month) {\n\t      month.addEventListener('click', function() {\n\t        this.setMonth(parseInt(month.getDataAttribute('month')));\n\t        this.closeMonthsSelect();\n\t      }.bind(this));\n\t    }.bind(this));\n\n\t    // Setup year dropdown\n\t    html = '<div class=\"years\">';\n\t    const startYear = this.date.getFullYear() - 10;\n\t    const endYear = this.date.getFullYear() + 10;\n\t    for (let i = startYear; i < endYear; i++) {\n\t      html += `<div data-year=\"${i}\">${i}</div>`;\n\t    }\n\t    html += '</div>';\n\t    this.datepicker.appendHTML(html);\n\t    this.years = this.datepicker.queryFirst('.years');\n\t    this.years.hide();\n\t    this.years.getChildren().each(function(year) {\n\t      year.addEventListener('click', function() {\n\t        this.setYear(parseInt(year.getDataAttribute('year')));\n\t        this.closeYearsSelect();\n\t      }.bind(this));\n\t    }.bind(this));\n\n\t    this._rebuild();\n\n\t    if (this.customFormatHandler !== null) {\n\t      this.element.setValue(this.customFormatHandler.call(null, this.date));\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {Date} Return the current value of the time picker.\n\t   */\n\t  getDate() {\n\t    return new Date(this.date.getTime());\n\t  }\n\n\t  /**\n\t   * Moves the DateTimePicker to the next month and redraws the calendar.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  nextMonth() {\n\t    const newDate = new Date(this.date);\n\t    newDate.setDate(1); // Set the day to 1 to keep us from wrapping months on the 30 and 31st.\n\t    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n\t    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n\t    PrimeDate.plusMonths(newDate, 1);\n\t    this.drawCalendar(newDate);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the Date Picker widget.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  open() {\n\t    this.datepicker.setLeft(this.element.getLeft());\n\t    this.datepicker.setTop(this.element.getAbsoluteTop() + this.element.getHeight() + 8);\n\t    this.datepicker.show();\n\t    this.datepicker.addClass('open');\n\n\t    const zIndex = this.element.getRelativeZIndex();\n\t    this.datepicker.setStyle('zIndex', zIndex + 10);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the month select box.\n\t   */\n\t  openMonthSelect() {\n\t    this.closeYearsSelect();\n\n\t    this.months.setLeft(this.monthDisplay.getOffsetLeft() - 5);\n\t    this.months.setTop(this.monthDisplay.getOffsetTop() - 5);\n\t    this.months.setStyle('zIndex', this.monthDisplay.getRelativeZIndex() + 10);\n\t    this.months.show();\n\t    this.months.addClass('open');\n\n\t    const currentMonth = this.months.queryFirst('[data-month=\"' + this.date.getMonth() + '\"]');\n\t    this.months.getChildren().each(function(month) {\n\t      month.removeClass('selected');\n\t    });\n\t    currentMonth.addClass('selected');\n\t  }\n\n\t  /**\n\t   * Opens the year select box.\n\t   */\n\t  openYearSelect() {\n\t    this.closeMonthsSelect();\n\n\t    this.years.setLeft(this.yearDisplay.getOffsetLeft() - 5);\n\t    this.years.setTop(this.yearDisplay.getOffsetTop() - 5);\n\t    this.years.setStyle('zIndex', this.yearDisplay.getRelativeZIndex() + 10);\n\t    this.years.show();\n\t    this.years.addClass('open');\n\n\t    const currentYear = this.years.queryFirst('[data-year=\"' + this.date.getFullYear() + '\"]');\n\t    this.years.getChildren().each(function(year) {\n\t      year.removeClass('selected');\n\t    });\n\t    currentYear.addClass('selected');\n\t  }\n\n\t  /**\n\t   * Moves the DateTimePicker to the previous month and redraws the calendar.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  previousMonth() {\n\t    const newDate = new Date(this.date);\n\t    newDate.setDate(1); // Set to 1 until month has been set\n\t    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n\t    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n\t    PrimeDate.plusMonths(newDate, -1);\n\t    this.drawCalendar(newDate);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the date of the DateTimePicker and redraws the calendar to the month for the date.\n\t   *\n\t   * @param {Date} newDate The new date.\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  setDate(newDate) {\n\t    this.date = newDate;\n\n\t    if (this.customFormatHandler !== null) {\n\t      this.element.setValue(this.customFormatHandler.call(null, this.date));\n\t    } else {\n\t      if (this.options.dateOnly) {\n\t        this.element.setValue(PrimeDate.toDateOnlyISOString(newDate));\n\t      } else {\n\t        this.element.setValue(newDate.toISOString());\n\t      }\n\t    }\n\n\t    this._rebuild();\n\n\t    if (this.callback !== null) {\n\t      this.callback(this);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @param {number} month The month. A 0 based number between 0 (January) and 11 (December).\n\t   * @returns {DateTimePicker}\n\t   */\n\t  setMonth(month) {\n\t    let currentYear = parseInt(this.yearDisplay.getDataAttribute('year'));\n\t    if (month < 0) {\n\t      month = 11;\n\t      currentYear--;\n\t    } else if (month > 11) {\n\t      currentYear++;\n\t      month = 0;\n\t    }\n\n\t    this.date.setMonth(month);\n\t    this.date.setYear(currentYear);\n\t    this.setDate(this.date);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   *\n\t   * @param {number} year The year.\n\t   * @returns {DateTimePicker}\n\t   */\n\t  setYear(year) {\n\t    this.yearDisplay.setDataAttribute('year', year);\n\t    this.yearDisplay.setTextContent(year);\n\t    this.date.setYear(year);\n\t    this.setDate(this.date);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the callback handler that is called with the DateTimePicker's value is changed.\n\t   *\n\t   * @param callback {Function} The callback function.\n\t   * @return {DateTimePicker} This.\n\t   */\n\t  withCallback(callback) {\n\t    this.callback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the main div of the date time picker.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {DateTimePicker} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {DateTimePicker}\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a custom format handler responsible for formatting the date string that will be set into the input field.\n\t   * When not defined the default behavior will be used.\n\t   *\n\t   * @param formatHandler {Function} The handler function.\n\t   * @return {DateTimePicker} This.\n\t   */\n\t  withCustomFormatHandler(formatHandler) {\n\t    this.customFormatHandler = formatHandler;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Render the DateTimePicker w/out the time picker. Only the calendar will be displayed and the input field will be updated with date only.\n\t   *\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  withDateOnly() {\n\t    this.options.dateOnly = true;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Build the HTML for a single calendar week.\n\t   *\n\t   * @param date {Date} The date to build the calendar week based on.\n\t   * @param startDayOfWeek {Number} The day of the week of this week begins. A 0 based number between 0 and 6.\n\t   * @param startDayOfMonth {Number} The day of the month this week begins. A number between 1 and 31.\n\t   * @param daysInMonth {Number} The number of days in this calendar month.\n\t   * @returns {string} The HTML for this week.\n\t   * @private\n\t   */\n\t  _buildCalendarWeek(date, startDayOfWeek, startDayOfMonth, daysInMonth) {\n\t    const daysInPreviousMonth = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n\t    let startDayOfPreviousMonth = daysInPreviousMonth - startDayOfWeek + 1;\n\t    let startDayOfNextMonth = 1;\n\n\t    let row = '<tr>';\n\t    let emptyColumns = 0;\n\t    const year = date.getFullYear();\n\t    const month = date.getMonth();\n\n\t    for (let i = 0; i < 7; i++) {\n\t      const dayOfWeek = startDayOfMonth + i;\n\t      // Days of the previous month\n\t      if (dayOfWeek <= startDayOfWeek) {\n\t        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + (month - 1) + '\" data-day=\"' + startDayOfPreviousMonth + '\">' + startDayOfPreviousMonth + '</a></td>';\n\t        startDayOfPreviousMonth++;\n\t        emptyColumns++;\n\t      } else if (dayOfWeek > daysInMonth) {\n\t        // Days of the next month\n\t        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + dayOfWeek + '\">' + startDayOfNextMonth + '</a></td>';\n\t        startDayOfNextMonth++;\n\t      } else {\n\t        // Days in the current month\n\t        const day = dayOfWeek - emptyColumns;\n\t        const selected = this.date.getDate() === day && this.date.getMonth() === month;\n\t        row += '<td><a ' + (selected ? 'class=\"selected\"' : '') + 'href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + day + '\">' + day + '</a></td>';\n\t      }\n\t    }\n\n\t    row += '</tr>';\n\t    return row;\n\t  }\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Clamp the value between the minimum and maximum values.\n\t   *\n\t   * @param {Number} min the minimum number value.\n\t   * @param {Number} max The maximum number value.\n\t   * @param {Number} value The value to clamp.\n\t   * @returns {Number} The resulting value, either the min, max or actual value if not out of bounds.\n\t   * @private\n\t   */\n\t  _clamp(min, max, value) {\n\t    return Math.max(min, Math.min(value, max));\n\t  }\n\n\t  /**\n\t   * Handles when the AM/PM element is selected and the user hits a key. If the user hits A, this changes to AM. If the\n\t   * user hits P, this changes to PM. If the use hits the up or down arrows, this toggles between AM and PM.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event.\n\t   * @private\n\t   */\n\t  _handleAmPmKey(event) {\n\t    if (event.keyCode === Events.Keys.TAB) {\n\t      Utils.stopEvent(event);\n\t      if (event.shiftKey) {\n\t        this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n\t        this.secondInput.focus();\n\t      } else {\n\t        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t        this.monthInput.focus();\n\t      }\n\t      return;\n\t    }\n\n\t    // Decode the key event\n\t    const current = this.ampmInput.getValue();\n\t    if (event.keyCode === 65) {\n\t      // User hit A\n\t      if (current === DateTimePicker.AM_PM[1]) {\n\t        PrimeDate.plusHours(this.date, -12);\n\t      }\n\t    } else if (event.keyCode === 80) {\n\t      // User hit P\n\t      if (current === DateTimePicker.AM_PM[0]) {\n\t        PrimeDate.plusHours(this.date, 12);\n\t      }\n\t    } else if (event.keyCode === Events.Keys.UP_ARROW || event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      // User hit up or down arrow\n\t      if (current === DateTimePicker.AM_PM[0]) {\n\t        PrimeDate.plusHours(this.date, 12);\n\t      } else if (current === DateTimePicker.AM_PM[1]) {\n\t        PrimeDate.plusHours(this.date, -12);\n\t      }\n\t    } else if (event.keyCode === Events.Keys.ENTER || event.keyCode === Events.Keys.ESCAPE) {\n\t      return;\n\t    }\n\n\t    this.setDate(this.date);\n\t    this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n\t    Utils.stopEvent(event);\n\t  }\n\n\t  /**\n\t   * Handle date/time change events. This pulls the values from the 3 date fields and makes a new Date. Then it calls\n\t   * {@link #setDate(Date)}.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event.\n\t   * @private\n\t   */\n\t  _handleDateTimeChange(event) {\n\t    Utils.stopEvent(event);\n\t    const newDate = new Date();\n\t    const hours = this._clamp(1, 12, parseInt(this.hourInput.getValue()));\n\t    if (this.ampmInput.getValue() === DateTimePicker.AM_PM[0]) {\n\t      if (hours === 12) {\n\t        newDate.setHours(0);\n\t      } else {\n\t        newDate.setHours(hours);\n\t      }\n\t    } else {\n\t      if (hours === 12) {\n\t        newDate.setHours(12);\n\t      } else {\n\t        newDate.setHours(hours + 12);\n\t      }\n\t    }\n\n\t    const seconds = this._clamp(0, 59, parseInt(this.secondInput.getValue()));\n\t    const minutes = this._clamp(0, 59, parseInt(this.minuteInput.getValue()));\n\n\t    newDate.setSeconds(seconds);\n\t    newDate.setMinutes(minutes);\n\t    newDate.setDate(1); // Set to 1 until month has been set\n\t    newDate.setMonth(parseInt(this.monthInput.getValue()) - 1);\n\t    newDate.setDate(parseInt(this.dayInput.getValue()));\n\t    newDate.setYear(parseInt(this.yearInput.getValue()));\n\n\t    this.setDate(newDate);\n\t  }\n\n\t  /**\n\t   * Handle the click on a day.\n\t   *\n\t   * @parameter {MouseEvent} event The click event.\n\t   * @private\n\t   */\n\t  _handleDayClick(event) {\n\t    Utils.stopEvent(event);\n\t    let dayElement = new PrimeElement(event.target);\n\t    if (!dayElement.is('a')) {\n\t      dayElement = dayElement.queryFirst('a');\n\t    }\n\n\t    const newDate = new Date(this.date);\n\t    newDate.setDate(1); // Set to 1 until month has been set\n\t    newDate.setFullYear(parseInt(dayElement.getDataAttribute('year')));\n\t    newDate.setMonth(parseInt(dayElement.getDataAttribute('month')));\n\t    newDate.setDate(parseInt(dayElement.getDataAttribute('day')));\n\t    this.setDate(newDate);\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the day input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the day.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleDayKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      PrimeDate.plusDays(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n\t      Utils.stopEvent(event);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusDays(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setDate(parseInt(this.dayInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles a global click event. This determines if the click was outside of the DateTimePicker and closes it.\n\t   *\n\t   * @param {MouseEvent} event The click event.\n\t   * @private\n\t   */\n\t  _handleGlobalClick(event) {\n\t    // Skip this function completely if they clicked the input field\n\t    if (event.target === this.element.domElement) {\n\t      return;\n\t    }\n\n\t    const top = this.datepicker.getTop();\n\t    const bottom = this.datepicker.getBottom();\n\t    const left = this.datepicker.getLeft();\n\t    const right = this.datepicker.getRight();\n\t    if (this.datepicker.isVisible() && (event.x < left || event.x > right || event.y < top || event.y > bottom)) {\n\t      this.close();\n\t      this.closeYearsSelect();\n\t      this.closeMonthsSelect();\n\t    } else {\n\t      if (this.years.isVisible()) {\n\t        this.closeYearsSelect();\n\t      }\n\t      if (this.months.isVisible()) {\n\t        this.closeMonthsSelect();\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles a global key event. This determines if the DateTimePicker is open and if enter or escape was hit.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleGlobalKey(event) {\n\t    // Skip this function completely if the DateTimePicker isn't open\n\t    if (!this.datepicker.isVisible()) {\n\t      return;\n\t    }\n\n\t    if (event.keyCode === Events.Keys.ENTER) {\n\t      Utils.stopEvent(event);\n\t      this.setDate(this.date);\n\t      this.close();\n\t      this.element.focus();\n\t    } else if (event.keyCode === Events.Keys.ESCAPE) {\n\t      this.close();\n\t      this.element.focus();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the hours input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the hour.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleHourKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusHours(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusHours(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setHours(parseInt(this.hourInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the click event for the input date field. If the DateTimePicker is hidden this will call the {@link #show()}\n\t   * function.\n\t   *\n\t   * @returns {boolean} Always true.\n\t   * @private\n\t   */\n\t  _handleInputClick() {\n\t    if (!this.datepicker.isVisible()) {\n\t      this.open();\n\t      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t      this.monthInput.focus();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the key event for the input date field. If the user hits tab or shift-tab, this moves the focus to the\n\t   * nested inputs.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event.\n\t   * @private\n\t   */\n\t  _handleInputKey(event) {\n\t    if (this.datepicker.isVisible() && event.keyCode === Events.Keys.TAB) {\n\t      Utils.stopEvent(event);\n\t      if (event.shiftKey) {\n\t        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n\t        this.ampmInput.focus();\n\t      } else {\n\t        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t        this.monthInput.focus();\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the key down event and capture the up and down arrow key to increment and decrement the minute.\n\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleMinuteKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMinutes(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMinutes(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setMinutes(parseInt(this.minuteInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the click on the month to open the month select.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMonthExpand(event) {\n\t    Utils.stopEvent(event);\n\t    this.openMonthSelect();\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the month input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the month.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleMonthKey(event) {\n\t    if (event.keyCode === Events.Keys.TAB && event.shiftKey) {\n\t      Utils.stopEvent(event);\n\t      if (this.options.dateOnly) {\n\t        this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n\t        this.yearInput.focus();\n\t      } else {\n\t        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n\t        this.ampmInput.focus();\n\t      }\n\t      return;\n\t    }\n\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMonths(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMonths(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setMonth(parseInt(this.monthInput.getValue()) - 1);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the next month button click.\n\t   *\n\t   * @param {MouseEvent} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleNextMonth(event) {\n\t    Utils.stopEvent(event);\n\t    this.nextMonth();\n\t  }\n\n\t  /**\n\t   * Handle the previous month button click.\n\t   *\n\t   * @param {MouseEvent} event The mouse event.\n\t   * @private\n\t   */\n\t  _handlePreviousMonth(event) {\n\t    Utils.stopEvent(event);\n\t    this.previousMonth();\n\t  }\n\n\t  /**\n\t   * Handle the key down event and capture the up and down arrow key to increment and decrement the second.\n\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleSecondKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusSeconds(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusSeconds(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setSeconds(parseInt(this.secondInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the click on the year to open the year select.\n\t   *\n\t   * @private\n\t   */\n\t  _handleYearExpand(event) {\n\t    Utils.stopEvent(event);\n\t    this.openYearSelect();\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the year input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the year.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleYearKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusYears(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusYears(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.TAB && this.options.dateOnly) {\n\t      Utils.stopEvent(event);\n\t      if (event.shiftKey) {\n\t        this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n\t        this.dayInput.focus();\n\t      } else {\n\t        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t        this.monthInput.focus();\n\t      }\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setFullYear(parseInt(this.yearInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Rebuilds the HTML of the DateTimePicker.\n\t   * @private\n\t   */\n\t  _rebuild() {\n\t    this.drawCalendar(this.date);\n\t    this._refreshInputs();\n\n\t    if (this.options.dateOnly) {\n\t      this.time.hide();\n\t    }\n\t  }\n\n\t  /**\n\t   * Refresh the time inputs.\n\t   *\n\t   * @private\n\t   */\n\t  _refreshInputs() {\n\t    // Set Time -- assuming 12-hour time for the input fields and ISO 24-hour time for the field\n\t    const hours = PrimeDate.getHourOfDay(this.date);\n\t    this.hourInput.setValue(hours);\n\n\t    const minutes = this.date.getMinutes();\n\t    this.minuteInput.setValue((\"00\" + minutes).slice(-2));\n\n\t    const seconds = this.date.getSeconds();\n\t    this.secondInput.setValue((\"00\" + seconds).slice(-2));\n\n\t    if (this.date.getHours() >= 12) {\n\t      this.ampmInput.setValue(DateTimePicker.AM_PM[1]);\n\t    } else {\n\t      this.ampmInput.setValue(DateTimePicker.AM_PM[0]);\n\t    }\n\n\t    this.monthInput.setValue(this.date.getMonth() + 1);\n\t    this.dayInput.setValue(this.date.getDate());\n\t    this.yearInput.setValue(this.date.getFullYear());\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      className: 'prime-date-picker',\n\t      closeTimeout: 200,\n\t      dateOnly: false\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Dismissable {\n\t  /**\n\t   * Constructs a new Dismissable object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Element for the Dismissable widget.\n\t   * @param {PrimeElement|Element|EventTarget} dismissButton The Element for the Dismissable button.\n\t   * @constructor\n\t   */\n\t  constructor(element, dismissButton) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.dismissButton = dismissButton;\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Closes the Dismissable by removing the open class from the element and setting a timer to remove the element from\n\t   * the DOM.\n\t   */\n\t  close() {\n\t    this.element.addClass('closed');\n\t    setTimeout(function() {\n\t      this.element.removeFromDOM();\n\t    }.bind(this), this.options.closeTimeout);\n\t  }\n\n\t  /**\n\t   * Destroys the widget.\n\t   */\n\t  destroy() {\n\t    this.dismissButton.removeEventListener('click', this._handleClick);\n\t  }\n\n\t  /**\n\t   * Initializes the Dismissable by binding the events to the dismiss button.\n\t   *\n\t   * @returns {Dismissable} This.\n\t   */\n\t  initialize() {\n\t    this.dismissButton.addEventListener('click', this._handleClick);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {Dismissable} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Dismissable} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the click event.\n\t   * @private\n\t   */\n\t  _handleClick(event) {\n\t    Utils.stopEvent(event);\n\t    this.close();\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      closeTimeout: 400\n\t    };\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass HTMLDialog {\n\t  /**\n\t   * Constructs a new dialog box from an element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the HTMLDialog widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t    this.draggable = null;\n\t  }\n\n\t  /**\n\t   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  close() {\n\t    this.element.removeClass('open');\n\t    if (this.draggable !== null) {\n\t      this.draggable.destroy();\n\t      this.draggable = null;\n\t    }\n\n\t    setTimeout(function() {\n\t      this.element.hide();\n\n\t      const highestZIndex = this._determineZIndex();\n\t      if (highestZIndex !== 0) {\n\t        Overlay.instance.setZIndex(highestZIndex);\n\t      } else {\n\t        Overlay.instance.close();\n\t      }\n\t    }.bind(this), this.options.closeTimeout);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the dialog by calling the close function.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  destroy() {\n\t    this.close();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the dialog.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  initialize() {\n\t    this.element.hide();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the dialog.\n\t   *\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  open() {\n\t    const highestZIndex = this._determineZIndex();\n\t    Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n\t    this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n\t    this.element.show();\n\t    this.element.addClass('open');\n\n\t    // Call the callback before positioning to ensure all changes to the dialog have been made\n\t    if (this.options.callback !== null) {\n\t      this.options.callback(this);\n\t    }\n\n\t    // Position the fixed dialog in the center of the screen\n\t    const windowHeight = PrimeWindow.getInnerHeight();\n\t    const dialogHeight = this.element.getHeight();\n\t    this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n\n\t    this._setupButtons();\n\n\t    if (this.draggable === null) {\n\t      if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n\t        this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Updates the HTML contents of the dialog.\n\t   *\n\t   * @param html {String} The HTML.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  setHTML(html) {\n\t    this.element.setHTML(html);\n\t    this._setupButtons();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the callback that is called after the dialog has been fetched and rendered.\n\t   *\n\t   * @param callback {function} The callback function.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withCallback(callback) {\n\t    this.options.callback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the dialog element.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n\t   * the server.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withCloseButtonElementSelector(selector) {\n\t    this.options.closeButtonElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the draggable element selector that is used for the Draggable.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withDraggableButtonElementSelector(selector) {\n\t    this.options.draggableElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  _determineZIndex() {\n\t    let highestZIndex = 0;\n\t    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n\t      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n\t      if (dialog.isVisible() && zIndex > highestZIndex) {\n\t        highestZIndex = zIndex;\n\t      }\n\t    });\n\t    return highestZIndex;\n\t  }\n\n\t  _handleCloseClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    this.close();\n\t  }\n\n\t  _setupButtons() {\n\t    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n\t      e.addEventListener('click', this._handleCloseClickEvent);\n\t    }.bind(this));\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      callback: null,\n\t      className: 'prime-dialog',\n\t      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n\t      closeTimeout: 200,\n\t      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n\t      zIndexOffset: 1000\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass InProgress {\n\t  /**\n\t   * Constructs a In Progress widget that opens an overlay over an element while something is running and closes it when\n\t   * it finishes.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to overlay.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t    this.draggable = null;\n\t  }\n\n\t  /**\n\t   * Closes the InProgress process.\n\t   *\n\t   * @param {Function} callback (Optional) A callback function to invoke after the InProgress has been completely closed.\n\t   */\n\t  close(callback) {\n\t    try {\n\t      this.options.endFunction(this);\n\t    } finally {\n\t      const now = new Date().getTime();\n\t      const duration = now - this.startInstant;\n\t      if (duration < this.options.minimumTime) {\n\t        setTimeout(function() {\n\t          this.overlay.removeFromDOM();\n\n\t          if (callback) {\n\t            callback();\n\t          }\n\t        }.bind(this), this.options.minimumTime - duration);\n\t      } else {\n\t        this.overlay.removeFromDOM();\n\n\t        if (callback) {\n\t          callback();\n\t        }\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the InProgress process.\n\t   */\n\t  open() {\n\t    this.startInstant = new Date().getTime();\n\t    this.overlay = PrimeDocument.newElement('<div/>').setId('prime-in-progress-overlay').appendTo(document.body);\n\t    PrimeDocument.newElement('<i/>', {class: 'fa fa-spin fa-' + this.options.iconName}).appendTo(this.overlay);\n\n\t    const coords = this.element.getCoordinates();\n\t    const bodyCoords = PrimeDocument.bodyElement.getCoordinates();\n\t    this.overlay.setTop(coords.top - bodyCoords.top);\n\t    this.overlay.setLeft(coords.left - bodyCoords.left);\n\t    this.overlay.setWidth(this.element.getBorderedWidth());\n\t    this.overlay.setHeight(this.element.getBorderedHeight());\n\t    this.overlay.setStyle('zIndex', (this.element.getRelativeZIndex() + 1000).toString());\n\n\t    this.options.startFunction(this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the end function that is called when the InProgress process is finished.\n\t   *\n\t   * @param f {function} The function.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withEndFunction(f) {\n\t    this.options.endFunction = f;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the FontAwesome icon name to use for the overlay.\n\t   *\n\t   * @param iconName {string} The icon name.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withIconName(iconName) {\n\t    this.options.iconName = iconName;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the minimum time that the InProgress process must run.\n\t   *\n\t   * @param time {number} The time in milliseconds.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withMinimumTime(time) {\n\t    this.options.minimumTime = time;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the start function that is called when the InProgress process is started.\n\t   *\n\t   * @param f {function} The function.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withStartFunction(f) {\n\t    this.options.startFunction = f;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      endFunction: function() {\n\t      },\n\t      iconName: 'refresh',\n\t      minimumTime: 1000,\n\t      startFunction: function() {\n\t      }\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2014-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass Searcher {\n\t  /**\n\t   * Constructs a Searcher object for the given text input.\n\t   *\n\t   * The Searcher object can be attached and used in conjunction with any other widgets in a generic manner. It\n\t   * provides search capabilities and manages the search results. This is useful for MultipleSelects, IntelliSense and\n\t   * other widgets. Here's the HTML for the search results.\n\t   *\n\t   * <pre>\n\t   *   &lt;input type=\"text\" class=\"prime-search-result-input\" value=\"F\"/>\n\t   *   &lt;ul>\n\t   *     &lt;li>Four&lt;/li>\n\t   *     &lt;li>Five&lt;/li>\n\t   *     &lt;li>Fifteen&lt;/li>\n\t   *     &lt;li>Add Custom Entry: F/li>\n\t   *   &lt;/ul>\n\t   * &lt;/div>\n\t   * </pre>\n\t   *\n\t   * The with* methods can be used to setup the configuration for this SearchResults, but here are some defaults:\n\t   *\n\t   * <ul>\n\t   *   <li>closeTimeout = 200</li>\n\t   *   <li>customAddEnabled = true</li>\n\t   *   <li>customAddCallback = function(customValue){return true;}</li>\n\t   *   <li>customAddLabel = \"Add Custom:\"</li>\n\t   *   <li>tooManySearchResultsLabel = \"Too Many Matches For:\"</li>\n\t   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n\t   * </ul>\n\t   *\n\t   * The callback object must conform to this interface:\n\t   *\n\t   * <pre>\n\t   *   CallbackObject {\n\t *     void deletedBeyondSearchInput()\n\t *     void doesNotContainValue()\n\t *     object{results:Array, tooManyResults:boolean} search(_searchString:string),\n\t *     void selectSearchResult(selectedSearchResult:string),\n\t *   }\n\t   * </pre>\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} inputElement The input element that is used to execute the search.\n\t   * @param {PrimeElement|Element|EventTarget} searchResultsContainer The element that is used to store the search results.\n\t   * @param {*} callbackObject The object that is used to callback for searching and numerous other functions to help\n\t   *            communicate state and determine how to draw the input and search results.\n\t   */\n\t  constructor(inputElement, searchResultsContainer, callbackObject) {\n\t    Utils.bindAll(this);\n\n\t    this.searchResults = PrimeElement.wrap(searchResultsContainer);\n\t    this.inputElement = PrimeElement.wrap(inputElement);\n\t    if (this.inputElement.domElement.tagName !== 'INPUT') {\n\t      throw new TypeError('You can only use Prime.Widgets.SearchResults with INPUT elements');\n\t    }\n\n\t    this._setInitialOptions(callbackObject);\n\t  }\n\n\t  /**\n\t   * A search function that works on a select box.\n\t   *\n\t   * @param searchText {String} The search String.\n\t   * @param select {HTMLSelectElement|PrimeElement} The select box.\n\t   * @returns {{results: Array, tooManyResults: boolean}}\n\t   */\n\t  static selectSearchFunction(searchText, select) {\n\t    const options = PrimeElement.unwrap(select).options;\n\t    const selectableOptions = [];\n\t    for (let i = 0; i < options.length; i++) {\n\t      const option = new PrimeElement(options[i]);\n\t      if (option.isSelected()) {\n\t        continue;\n\t      }\n\n\t      const html = option.getHTML();\n\t      if (searchText === null || searchText === undefined || searchText === '' || html.toLowerCase().indexOf(searchText.toLowerCase()) === 0) {\n\t        selectableOptions.push(html);\n\t      }\n\t    }\n\n\t    // Alphabetize the options\n\t    if (selectableOptions.length > 0) {\n\t      selectableOptions.sort();\n\t    }\n\n\t    return {results: selectableOptions, tooManyResults: false};\n\t  }\n\n\t  /**\n\t   * Closes the search results display, unhighlights any options that are highlighted and resets the input's value to\n\t   * empty string.\n\t   */\n\t  closeSearchResults() {\n\t    this._removeAllSearchResults();\n\t    this.inputElement.setValue('');\n\t    this.searchResults.removeClass('open');\n\t    setTimeout(function() {\n\t      this.searchResults.hide();\n\t      this.resizeInput();\n\t    }.bind(this), this.options.closeTimeout);\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners from the input element.\n\t   */\n\t  destroy() {\n\t    this.inputElement\n\t        .removeEventListener('blur', this._handleBlurEvent)\n\t        .removeEventListener('click', this._handleClickEvent)\n\t        .removeEventListener('keyup', this._handleKeyUpEvent)\n\t        .removeEventListener('keydown', this._handleKeyDownEvent)\n\t        .removeEventListener('focus', this._handleFocusEvent);\n\t  }\n\n\t  focus() {\n\t    this.inputElement.focus();\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElement} The highlighted search result or null.\n\t   */\n\t  getHighlightedSearchResult() {\n\t    return this.searchResults.queryFirst('.selected');\n\t  }\n\n\t  /**\n\t   * Highlights the next search result if one is highlighted. If there isn't a highlighted search result, this\n\t   * highlights the first one. This method handles wrapping.\n\t   *\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  highlightNextSearchResult() {\n\t    let searchResult = this.getHighlightedSearchResult();\n\t    if (searchResult !== null) {\n\t      searchResult = searchResult.getNextSibling();\n\t    }\n\n\t    // Grab the first search result in the list if there isn't a next sibling\n\t    if (searchResult === null) {\n\t      searchResult = this.searchResults.queryFirst('.search-result');\n\t    }\n\n\t    if (searchResult !== null) {\n\t      this.highlightSearchResult(searchResult);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Highlights the previous search result if one is highlighted. If there isn't a highlighted search result, this\n\t   * selects the last one. This method handles wrapping.\n\t   *\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  highlightPreviousSearchResult() {\n\t    let searchResult = this.getHighlightedSearchResult();\n\t    if (searchResult !== null) {\n\t      searchResult = searchResult.getPreviousSibling();\n\t    }\n\n\t    if (searchResult === null) {\n\t      searchResult = this.searchResults.queryFirst('.search-result');\n\t    }\n\n\t    if (searchResult !== null) {\n\t      this.highlightSearchResult(searchResult);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Highlights the given search result.\n\t   *\n\t   * @param {PrimeElement} searchResult The search result to highlight.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  highlightSearchResult(searchResult) {\n\t    this.searchResults.getChildren().removeClass('selected');\n\n\t    searchResult.addClass('selected');\n\t    const scrollTop = this.searchResults.getScrollTop();\n\t    const height = this.searchResults.getHeight();\n\t    const searchResultOffset = searchResult.getOffsetTop();\n\t    if (searchResultOffset + 1 >= scrollTop + height) {\n\t      this.searchResults.scrollTo(searchResult.getOffsetTop() - this.searchResults.getHeight() + searchResult.getOuterHeight());\n\t    } else if (searchResultOffset < scrollTop) {\n\t      this.searchResults.scrollTo(searchResultOffset);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the Searcher by setting up the event listeners and closing the search result element.\n\t   *\n\t   * @returns {Searcher} This.\n\t   */\n\t  initialize() {\n\t    this.inputElement\n\t        .addEventListener('blur', this._handleBlurEvent)\n\t        .addEventListener('click', this._handleClickEvent)\n\t        .addEventListener('keyup', this._handleKeyUpEvent)\n\t        .addEventListener('keydown', this._handleKeyDownEvent)\n\t        .addEventListener('focus', this._handleFocusEvent);\n\n\t    this.closeSearchResults();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if the search results add custom option is being displayed currently.\n\t   */\n\t  isCustomAddVisible() {\n\t    return this.searchResults.queryFirst('.custom-add') !== null;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if any search results are being displayed currently.\n\t   */\n\t  isSearchResultsVisible() {\n\t    return this.searchResults.hasClass('open');\n\t  }\n\n\t  /**\n\t   * Poor mans resizing of the input field as the user types into it.\n\t   */\n\t  resizeInput() {\n\t    const text = this.inputElement.getValue() === '' ? this.inputElement.getAttribute('placeholder') : this.inputElement.getValue();\n\t    const newLength = Utils.calculateTextLength(this.inputElement, text) + 35;\n\t    this.inputElement.setWidth(newLength);\n\t  }\n\n\t  /**\n\t   * Executes a search by optionally updating the input to the given value (if specified) and then rebuilding the search\n\t   * results using the input's value. This method also puts focus on the input and shows the search results (in case\n\t   * they are hidden for any reason).\n\t   *\n\t   * @param {string} [searchText] The text to search for (this value is also set into the input box). If this is not\n\t   * specified then the search is run using the input's value.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  search(searchText) {\n\t    // Set the search text into the input box if it is different and then lowercase it\n\t    if (Utils.isDefined(searchText) && this.inputElement.getValue() !== searchText) {\n\t      this.inputElement.setValue(searchText);\n\t    }\n\n\t    searchText = Utils.isDefined(searchText) ? searchText.toLowerCase() : this.inputElement.getValue();\n\t    this.resizeInput();\n\n\t    // Clear the search results (if there are any)\n\t    this._removeAllSearchResults();\n\n\t    // Call the callback\n\t    const searchResults = this.options.callbackObject.search(searchText);\n\t    if (!searchResults.hasOwnProperty('results') || !searchResults.hasOwnProperty('tooManyResults')) {\n\t      throw new TypeError('The callback must return an Object that contains the properties results[Array] and tooManyResults[boolean]');\n\t    }\n\n\t    let count = 0;\n\t    let matchingSearchResultElement = null;\n\t    for (let i = 0; i < searchResults.results.length; i++) {\n\t      const searchResult = searchResults.results[i];\n\t      const element = PrimeDocument.newElement('<li/>')\n\t          .addClass('search-result')\n\t          .setAttribute('value', searchResult)\n\t          .setHTML(searchResult)\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('mouseover', this._handleMouseOverEvent)\n\t          .appendTo(this.searchResults);\n\t      if (searchResult.toLowerCase().trim() === searchText.toLowerCase().trim()) {\n\t        matchingSearchResultElement = element;\n\t      }\n\n\t      count++;\n\t    }\n\n\t    // Show the custom add option if necessary\n\t    const trimmedLength = searchText.trim().length;\n\t    if (this.options.customAddEnabled && trimmedLength !== 0 && matchingSearchResultElement === null\n\t        && (!('doesNotContainValue' in this.options.callbackObject) || this.options.callbackObject.doesNotContainValue(searchText))) {\n\t      matchingSearchResultElement = PrimeDocument.newElement('<li/>')\n\t          .addClass('custom-add')\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('mouseover', this._handleMouseOverEvent)\n\t          .setHTML(this.options.customAddLabel + Utils.escapeHTML(searchText))\n\t          .appendTo(this.searchResults);\n\t      count++;\n\t    }\n\n\t    if (count === 0 && trimmedLength !== 0) {\n\t      PrimeDocument.newElement('<li/>')\n\t          .addClass('no-search-results')\n\t          .setHTML(this.options.noSearchResultsLabel + Utils.escapeHTML(searchText))\n\t          .appendTo(this.searchResults);\n\t      count++;\n\t    }\n\n\t    // Handle too many results\n\t    if (searchResults.tooManyResults) {\n\t      PrimeDocument.newElement('<li/>')\n\t          .addClass('too-many-search-results')\n\t          .setHTML(this.options.tooManySearchResultsLabel + Utils.escapeHTML(searchText))\n\t          .appendTo(this.searchResults);\n\t      count++;\n\t    }\n\n\t    if (count !== 0) {\n\t      this.searchResults.show();\n\t      this.searchResults.addClass('open');\n\n\t      if (count >= 10) {\n\t        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * 10 + 1);\n\t      } else {\n\t        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * count + 1);\n\t      }\n\t    } else {\n\t      this.closeSearchResults();\n\t    }\n\n\t    if (matchingSearchResultElement !== null) {\n\t      this.highlightSearchResult(matchingSearchResultElement);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Selects the highlighted search result unless there isn't one highlighted, in which case, this does nothing.\n\t   *\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  selectHighlightedSearchResult() {\n\t    const searchResult = this.getHighlightedSearchResult();\n\t    if (searchResult === null) {\n\t      return this;\n\t    }\n\n\t    const custom = searchResult.hasClass('custom-add');\n\t    const value = (custom) ? this.inputElement.getValue().trim() : searchResult.getHTML();\n\t    if (custom) {\n\t      // The client of this searcher needs to warn the user.\n\t      if (!this.options.customAddCallback(value)) {\n\t        return this;\n\t      }\n\t    }\n\n\t    this.options.callbackObject.selectSearchResult(value);\n\t    this.closeSearchResults();\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {Searcher} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not this Searcher allows custom options to be added.\n\t   *\n\t   * @param {boolean} enabled The flag.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withCustomAddEnabled(enabled) {\n\t    this.options.customAddEnabled = enabled;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not this Searcher allows custom options to be added.\n\t   *\n\t   * @param {Function} callback The function to call that will return true if the custom option can be added.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withCustomAddCallback(callback) {\n\t    this.options.customAddCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label used when custom options are added.\n\t   *\n\t   * @param {string} customAddLabel The label.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withCustomAddLabel(customAddLabel) {\n\t    this.options.customAddLabel = customAddLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Searcher} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label that is printed when there are no search results.\n\t   *\n\t   * @param {string} noSearchResultsLabel The label text.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withNoSearchResultsLabel(noSearchResultsLabel) {\n\t    this.options.noSearchResultsLabel = noSearchResultsLabel;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Sets the label that is printed when there are too many search results.\n\t   *\n\t   * @param {string} tooManySearchResultsLabel The label text.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withTooManySearchResultsLabel(tooManySearchResultsLabel) {\n\t    this.options.tooManySearchResultsLabel = tooManySearchResultsLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Handles the blur event when the input goes out of focus.\n\t   *\n\t   * @private\n\t   */\n\t  _handleBlurEvent() {\n\t    window.setTimeout((function() {\n\t      if (document.activeElement !== this.inputElement.domElement) {\n\t        this.closeSearchResults();\n\t      }\n\t    }).bind(this), 300);\n\t  }\n\n\t  /**\n\t   * Handles all click events sent to the Searcher.\n\t   *\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleClickEvent(event) {\n\t    const target = new PrimeElement(event.currentTarget);\n\t    if (target.hasClass('custom-add') || target.hasClass('search-result')) {\n\t      this.selectHighlightedSearchResult();\n\t    } else if (target.domElement === this.inputElement.domElement) {\n\t      this.search();\n\t    } else {\n\t      console.log('Clicked something else target=[' + event.target + '] currentTarget=[' + event.currentTarget + ']');\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles when the input field is focused by opening the search results.\n\t   *\n\t   * @private\n\t   */\n\t  _handleFocusEvent() {\n\t    this.search();\n\t  }\n\n\t  /**\n\t   * Handles the key down events that should not be propagated.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event object.\n\t   * @private\n\t   */\n\t  _handleKeyDownEvent(event) {\n\t    const key = event.keyCode;\n\t    if (key === Events.Keys.BACKSPACE) {\n\t      this.previousSearchString = this.inputElement.getValue();\n\t    } else if (key === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      this.highlightPreviousSearchResult();\n\t    } else if (key === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      if (this.isSearchResultsVisible()) {\n\t        this.highlightNextSearchResult();\n\t      } else {\n\t        this.search();\n\t      }\n\t    } else if (key === Events.Keys.ENTER) {\n\t      Utils.stopEvent(event); // Don't bubble enter otherwise the form submits\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles all key up events sent to the search results container.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event object.\n\t   *  @private\n\t   */\n\t  _handleKeyUpEvent(event) {\n\t    const key = event.keyCode;\n\t    const value = this.inputElement.getValue();\n\n\t    if (key === Events.Keys.BACKSPACE) {\n\t      if (value === '' && this.previousSearchString === '') {\n\t        this.options.callbackObject.deletedBeyondSearchInput();\n\t      } else {\n\t        this.search();\n\t      }\n\t    } else if (key === Events.Keys.ENTER) {\n\t      Utils.stopEvent(event);\n\t      // If a search result is highlighted, add it\n\t      if (this.getHighlightedSearchResult() !== null) {\n\t        this.selectHighlightedSearchResult();\n\t      }\n\t    } else if (key === Events.Keys.ESCAPE) {\n\t      this.closeSearchResults();\n\t    } else if (key === Events.Keys.SPACE || key === Events.Keys.DELETE ||\n\t        (key >= 48 && key <= 90) || (key >= 96 && key <= 111) || (key >= 186 && key <= 192) || (key >= 219 && key <= 222)) {\n\t      this.search();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles mouseover events for the search results (only) by highlighting the event target.\n\t   *\n\t   * @param {Event} event The mouseover event.\n\t   * @private\n\t   */\n\t  _handleMouseOverEvent(event) {\n\t    const target = new PrimeElement(event.currentTarget);\n\t    this.highlightSearchResult(target);\n\t  }\n\n\t  /**\n\t   * Removes all of the search results.\n\t   *\n\t   * @private\n\t   */\n\t  _removeAllSearchResults() {\n\t    this.searchResults.query('li').removeAllFromDOM();\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Search function implementations.\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions(callbackObject) {\n\t    // Defaults\n\t    this.options = {\n\t      callbackObject: callbackObject,\n\t      closeTimeout: 200,\n\t      customAddEnabled: true,\n\t      'customAddCallback'() {\n\t        return true;\n\t      },\n\t      customAddLabel: 'Add Custom: ',\n\t      noSearchResultsLabel: 'No Matches For: ',\n\t      tooManySearchResultsLabel: 'Too Many Matches For: ',\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.inputElement);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tlet count = 1;\n\tlet AddOptionEvent = 'MultipleSelect:addOption';\n\tlet DeselectOptionEvent = 'MultipleSelect:deselectOption';\n\tlet SelectOptionEvent = 'MultipleSelect:selectOption';\n\n\tclass MultipleSelect {\n\t  /**\n\t   * Constructs a MultipleSelect object for the given element.\n\t   *\n\t   * The MultipleSelect generates a number of different HTML elements directly after the SELECT element you pass to the\n\t   * constructor. A fully rendered MultipleSelect might look something like this:\n\t   *\n\t   * <pre>\n\t   * &lt;select id=\"foo\">\n\t   *   &lt;option value=\"one\">One&lt;/option>\n\t   *   &lt;option value=\"two\">Two&lt;/option>\n\t   *   &lt;option value=\"three\">Three&lt;/option>\n\t   * &lt;/select>\n\t   * &lt;div id=\"foo-display\" class=\"prime-multiple-select\">\n\t   *   &lt;ul id=\"foo-option-list\" class=\"option-list\">\n\t   *     &lt;li id=\"foo-option-one\">&lt;span>One&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n\t   *     &lt;li id=\"foo-option-two\">&lt;span>Two&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n\t   *     &lt;li id=\"foo-option-three\">&lt;span>Three&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n\t   *     &lt;li>&lt;input type=\"text\" value=\"aaa\"/>&lt;/li>\n\t   *   &lt;/ul>\n\t   *   &lt;ul class=\"search-results\">\n\t   *     &lt;li>One&lt;/li>\n\t   *     &lt;li>Two&lt;/li>\n\t   *     &lt;li>Three&lt;/li>\n\t   *     &lt;li>Add Custom Entry: aaa/li>\n\t   *   &lt;/ul>\n\t   * &lt;/div>\n\t   * </pore>\n\t   *\n\t   * The with* methods can be used to setup the configuration for this MultipleSelect, but here are some defaults:\n\t   *\n\t   * <ul>\n\t   *   <li>placeholder = \"Choose\"</li>\n\t   *   <li>customAddEnabled = true</li>\n\t   *   <li>customAddLabel = \"Add Custom Value:\"</li>\n\t   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n\t   * </ul>\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the MultipleSelect.\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    if (this.element.domElement.tagName !== 'SELECT') {\n\t      throw new TypeError('You can only use MultipleSelect with select elements');\n\t    }\n\n\t    if (this.element.getAttribute('multiple') !== 'multiple') {\n\t      throw new TypeError('The select box you are attempting to convert to a MultipleSelect must have the multiple=\"multiple\" attribute set');\n\t    }\n\n\t    this._setInitialOptions();\n\t  }\n\n\t  /*\n\t   * Statics\n\t   */\n\t  /**\n\t   * @returns {number}\n\t   */\n\t  static get count() {\n\t    return count;\n\t  }\n\n\t  /**\n\t   * @param {number} value\n\t   */\n\t  static set count(value) {\n\t    count = value;\n\t  }\n\n\t  /**\n\t   * @returns {string}\n\t   */\n\t  static get AddOptionEvent() {\n\t    return AddOptionEvent;\n\t  }\n\n\t  /**\n\t   * @param {string} value\n\t   */\n\t  static set AddOptionEvent(value) {\n\t    AddOptionEvent = value;\n\t  }\n\n\t  /**\n\t   * @returns {string}\n\t   */\n\t  static get DeselectOptionEvent() {\n\t    return DeselectOptionEvent;\n\t  }\n\n\t  /**\n\t   * @param {string} value\n\t   */\n\t  static set DeselectOptionEvent(value) {\n\t    DeselectOptionEvent = value;\n\t  }\n\n\t  /**\n\t   * @returns {string}\n\t   */\n\t  static get SelectOptionEvent() {\n\t    return SelectOptionEvent;\n\t  }\n\n\t  /**\n\t   * @param {string} value\n\t   */\n\t  static set SelectOptionEvent(value) {\n\t    SelectOptionEvent = value;\n\t  }\n\n\t  /**\n\t   * Finds the HTMLSelectOption with the given id and returns it wrapped in a PrimeElement.\n\t   *\n\t   * @param {String} id\n\t   * @returns {PrimeElement}\n\t   */\n\t  static findOptionWithId(id) {\n\t    return PrimeDocument.queryFirst('[data-option-id=\"' + id + '\"]');\n\t  }\n\n\t  /**\n\t   * Pass through to add event listeners to This. The custom events that this MultipleSelect fires are:\n\t   *\n\t   *  'MultipleSelect:deselectOption'\n\t   *  'MultipleSelect:selectOption'\n\t   *  'MultipleSelect:addOption'\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The listener function.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  addEventListener(event, listener) {\n\t    this.element.addEventListener(event, listener);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Determines if this MultipleSelect contains an option with the given value.\n\t   *\n\t   * @param {String} value The value to look for.\n\t   */\n\t  containsOptionWithValue(value) {\n\t    return this.findOptionWithValue(value) !== null;\n\t  }\n\n\t  /**\n\t   * Adds the given option to this select. The option will not be selected.\n\t   *\n\t   * @param {String} value The value for the option.\n\t   * @param {String} display The display text for the option.\n\t   * @param {?String} [id] The id of the element. (Defaults to null)\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  addOption(value, display, id) {\n\t    if ((id === null || id === undefined) && this.containsOptionWithValue(value)) {\n\t      return this;\n\t    }\n\n\t    let element = PrimeDocument.newElement('<option/>')\n\t        .setValue(value)\n\t        .setHTML(display)\n\t        .appendTo(this.element);\n\n\t    if (id) {\n\t      element.setDataAttribute(\"optionId\", id);\n\t    }\n\n\t    // Fire the custom event\n\t    this.element.fireEvent(MultipleSelect.AddOptionEvent, value, this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n\t   * removing the option from the display container. If the MultipleSelect doesn't contain an option for the given value,\n\t   * this method throws an exception.\n\t   *\n\t   * @param {String} value The value to look for.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  deselectOptionWithValue(value) {\n\t    const option = this.findOptionWithValue(value);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n\t    }\n\n\t    this.deselectOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n\t   * removing the option from the display container.\n\t   *\n\t   * @param {PrimeElement} option The option to deselect.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  deselectOption(option) {\n\t    option.setSelected(false);\n\n\t    const id = option.getDataAttribute('optionId') || this._makeOptionID(option);\n\t    const displayOption = PrimeDocument.queryById(id);\n\t    if (displayOption !== null) {\n\t      displayOption.removeFromDOM();\n\t    }\n\n\t    // If there are no selected options left, add back the placeholder attribute to the input and resize it\n\t    if (this.optionList.query('li').length === 1) {\n\t      this.input.setAttribute('placeholder', this.options.placeholder);\n\t      this.searcher.resizeInput();\n\t    }\n\n\t    // Fire the custom event\n\t    this.element.fireEvent(MultipleSelect.DeselectOptionEvent, option.getValue(), this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the widget completely.\n\t   */\n\t  destroy() {\n\t    this.element.show();\n\t    this.displayContainer.removeFromDOM();\n\t  }\n\n\t  /**\n\t   * Finds the HTMLSelectOption with the given text and returns it wrapped in a PrimeElement.\n\t   *\n\t   * @param {String} text The text to look for.\n\t   * @returns {PrimeElement} The option element or null.\n\t   */\n\t  findOptionWithText(text) {\n\t    const options = this.element.getOptions();\n\t    for (let i = 0; i < options.length; i++) {\n\t      if (options[i].getTextContent() === text) {\n\t        return options[i];\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  deselectOptionWithId(id) {\n\t    const option = MultipleSelect.findOptionWithId(id);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the id [' + id + ']');\n\t    }\n\n\t    this.deselectOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Finds the HTMLSelectOption with the given value and returns it wrapped in a PrimeElement.\n\t   *\n\t   * @param {String} value The value to look for.\n\t   * @returns {PrimeElement} The option element or null.\n\t   */\n\t  findOptionWithValue(value) {\n\t    for (let i = 0; i < this.element.domElement.length; i++) {\n\t      const cur = this.element.domElement.options[i];\n\t      if (cur.value === value) {\n\t        return new PrimeElement(cur);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * @returns {string[]} The currently selected options values.\n\t   */\n\t  getSelectedValues() {\n\t    return this.element.getSelectedValues();\n\t  }\n\n\t  /**\n\t   * Determines if the MultipleSelect contains an option with the given value.\n\t   *\n\t   * @param {string} value The value.\n\t   * @returns {boolean} True if the MultipleSelect contains an option with the given value, false otherwise.\n\t   */\n\t  hasOptionWithValue(value) {\n\t    return this.findOptionWithValue(value) !== null;\n\t  }\n\n\t  /**\n\t   * Highlights the final selected option (if there is one) to indicate that it will be unselected if the user clicks\n\t   * the delete key again.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  highlightOptionForUnselect() {\n\t    const options = this.optionList.getChildren();\n\t    if (options.length > 1) {\n\t      options[options.length - 2].addClass('selected');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the display from the underlying select element. All of the current display options (li elements) are\n\t   * removed. New display options are added for each selected option in the select box.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  initialize() {\n\t    this.element.hide();\n\n\t    let id = this.element.getId();\n\t    if (id === null || id === '') {\n\t      id = 'prime-multiple-select' + MultipleSelect.count++;\n\t      this.element.setId(id);\n\t    }\n\n\t    this.displayContainer = PrimeDocument.queryById(id + '-display');\n\t    this.input = null;\n\t    if (this.displayContainer === null) {\n\t      this.displayContainer = PrimeDocument.newElement('<div/>')\n\t          .setId(id + '-display')\n\t          .addClass(this.options.className)\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('keyup', this._handleKeyUpEvent)\n\t          .insertAfter(this.element);\n\n\t      this.optionList = PrimeDocument.newElement('<ul/>')\n\t          .addClass('option-list')\n\t          .appendTo(this.displayContainer);\n\n\t      this.searchResults = PrimeDocument.newElement('<ul/>')\n\t          .addClass('search-results')\n\t          .hide()\n\t          .appendTo(this.displayContainer);\n\t    } else {\n\t      this.displayContainer\n\t          .removeAllEventListeners()\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('keyup', this._handleKeyUpEvent);\n\t      this.optionList = this.displayContainer.queryFirst('.option-list');\n\t      this.searchResults = this.displayContainer.queryFirst('.search-results');\n\t    }\n\n\t    PrimeDocument.queryFirst('html').addEventListener('click', this._handleGlobalClickEvent);\n\n\t    // Close the search\n\t    this.searchResults.hide();\n\n\t    this._redraw();\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if the last option is highlighted for unselect.\n\t   */\n\t  isLastOptionHighlightedForUnselect() {\n\t    const options = this.optionList.getChildren();\n\t    return options.length > 1 && options[options.length - 2].hasClass('selected');\n\t  }\n\n\t  /**\n\t   * Removes all of the options from the MultipleSelect.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  removeAllOptions() {\n\t    // Remove in reverse order because the options array is dynamically updated when elements are deleted from the DOM\n\t    const options = this.element.domElement.options;\n\t    for (let i = options.length - 1; i >= 0; i--) {\n\t      this.removeOption(new PrimeElement(options[i]));\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes the highlighted option.\n\t   */\n\t  removeHighlightedOption() {\n\t    const options = this.optionList.getChildren();\n\t    if (this.options.allowDuplicates) {\n\t      this.deselectOptionWithId(options[options.length - 2].getId());\n\t    } else {\n\t      this.deselectOptionWithValue(options[options.length - 2].getAttribute('value'));\n\t    }\n\t    this.search();\n\t  }\n\n\t  /**\n\t   * Removes the given option from the MultipleSelect by removing the option in the select box and the option in the\n\t   * display container.\n\t   *\n\t   * @param {PrimeElement} option The option to remove.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  removeOption(option) {\n\t    if (!(option instanceof PrimeElement)) {\n\t      throw new TypeError('MultipleSelect#removeOption only takes PrimeElement instances');\n\t    }\n\n\t    option.removeFromDOM();\n\n\t    let id, displayOption;\n\t    if (this.options.allowDuplicates) {\n\t      // The ids are random so we need to get the data attribute.\n\t      id = option.getDataAttribute('optionId');\n\t      displayOption = PrimeDocument.queryById(id);\n\t    } else {\n\t      // The ids aren't random and can be reproducably created.\n\t      id = this._makeOptionID(option);\n\t      displayOption = PrimeDocument.queryById(id);\n\t    }\n\n\t    // Check if the option has already been selected\n\t    if (displayOption !== null) {\n\t      displayOption.removeFromDOM();\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes the option with the given value from the MultipleSelect by removing the option in the select box and the\n\t   * option in the display container. If the MultipleSelect doesn't contain an option with the given value, this throws\n\t   * an exception.\n\t   *\n\t   * @param {string} value The value of the option to remove.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  removeOptionWithValue(value) {\n\t    const option = this.findOptionWithValue(value);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n\t    }\n\n\t    this.removeOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Selects the given option by setting the selected attribute on the option in the select box (the object passed in is\n\t   * the option from the select box wrapped in a PrimeElement) and adding it to the display container. If the\n\t   * option is already in the display container, that step is skipped.\n\t   *\n\t   * @param {PrimeElement} option The option object from the select box wrapped in a PrimeElement instance.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  selectOption(option) {\n\t    if (!(option instanceof PrimeElement)) {\n\t      throw new TypeError('MultipleSelect#selectOption only takes PrimeElement instances');\n\t    }\n\n\t    const id = this._makeOptionID(option);\n\n\t    // Check if the option has already been selected\n\t    if (PrimeDocument.queryById(id) === null) {\n\t      /*\n\t      If we allow dupes, always duplicate the option and append it to the end or the order will be a problem. The default multiselect doesn't support order)\n\t       */\n\t      if (this.options.allowDuplicates) {\n\t        this.addOption(option.getTextContent(), option.getTextContent(), id);\n\t        option = MultipleSelect.findOptionWithId(id);\n\t      }\n\t      option.setSelected(true);\n\n\t      const li = PrimeDocument.newElement('<li/>')\n\t          .setAttribute('value', option.getValue())\n\t          .setId(id)\n\t          .insertBefore(this.inputOption);\n\t      PrimeDocument.newElement('<span/>')\n\t          .setHTML(option.getHTML())\n\t          .setAttribute('value', option.getValue())\n\t          .appendTo(li);\n\t      PrimeDocument.newElement('<a/>')\n\t          .setAttribute('href', '#')\n\t          .setAttribute('value', option.getValue())\n\t          .setHTML(this.options.removeIcon)\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .appendTo(li);\n\t    }\n\n\t    // Remove the placeholder attribute on the input and resize it\n\t    this.input.removeAttribute('placeholder');\n\n\t    // Close the search results and resize the input\n\t    this.searcher.closeSearchResults();\n\n\t    // Scroll the display to the bottom\n\t    this.optionList.scrollToBottom();\n\n\t    // Fire the custom event\n\t    this.element.fireEvent(MultipleSelect.SelectOptionEvent, option.getValue(), this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Selects the option with the given value by setting the selected attribute on the option in the select box (the\n\t   * object passed in is the option from the select box wrapped in a PrimeElement) and adding it to the display\n\t   * container. If the option is already in the display container, that step is skipped.\n\t   * <p/>\n\t   * If there isn't an option with the given value, this throws an exception.\n\t   *\n\t   * @param {String} value The value of the option to select.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  selectOptionWithValue(value) {\n\t    const option = this.findOptionWithValue(value);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n\t    }\n\n\t    this.selectOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the selected options. This mimics the function on Element to provide consistency.\n\t   *\n\t   * @param {string[]} [arguments] The list of options to select based on their values.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  setSelectedValues() {\n\t    this.element.setSelectedValues.apply(this.element, arguments);\n\t    this._redraw();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Unhighlights the last option if it is highlighted.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  unhighlightOptionForUnselect() {\n\t    this.optionList.getChildren().each(function(element) {\n\t      element.removeClass('selected');\n\t    });\n\t    return this;\n\t  }\n\n\t  withAllowDuplicates(value) {\n\t    this.options.allowDuplicates = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the MultipleSelect element.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not this MultipleSelect allows custom options to be added.\n\t   *\n\t   * @param {boolean} enabled The flag.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withCustomAddEnabled(enabled) {\n\t    this.options.customAddEnabled = enabled;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label used when custom options are added.\n\t   *\n\t   * @param {string} customAddLabel The label.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withCustomAddLabel(customAddLabel) {\n\t    this.options.customAddLabel = customAddLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enable error class handling. When this option is used, if the specified error class is found on any element\n\t   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withErrorClassHandling(errorClass) {\n\t    this.options.errorClass = errorClass;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label that is printed when there are no search results. This must be called before render is called.\n\t   *\n\t   * @param {string} noSearchResultsLabel The label text.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withNoSearchResultsLabel(noSearchResultsLabel) {\n\t    this.options.noSearchResultsLabel = noSearchResultsLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the placeholder text for This. This must be called before render is called.\n\t   *\n\t   * @param {string} placeholder The placeholder text.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withPlaceholder(placeholder) {\n\t    this.options.placeholder = placeholder;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the remove icon value. This overrides the default value.\n\t   *\n\t   * @param {string} removeIcon The remove icon text.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withRemoveIcon(removeIcon) {\n\t    this.options.removeIcon = removeIcon;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the search function that can be used to search other sources besides the select box that backs this widget.\n\t   *\n\t   * @param searchFunction {Function} The search function.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withSearchFunction(searchFunction) {\n\t    this.options.searchFunction = searchFunction;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Searcher's callback interface methods.\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Called when the Searcher gets a keyboard event that deletes beyond the search input. This highlights the last word\n\t   * in the phrase for removal.\n\t   */\n\t  deletedBeyondSearchInput() {\n\t    if (this.isLastOptionHighlightedForUnselect()) {\n\t      this.removeHighlightedOption();\n\t    }\n\n\t    this.highlightOptionForUnselect();\n\t  }\n\n\t  /**\n\t   * Called when the search needs to determine if the custom add option should be displayed. As long as this\n\t   * MultipleSelect does not contain the given value, the custom add option should be displayed.\n\t   *\n\t   * @param {string} value The value.\n\t   * @returns {boolean} True if this MultipleSelect does not contain the value, false otherwise.\n\t   */\n\t  doesNotContainValue(value) {\n\t    return !this.containsOptionWithValue(value);\n\t  }\n\n\t  /**\n\t   * Called when the Searcher is executing a search. This executes a search via the callback and returns the results.\n\t   *\n\t   * @param {string} [searchText] The text to search for.\n\t   * @returns {Object} The SearchResults.\n\t   */\n\t  search(searchText) {\n\t    this.unhighlightOptionForUnselect();\n\t    return this.options.searchFunction.call(null, searchText, this.element);\n\t  }\n\n\t  /**\n\t   * Called when the Searcher gets an event that causes a search result to be selected. This adds the word.\n\t   */\n\t  selectSearchResult(value) {\n\t    // Add the custom option if there is one\n\t    let option = this.findOptionWithText(value);\n\t    if (option === null) {\n\t      this.addOption(value, value);\n\t      option = this.findOptionWithText(value);\n\t    }\n\n\t    this.selectOption(option);\n\t  }\n\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the blur event when the input goes out of focus.\n\t   *\n\t   * @private\n\t   */\n\t  _handleBlurEvent() {\n\t    window.setTimeout((function() {\n\t      if (document.activeElement !== this.input.domElement) {\n\t        this.searcher.closeSearchResults();\n\t      }\n\t    }).bind(this), 300);\n\t    this.displayContainer.removeClass('focus');\n\t  }\n\n\t  /**\n\t   * Handles all click events sent to the MultipleSelect.\n\t   *\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    const target = new PrimeElement(event.target);\n\t    if (target.is('a')) {\n\t      if (this.options.allowDuplicates) {\n\t        const id = target.getParent().getId();\n\t        this.removeOption(MultipleSelect.findOptionWithId(id));\n\t      } else {\n\t        this.removeOptionWithValue(target.getAttribute('value'));\n\t      }\n\t    } else if (target.is('span')) {\n\t      target.selectElementContents();\n\t    } else {\n\t      this.input.focus();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the blur event when the input goes out of focus.\n\t   *\n\t   * @private\n\t   */\n\t  _handleFocusEvent() {\n\t    this.displayContainer.addClass('focus');\n\t  }\n\n\t  /**\n\t   * Handles mouse clicks outside of This. If they clicked anything that is not within this MultipleSelect,\n\t   * it closes the search results.\n\t   *\n\t   * @param {Event} event The event.\n\t   * @returns {boolean} Always true so the event is bubbled.\n\t   * @private\n\t   */\n\t  _handleGlobalClickEvent(event) {\n\t    const target = new PrimeElement(event.target);\n\t    if (this.displayContainer.domElement !== target.domElement && !target.isChildOf(this.displayContainer)) {\n\t      this.searcher.closeSearchResults();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles all key up events sent to the display container.\n\t   *\n\t   * @param {Event} event The browser event object.\n\t   * @returns {boolean} True if the search display is not open, false otherwise. This will prevent the event from continuing.\n\t   * @private\n\t   */\n\t  _handleKeyUpEvent(event) {\n\t    const key = event.keyCode;\n\t    if (key === Events.Keys.ESCAPE) {\n\t      this.unhighlightOptionForUnselect();\n\t    }\n\t  }\n\n\t  /**\n\t   * Makes an ID for the option.\n\t   *\n\t   * @param {PrimeElement} option The option to make the ID for.\n\t   * @private\n\t   */\n\t  _makeOptionID(option) {\n\t    if (this.options.allowDuplicates === true) {\n\t      let d = new Date().getTime();\n\t      // UUID ish\n\t      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t        let r = (d + Math.random() * 16) % 16 | 0;\n\t        d = Math.floor(d / 16);\n\t        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n\t      });\n\t    }\n\t    return this.element.getId() + '-option-' + option.getValue().replace(' ', '-');\n\t  }\n\n\t  /**\n\t   * Redraws the widget.\n\t   * @private\n\t   */\n\t  _redraw() {\n\t    // Remove the currently displayed options\n\t    this.optionList.getChildren().each(function(option) {\n\t      option.removeFromDOM();\n\t    });\n\n\t    // Add the input option since the select options are inserted before it\n\t    this.inputOption = PrimeDocument.newElement('<li/>')\n\t        .appendTo(this.optionList);\n\t    this.input = PrimeDocument.newElement('<input/>')\n\t        .addEventListener('click', this._handleClickEvent)\n\t        .addEventListener('blur', this._handleBlurEvent)\n\t        .addEventListener('focus', this._handleFocusEvent)\n\t        .setAttribute('type', 'text')\n\t        .appendTo(this.inputOption);\n\t    this.searcher = new Searcher(this.input, this.searchResults, this)\n\t        .withOptions(this.options)\n\t        .initialize();\n\n\t    // Add the selected options\n\t    let hasSelectedOptions = false;\n\t    const options = this.element.getOptions();\n\t    for (let i = 0; i < options.length; i++) {\n\t      const option = options[i];\n\t      if (option.isSelected()) {\n\t        this.selectOption(option);\n\t        hasSelectedOptions = true;\n\t      }\n\t    }\n\n\t    // Put the placeholder attribute in if the MultipleSelect has no selected options\n\t    if (!hasSelectedOptions) {\n\t      this.input.setAttribute('placeholder', this.options.placeholder);\n\t    }\n\n\t    this.searcher.resizeInput();\n\n\t    // If error class handling was enabled and the select box has the error class, add it to the display\n\t    if (this.options.errorClass && this.element.hasClass(this.options.errorClass)) {\n\t      this.displayContainer.addClass(this.options.errorClass);\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      allowDuplicates: false,\n\t      className: 'prime-multiple-select',\n\t      closeTimeout: 200,\n\t      customAddEnabled: true,\n\t      customAddLabel: 'Add Custom Value: ',\n\t      errorClass: null,\n\t      noSearchResultsLabel: 'No Matches For: ',\n\t      placeholder: 'Choose',\n\t      removeIcon: 'X',\n\t      searchFunction: Searcher.selectSearchFunction\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\t//Some externs to make intellij linter shutup. :p\n\t/**\n\t * @external TouchEvent\n\t */\n\n\t/**\n\t * @property {Array} changedTouches\n\t * @name TouchEvent#changedTouches\n\t */\n\n\t/**\n\t * @class Touchable\n\t */\n\tclass Touchable {\n\t  /**\n\t   * Constructs a new Touchable object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Touchable widget.\n\t   * @param {Function} [eventPropagationHandler] A Function that handles how the event is handled for the touchstart,\n\t   * touchend, touchmove, and touchcancel events. This Function takes the event object as its only parameter.\n\t   * @constructor\n\t   */\n\t  constructor(element, eventPropagationHandler) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.eventPropagationHandler = eventPropagationHandler;\n\t  }\n\n\t  /**\n\t   * Destroys the Touchable Widget\n\t   */\n\t  destroy() {\n\t    this.element\n\t        .removeEventListener('touchstart', this._handleTouchStart)\n\t        .removeEventListener('touchmove', this._handleTouchMove)\n\t        .removeEventListener('touchcancel', this._handleTouchCancel)\n\t        .removeEventListener('touchend', this._handleTouchEnd)\n\t        .removeEventListenersByPattern(/Prime\\.Widgets\\.Touchable:.+/);\n\t  }\n\n\t  /**\n\t   * Initializes the widget by attaching all of the event listeners to the element.\n\t   *\n\t   * @returns {Touchable} This.\n\t   */\n\t  initialize() {\n\t    this.element\n\t        .addEventListener('touchstart', this._handleTouchStart)\n\t        .addEventListener('touchmove', this._handleTouchMove)\n\t        .addEventListener('touchcancel', this._handleTouchCancel)\n\t        .addEventListener('touchend', this._handleTouchEnd);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a long press is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withLongPressHandler(handler) {\n\t    this.element.addEventListener('Touchable:longPress', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a move event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withMoveHandler(handler) {\n\t    this.element.addEventListener('Touchable:move', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a long press is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeDownHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeDown', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a swipe left event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeLeftHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeLeft', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a swipe right event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeRightHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeRight', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a swipe up event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeUpHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeUp', handler);\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Collects all of the touch data at the end of the touch and calculates the distances and times.\n\t   *\n\t   * @param {TouchEvent} event The TouchEvent.\n\t   * @private\n\t   */\n\t  _collectTouchData(event) {\n\t    const touchPoints = event.changedTouches.length;\n\t    if (touchPoints > 1) {\n\t      return;\n\t    }\n\n\t    const touch = event.changedTouches[0];\n\t    this.elapsedTime = new Date().getTime() - this.touchStarted;\n\t    this.touchEndX = touch.pageX;\n\t    this.touchEndY = touch.pageY;\n\t    this.touchX = this.touchStartX - this.touchEndX;\n\t    this.touchY = this.touchStartY - this.touchEndY;\n\t  }\n\n\t  /**\n\t   * Called when all processing is finished and the handlers are called based on direction and time of the touches.\n\t   *\n\t   * @private\n\t   */\n\t  _finished() {\n\t    // Make sure this was a swipe\n\t    const event = {\n\t      elapsedTime: this.elapsedTime,\n\t      touchStartX: this.touchStartX,\n\t      touchStartY: this.touchStartY,\n\t      touchEndX: this.touchEndX,\n\t      touchEndY: this.touchEndY,\n\t      touchX: this.touchX,\n\t      touchY: this.touchY,\n\t      element: this.element,\n\t      target: this.element.domElement\n\t    };\n\t    event.swipe = Math.abs(event.touchX) > 50 || Math.abs(event.touchY) > 50;\n\t    event.swipeX = event.swipe && Math.abs(event.touchX) > Math.abs(event.touchY);\n\t    event.swipeY = event.swipe && !event.swipeX;\n\t    event.longPress = !event.swipe && event.elapsedTime > 500;\n\n\t    if (event.longPress) {\n\t      this.element.fireCustomEvent('Touchable:longPress', event);\n\t    } else if (event.swipeX && event.touchX > 0) {\n\t      this.element.fireCustomEvent('Touchable:swipeLeft', event);\n\t    } else if (event.swipeX) {\n\t      this.element.fireCustomEvent('Touchable:swipeRight', event);\n\t    } else if (event.swipeY && event.touchY > 0) {\n\t      this.element.fireCustomEvent('Touchable:swipeUp', event);\n\t    } else if (event.swipeY) {\n\t      this.element.fireCustomEvent('Touchable:swipeDown', event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch cancel event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchCancel(event) {\n\t    this._collectTouchData(event);\n\t    this._finished();\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch end event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchEnd(event) {\n\t    this._collectTouchData(event);\n\t    this._finished();\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch move event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchMove(event) {\n\t    this.element.fireEvent('Touchable:move', event);\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch start event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchStart(event) {\n\t    const touchPoints = event.changedTouches.length;\n\t    if (touchPoints > 1) {\n\t      if (Utils.isDefined(this.eventPropagationHandler)) {\n\t        this.eventPropagationHandler(event);\n\t      }\n\n\t      return;\n\t    }\n\n\t    const touch = event.changedTouches[0];\n\t    this.touchStarted = new Date().getTime();\n\t    this.touchStartX = touch.pageX;\n\t    this.touchStartY = touch.pageY;\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass SideMenu {\n\t  /**\n\t   * Constructs the side menu.\n\t   *\n\t   * @param {PrimeElement|Element} button The button element that is used to open the side menu.\n\t   * @param {PrimeElement|Element} sideMenuElement The side menu element that will be \"hidden\" and \"show\".\n\t   * @constructor\n\t   */\n\t  constructor(button, sideMenuElement) {\n\t    Utils.bindAll(this);\n\t    this.sideMenu = PrimeElement.wrap(sideMenuElement);\n\t    this.button = PrimeElement.wrap(button);\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Closes the side menu.\n\t   *\n\t   * @returns {SideMenu} This.\n\t   */\n\t  close() {\n\t    if (!PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n\t      PrimeDocument.bodyElement.addClass(this.options.closedClass);\n\t    }\n\n\t    if (PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n\t      PrimeDocument.bodyElement.removeClass(this.options.openClass);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the widget by attaching the event listener to the menu button.\n\t   *\n\t   * @returns {SideMenu}\n\t   */\n\t  initialize() {\n\t    this.button.addEventListener('click', this._handleClickEvent);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if the side menu is currently open.\n\t   */\n\t  isOpen() {\n\t    return this.sideMenu.getLeft() >= 0;\n\t    // return PrimeDocument.bodyElement.hasClass('prime-side-menu-open') || !PrimeDocument.bodyElement.hasClass('prime-side-menu-closed');\n\t  }\n\n\t  /**\n\t   * Opens the mobile nav.\n\t   * @returns {SideMenu} This.\n\t   */\n\t  open() {\n\t    if (PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n\t      PrimeDocument.bodyElement.removeClass(this.options.closedClass);\n\t    }\n\n\t    if (!PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n\t      PrimeDocument.bodyElement.addClass(this.options.openClass);\n\t    }\n\n\t    this.touchable = new Touchable(PrimeDocument.bodyElement).withSwipeLeftHandler(this._handleSwipeLeft);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {SideMenu} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the click event on the side menu button and calls either the open or close function.\n\t   *\n\t   * @private\n\t   */\n\t  _handleClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    if (this.isOpen()) {\n\t      this.close();\n\t    } else {\n\t      this.open();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the synthetic swipe left event that Prime.js provides.\n\t   *\n\t   * @private\n\t   */\n\t  _handleSwipeLeft() {\n\t    if (this.isOpen()) {\n\t      this.close();\n\t    }\n\n\t    if (Utils.isDefined(this.touchable)) {\n\t      this.touchable.destroy();\n\t      this.touchable = null;\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      closedClass: 'prime-side-menu-closed',\n\t      openClass: 'prime-side-menu-open'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.sideMenu);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2014-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass SplitButton {\n\t  /**\n\t   * Constructs a new SplitButton object for the given ul element.\n\t   *\n\t   * The markup must be a ul element with one or more items containing an a tag with an href.\n\t   * You may optionally add a 'default' class on one of the items to indicate this is the default action.\n\t   * If this is not provided the first item will be considered the default action.\n\t   *\n\t   * Example 1, two actions the second action is set as default and shows on top w/out expansion.\n\t   * <pre>\n\t   *   &lt;ul&gt;\n\t   *     &lt;li&gt;&lt;a href=\"/admin/foo/delete/\"&gt;Delete&lt;/a&gt;&lt;/li&gt;\n\t   *     &lt;li class=\"default\"&gt;&lt;a href=\"/admin/foo/edit/\"&gt;Edit&lt;/a&gt;&lt;/li&gt;\n\t   *   &lt;/ul&gt;\n\t   * </pre>\n\t   *\n\t   * Example 2, two actions w/out a default. The top level action causes the button to expand.\n\t   * <pre>\n\t   *   &lt;ul&gt;\n\t   *     &lt;li&gt;&lt;a href=\"#\"&gt;Select&hellip;&lt;/a&gt;&lt;/li&gt;\n\t   *     &lt;li&gt;&lt;a href=\"/admin/foo/delete/\"&gt;Delete&lt;/a&gt;&lt;/li&gt;\n\t   *     &lt;li&gt;&lt;a href=\"/admin/foo/edit/\"&gt;Edit&lt;/a&gt;&lt;/li&gt;\n\t   *   &lt;/ul&gt;\n\t   * </pre>\n\t   *\n\t   * @param element {PrimeElement|Element|EventTarget} The ul element to transform into a split button.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    this.element = PrimeElement.wrap(element);\n\t    const nodeName = this.element.domElement.nodeName.toLowerCase();\n\t    if (nodeName !== 'ul') {\n\t      throw new TypeError('SplitButton requires a ul element. The passed element type is <' + nodeName + '>');\n\t    }\n\n\t    if (this.element.hasClass('prime-initialized')) {\n\t      throw new Error('This element has already been initialized. Call destroy before initializing again.');\n\t    }\n\n\t    Utils.bindAll(this);\n\n\t    this.element.hide().addClass('prime-split-button');\n\t    this.container = PrimeDocument.queryUp('div,td', this.element);\n\n\t    // If a default action was not found, use the first one\n\t    this.defaultAction = this.element.queryFirst('ul > li.default a');\n\t    if (this.defaultAction === null) {\n\t      this.defaultAction = this.element.queryFirst('ul > li a');\n\t    }\n\n\t    // Build the split button markup and add listeners\n\t    this._buildSplitButton();\n\t    this.splitButton.addEventListener('mouseover', this._handleMouseOver);\n\t    this.splitButton.addEventListener('mouseout', this._handleMouseOut);\n\t    this.element.addEventListener('mouseout', this._handleMouseOut);\n\t    this.dropDown.addEventListener('click', this._handleDropDownClick);\n\t    this.dropDownDiv.addEventListener('click', this._handleDropDownClick);\n\t    this.defaultButton.addEventListener('click', this._handleDefaultButton);\n\n\t    // Register a single global listener to handle closing buttons\n\t    const body = new PrimeElement(document.body);\n\t    if (!body.getAttribute('data-prime-split-button-handler')) {\n\t      body.addEventListener('click', this._hideAllButtons);\n\t      body.setAttribute('data-prime-split-button-handler', 'true');\n\t    }\n\t    this.element.addClass('prime-initialized');\n\t  }\n\n\t  /**\n\t   * Destroy the the SplitButton widget\n\t   */\n\t  destroy() {\n\t    this.splitButton.removeAllEventListeners();\n\t    this.dropDown.removeAllEventListeners();\n\t    this.splitButton.removeFromDOM();\n\n\t    this.element.removeEventListener('mouseout', this._handleMouseOut);\n\t    this.element.removeAttribute('data-prime-active');\n\t    this.element.setStyle('margin-top', '');\n\t    this.element.removeClass('prime-initialized prime-split-button').show();\n\t    this.defaultAction.show();\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Clear the active marker.\n\t   * @private\n\t   */\n\t  _clearActiveMarker() {\n\t    PrimeDocument.query('ul.prime-split-button.prime-initialized[data-prime-active]').each(function(element) {\n\t      element.removeAttribute('data-prime-active');\n\t    });\n\t  }\n\n\t  /**\n\t   * Handle the default button click\n\t   * @param {MouseEvent} event the click event.\n\t   * @private\n\t   */\n\t  _handleDefaultButton(event) {\n\t    Utils.stopEvent(event);\n\t    this.defaultAction.fireEvent('click', null, null, false, true);\n\t  }\n\n\t  /**\n\t   * Handle the split button click to expand the action list.\n\t   * @param {MouseEvent} event the click event.\n\t   * @private\n\t   */\n\t  _handleDropDownClick(event) {\n\t    Utils.stopEvent(event);\n\t    this._clearActiveMarker();\n\t    this._setActiveMarker();\n\t    this._hideAllButtons();\n\n\t    if (this.element.isVisible()) {\n\t      this.element.hide();\n\t      this.splitButton.addClass('prime-inactive');\n\t    } else {\n\t      this.element.setStyle('margin-top', this.dropDownDiv.getHeight() + 2 + 'px');\n\t      this.element.show();\n\t      let width = 1;\n\t      this.splitButton.getChildren('div').each(function(element) {\n\t        width += element.getWidth();\n\t      });\n\t      this.element.setWidth(width);\n\t      this.splitButton.removeClass('prime-inactive');\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the mouse over event.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMouseOver() {\n\t    this.splitButton.removeClass('prime-inactive');\n\t  }\n\n\t  /**\n\t   * Handles the mouse out event.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMouseOut() {\n\t    if (!this.element.isVisible()) {\n\t      this.splitButton.addClass('prime-inactive');\n\t    }\n\t  }\n\n\t  /**\n\t   * Build the necessary markup to transform the ul to a split button action.\n\t   * @private\n\t   */\n\t  _buildSplitButton() {\n\n\t    const div = PrimeDocument.newElement('<div>');\n\t    div.addClass('prime-split-button prime-inactive');\n\t    div.prependTo(this.container);\n\n\t    // set a reference to this object\n\t    this.splitButton = PrimeDocument.queryFirst('div.prime-split-button', this.container);\n\n\t    let buttonDiv = PrimeDocument.newElement('<div>');\n\t    const button = PrimeDocument.newElement('<a>');\n\n\t    button.addClass('prime-split-button-default');\n\t    button.setAttribute('href', this.defaultAction.getAttribute('href'));\n\t    button.setHTML(this.defaultAction.getHTML());\n\t    // Setting href to '#' will expand the button and remove it from the expanded list\n\t    if (button.getAttribute('href') === '#') {\n\t      button.addEventListener('click', this._handleDropDownClick);\n\t      this.defaultAction.getParent().hide();\n\t    }\n\n\t    let dropDownDiv = PrimeDocument.newElement('<div>');\n\t    const dropDown = PrimeDocument.newElement('<a>');\n\t    dropDown.addClass('prime-drop-down');\n\n\t    dropDownDiv.prependTo(this.splitButton);\n\t    // re-assign reference to the DOM element\n\t    dropDownDiv = PrimeDocument.queryLast('div', this.splitButton);\n\t    dropDown.prependTo(dropDownDiv.domElement);\n\n\t    buttonDiv.prependTo(this.splitButton);\n\t    // re-assign reference to the DOM element\n\t    buttonDiv = PrimeDocument.queryFirst('div', this.splitButton);\n\t    button.prependTo(buttonDiv.domElement);\n\n\t    this.defaultButton = PrimeDocument.queryFirst('div', this.splitButton);\n\t    this.dropDown = PrimeDocument.queryFirst('a.prime-drop-down', this.splitButton);\n\t    this.dropDownDiv = PrimeDocument.queryUp('div', this.dropDown);\n\t    this.element.setStyle('margin-top', this.dropDown.getHeight() + '');\n\t  }\n\n\t  /**\n\t   * Hide all visible split buttons on the page. And ensure all are set to inactive.\n\t   * @param {Event} [event] The JavaScript event - this parameter is optional.\n\t   * @private\n\t   */\n\t  _hideAllButtons(event) {\n\t    PrimeDocument.query('ul.prime-split-button.prime-initialized').each(function(element) {\n\t      if (!Utils.isDefined(event)) {\n\t        if (!element.domElement.hasAttribute('data-prime-active') && element.isVisible()) {\n\t          element.hide();\n\t        }\n\t      } else {\n\t        if (element.isVisible()) {\n\t          element.hide();\n\t        }\n\t      }\n\n\t    });\n\n\t    PrimeDocument.query('div.prime-split-button:not(.prime-inactive)').each(function(element) {\n\t      element.addClass('prime-inactive');\n\t    });\n\t  }\n\n\t  /**\n\t   * Set the active split button.\n\t   * @private\n\t   */\n\t  _setActiveMarker() {\n\t    this.element.setAttribute('data-prime-active', 'true');\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tconst PrimeStorage = {\n\t  /**\n\t   * True if local storage is supported.\n\t   * @type {boolean} true if local storage is supported. Local in this case being used to indicate either type 'local' or 'session'.\n\t   */\n\t  supported: typeof(Storage) !== 'undefined',\n\n\t  /**\n\t   * Set an object into session storage.\n\t   * @param key {string} the key to store the object.\n\t   * @param object {object} the object to store.\n\t   */\n\t  setSessionObject: function(key, object) {\n\t    PrimeStorage._setObject(sessionStorage, key, object);\n\t  },\n\n\t  /**\n\t   * Retrieve an object from session storage.\n\t   * @param key {string} the key that was used to store the object.\n\t   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n\t   */\n\t  getSessionObject: function(key) {\n\t    return PrimeStorage._getObject(sessionStorage, key);\n\t  },\n\n\t  /**\n\t   * Set an object into local storage storage.\n\t   * @param key {string} the key to store the object.\n\t   * @param object {object} the object to store.\n\t   */\n\t  setLocalObject: function(key, object) {\n\t    PrimeStorage._setObject(localStorage, key, object);\n\t  },\n\n\t  /**\n\t   * Retrieve an object from local storage.\n\t   * @param key {string} the key that was used to store the object.\n\t   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n\t   */\n\t  getLocalObject: function(key) {\n\t    return PrimeStorage._getObject(localStorage, key);\n\t  },\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  _getObject: function(storage, key) {\n\t    if (PrimeStorage.supported) {\n\t      const item = storage.getItem(key);\n\t      if (item !== null) {\n\t        return JSON.parse(item);\n\t      }\n\t    }\n\n\t    return null;\n\t  },\n\n\t  _setObject: function(storage, key, object) {\n\t    if (PrimeStorage.supported) {\n\t      storage.setItem(key, JSON.stringify(object));\n\t    }\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass Table {\n\t  /**\n\t   * Constructs a new Table object for the given table element.\n\t   *\n\t   * @param {PrimeElement|Element} element The table element.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.column = null;\n\t    this.columnIndex = 0;\n\t    this.sortAscending = true;\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.thead = this.element.queryFirst('thead');\n\t    this.tbody = this.element.queryFirst('tbody');\n\n\t    if (!this.element.is('table')) {\n\t      throw new TypeError('The element you passed in is not a table element.');\n\t    }\n\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Initializes the table widget.\n\t   *\n\t   * @returns {Table} This.\n\t   */\n\t  initialize() {\n\t    // Sortable by default unless it is disabled\n\t    if (this.element.getDataAttribute('sortable') !== 'false') {\n\t      this._initializeSort();\n\t    }\n\n\t    // Initialize the checkbox handling\n\t    this.selectAll = this.element.queryFirst('thead > tr > th input[type=\"checkbox\"]');\n\t    if (this.selectAll !== null) {\n\t      this.selectAll.addEventListener('change', this._handleSelectAllChange);\n\t    }\n\n\t    this.element.query('tbody > tr > td input[type=\"checkbox\"]').addEventListener('click', this._handleCheckboxEvent);\n\t    this.checkedCount = 0;\n\t    this.numberofCheckboxes = this.element.query('tbody td input[type=\"checkbox\"]').length;\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sort the table.\n\t   */\n\t  sort() {\n\t    this._clearSortIndicators();\n\n\t    if (this.column.hasClass('sort-up')) {\n\t      this.column.removeClass('sort-up').addClass('sort-down');\n\t      this.sortAscending = false;\n\t    } else if (this.column.hasClass('sort-down')) {\n\t      this.column.removeClass('sort-down').addClass('sort-up');\n\t      this.sortAscending = true;\n\t    } else {\n\t      this.column.addClass('sort-up');\n\t      this.sortAscending = true;\n\t    }\n\n\t    // Collect the values to sort\n\t    const rows = [];\n\t    this.tbody.query('tr').each(function(element) {\n\t      rows.push(element);\n\t    });\n\n\t    rows.sort(this._comparator);\n\t    let i = 0;\n\t    const length = rows.length;\n\t    if (this.sortAscending) {\n\t      for (i = 0; i <  length; i++) {\n\t        this.tbody.appendElement(rows[i]);\n\t      }\n\t    } else {\n\t      for (i = length; i > 0; i--) {\n\t        this.tbody.appendElement(rows[i - 1]);\n\t      }\n\t    }\n\n\t    // Save current sorted column state in local storage.\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      const data = {\n\t        columnIndex: this.columnIndex,\n\t        sortAscending: this.sortAscending\n\t      };\n\t      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets a callback on a checkbox event.\n\t   *\n\t   * @param {function} callback The callback function\n\t   * @returns {Table} This.\n\t   */\n\t  withCheckEventCallback(callback) {\n\t    this.options.checkEventCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enables local storage of the sorted column. This key is required to enable local storage of the sorted column.\n\t   *\n\t   * @param {String} key The local storage key.\n\t   * @returns {Table} This.\n\t   */\n\t  withLocalStorageKey(key) {\n\t    this.options.localStorageKey = key;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Table} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Remove the ascending and descending sort classes on every column except the current column being sorted.\n\t   * @private\n\t   */\n\t  _clearSortIndicators() {\n\t    this.thead.query('th').each((function(element) {\n\t      if (element.domElement !== this.column.domElement) {\n\t        element.removeClass('sort-up sort-down');\n\t      }\n\t    }).bind(this));\n\t  }\n\n\t  /**\n\t   * Sort function to be used by the .sort() method.\n\t   * @param a The first row to compare\n\t   * @param b The second row to compare\n\t   * @returns {number}\n\t   * @private\n\t   */\n\t  _comparator(a, b) {\n\t    const sortType = this.thead.query('th')[this.columnIndex].getDataAttribute('sortType') || 'string';\n\t    if (sortType !== 'string' && sortType !== 'number') {\n\t      throw new Error('Unsupported sort type. [string] or [number] are the two supported sort types.');\n\t    }\n\n\t    const cell1 = a.query('td')[this.columnIndex];\n\t    const cell2 = b.query('td')[this.columnIndex];\n\n\t    const sortValue1 = cell1.getDataAttribute('sortValue');\n\t    const sortValue2 = cell2.getDataAttribute('sortValue');\n\n\t    // Prefer the data-sort-value if provided\n\t    let value1 = sortValue1 || cell1.getTextContent().toLowerCase();\n\t    let value2 = sortValue2 || cell2.getTextContent().toLowerCase();\n\n\t    if (sortType === 'string') {\n\t      return value1.localeCompare(value2);\n\t    } else {\n\t      value1 = this._toNumber(value1);\n\t      value2 = this._toNumber(value2);\n\n\t      if (value1 < value2) {\n\t        return -1;\n\t      }\n\n\t      if (value1 > value2) {\n\t        return 1;\n\t      }\n\n\t      return 0;\n\t    }\n\t  }\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Return the column index where 0 is the first column in the table.\n\t   * @param column {PrimeElement} the column to determine the index of\n\t   * @returns {number} a positive integer representing the index of the column in the table.\n\t   * @private\n\t   */\n\t  _getColumnIndex(column) {\n\t    let columnIndex = 0;\n\t    let current = column;\n\t    let previous = column;\n\t    while (previous !== null) {\n\t      previous = current.getPreviousSibling();\n\t      current = previous;\n\t      columnIndex++;\n\t    }\n\n\t    return columnIndex - 1;\n\t  }\n\n\t  _handleCheckboxEvent(event) {\n\t    const target = new PrimeElement(event.currentTarget);\n\t    const currentCheckedCount = this.checkedCount;\n\t    this.checkedCount = this.checkedCount + (target.isChecked() ? 1 : -1);\n\n\t    if (this.selectAll !== null) {\n\t      if (currentCheckedCount === this.numberofCheckboxes && this.numberofCheckboxes !== this.checkedCount) {\n\t        this.selectAll.setChecked(false);\n\t      } else if (currentCheckedCount !== this.numberofCheckboxes && this.numberofCheckboxes === this.checkedCount) {\n\t        this.selectAll.setChecked(true);\n\t      }\n\t    }\n\n\t    if (this.options.checkEventCallback !== null) {\n\t      this.options.checkEventCallback({\n\t        checkedCount: this.checkedCount\n\t      });\n\t    }\n\t  }\n\n\t  _handleSelectAllChange() {\n\t    if (this.selectAll.isChecked()) {\n\t      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n\t        if (!e.isChecked()) {\n\t          e.setChecked(true);\n\t          this.checkedCount++;\n\t        }\n\t      }.bind(this));\n\t    } else {\n\t      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n\t        if (e.isChecked()) {\n\t          e.setChecked(false);\n\t          this.checkedCount--;\n\t        }\n\t      }.bind(this));\n\t    }\n\n\t    if (this.options.checkEventCallback !== null) {\n\t      this.options.checkEventCallback({\n\t        checkedCount: this.checkedCount\n\t      });\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the click event on the sortable column.\n\t   * @param event {MouseEvent} the click event\n\t   * @private\n\t   */\n\t  _handleSortableColumnClick(event) {\n\t    Utils.stopEvent(event);\n\t    const target = new PrimeElement(event.currentTarget);\n\t    this.column = target;\n\t    this.columnIndex = this._getColumnIndex(target);\n\n\t    this.sort();\n\t  }\n\n\t  /**\n\t   * Add the click event listener to the column unless it matches the ignore selector.\n\t   * @param column {PrimeElement} the column element to initialize.\n\t   * @private\n\t   */\n\t  _initializeColumn(column) {\n\t    if (!column.is('[data-sortable=\"false\"]') && column.queryFirst('input[type=\"checkbox\"]') === null) {\n\t      column.addClass('sortable').addEventListener('click', this._handleSortableColumnClick);\n\t    }\n\t  }\n\n\t  _initializeSort() {\n\t    this.thead.query('th').each(this._initializeColumn);\n\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n\t      if (state !== null) {\n\t        this.columnIndex = state.columnIndex;\n\t        this.sortAscending = state.sortAscending;\n\n\t        this.column = this.thead.query('th')[this.columnIndex];\n\t        if (this.sortAscending) {\n\t          this.column.addClass('sort-down');\n\t        } else {\n\t          this.column.addClass('sort-up');\n\t        }\n\n\t        this.sort();\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      localStorageKey: null,\n\t      checkEventCallback: null\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\n\t  // noinspection JSMethodCanBeStatic\n\t  _toNumber(value) {\n\t    const number = Number(value);\n\t    if (isNaN(value)) {\n\t      console.error(new Error('Expected value [' + value + '] to be a number.'));\n\t      return value;\n\t    }\n\t    return number;\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass Tabs {\n\t  /**\n\t   * Constructs a new Tabs object for the given ul element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The ul element to build the tab widget from\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    if (this.element.getTagName().toLowerCase() === 'ul') {\n\t      this.tabsContainer = this.element;\n\t    } else {\n\t      this.tabsContainer = this.element.queryFirst('ul');\n\t    }\n\n\t    if (this.tabsContainer === null) {\n\t      throw new TypeError('Tabs requires a ul element. The passed element does not contain a ul element');\n\t    }\n\n\t    this._setInitialOptions();\n\t    this.tabContents = {};\n\t    this.tabs = {};\n\t    this.tabArray = [];\n\t    this.selectedTab = null;\n\t  }\n\n\t  /**\n\t   * Destroys the Tabs widget\n\t   */\n\t  destroy() {\n\t    this.tabsContainer.query('a').each(function(a) {\n\t      a.removeEventListener('click', this._handleClick);\n\t    }.bind(this));\n\n\t    for (let i = 0; i < this.tabs.length; i++) {\n\t      this.tabs[i].removeClass(this.options.tabContentClass);\n\t    }\n\t  }\n\n\t  /**\n\t   * Hides the tab for the given Id.\n\t   *\n\t   * @param id The Id of the tab to hide.\n\t   */\n\t  hideTab(id) {\n\t    const tab = this.tabs[id];\n\t    tab.hide();\n\t    this.redraw();\n\t  }\n\n\t  /**\n\t   * Initializes the Tabs widget. Call this after you have set all the initial options.\n\t   *\n\t   * @returns {Tabs} This.\n\t   */\n\t  initialize() {\n\t    this.tabsContainer.query('li:not(.disabled)').each(function(tab) {\n\t      const a = tab.queryFirst('a').addEventListener('click', this._handleClick);\n\t      const dataSet = tab.getDataSet();\n\n\t      const href = a.getAttribute('href');\n\t      const isAnchor = href.charAt(0) === '#';\n\t      if (isAnchor) {\n\t        dataSet.tabId = href.substring(1);\n\t        dataSet.tabUrl = '';\n\t      } else {\n\t        dataSet.tabId = href;\n\t        dataSet.tabUrl = href;\n\t      }\n\n\t      this.tabs[dataSet.tabId] = tab;\n\t      this.tabArray.push(tab);\n\n\t      let content = PrimeDocument.queryById(dataSet.tabId);\n\t      if (content === null && isAnchor) {\n\t        throw new Error('A div is required with the following ID [' + dataSet.tabId + ']');\n\t      } else if (content === null) {\n\t        content = PrimeDocument.newElement('<div>').insertAfter(this.element).setAttribute('id', href);\n\t      }\n\n\t      content.hide();\n\n\t      content.addClass(this.options.tabContentClass);\n\t      this.tabContents[dataSet.tabId] = content;\n\t    }.bind(this));\n\n\t    if (this.options.deepLinkingEnabled) {\n\t      const tabId = window.location.hash.replace(/^#/, '');\n\t      if (Utils.isDefined(tabId) && Utils.isDefined(this.tabs[tabId])) {\n\t        this.selectTab(tabId);\n\t      }\n\t    }\n\n\t    this.redraw();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Re-applies the first-child, last-child, and active classes based on the current state of the tabs. If there\n\t   * is no tab that is active, this also selects the first tab that is visible.\n\t   */\n\t  redraw() {\n\t    let firstVisible = null;\n\t    let lastVisible = null;\n\t    let selectNew = false;\n\t    let noneActive = true;\n\t    for (let i = 0; i < this.tabArray.length; i++) {\n\t      if (this.tabArray[i].isVisible()) {\n\t        if (firstVisible === null) {\n\t          firstVisible = this.tabArray[i];\n\t        }\n\n\t        lastVisible = this.tabArray[i];\n\n\t        if (this.tabArray[i].hasClass('selected')) {\n\t          noneActive = false;\n\t        }\n\t      } else if (this.tabArray[i].hasClass('selected')) {\n\t        selectNew = true;\n\t      }\n\n\t      this.tabArray[i].removeClass('first-visible-tab');\n\t      this.tabArray[i].removeClass('last-visible-tab');\n\t    }\n\n\t    firstVisible.addClass('first-visible-tab');\n\t    lastVisible.addClass('last-visible-tab');\n\n\t    let tabId = null;\n\t    if (selectNew || noneActive) {\n\t      if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t        const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n\t        if (state !== null) {\n\t          tabId = state.tabId;\n\t        }\n\t      }\n\n\t      // If no tabId was found or the tab is not currently visible, select the first visible\n\t      if (tabId === null || !this.tabs[tabId] || !this.tabs[tabId].isVisible()) {\n\t        tabId = firstVisible.getDataSet().tabId;\n\t      }\n\n\t      this.selectTab(tabId);\n\t    }\n\n\t    // If error class handling was enabled, add the error class to the tab and set focus\n\t    if (this.options.errorClass) {\n\t      for (tabId in this.tabContents) {\n\t        if (this.tabContents.hasOwnProperty(tabId)) {\n\t          const errorElement = this.tabContents[tabId].queryFirst('.' + this.options.errorClass);\n\t          if (errorElement !== null) {\n\t            this.tabs[tabId].queryFirst('a').addClass(this.options.errorClass);\n\t            this.selectTab(tabId);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Select the active tab. Sets the active class on the li and shows only the corresponding tab content.\n\t   *\n\t   * @param id The Id of the tab to select.\n\t   */\n\t  selectTab(id) {\n\t    if (this.selectedTab !== null && this.selectedTab.getDataSet().tabId === id) {\n\t      return;\n\t    }\n\n\t    for (const tabId in this.tabs) {\n\t      if (this.tabs.hasOwnProperty(tabId)) {\n\t        this.tabs[tabId].removeClass('selected');\n\t      }\n\t    }\n\n\t    this.tabs[id].addClass('selected');\n\t    this.selectedTab = this.tabs[id];\n\t    for (const tabId in this.tabContents) {\n\t      if (this.tabContents.hasOwnProperty(tabId) && tabId === id) {\n\t        this.tabContents[tabId].show('block');\n\t        if (this.options.selectCallback) {\n\t          this.options.selectCallback(this.tabs[tabId], this.tabContents[tabId]);\n\t        }\n\t      } else {\n\t        this.tabContents[tabId].hide();\n\t      }\n\t    }\n\n\t    // Save current selected tab state in local storage. The JSON object isn't necessary at the moment,\n\t    // but we can tack on other properties as needed for additional state in the future.\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      const data = {\n\t        tabId: id\n\t      };\n\t      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n\t    }\n\n\t    const ajaxURL = this.selectedTab.getDataSet().tabUrl;\n\t    if (ajaxURL !== '') {\n\t      this.selectedTab.addClass('loading');\n\t      this.tabContents[id].setHTML('');\n\t      this.tabContents[id].addClass('loading');\n\t      new PrimeRequest(ajaxURL, 'GET')\n\t          .withSuccessHandler(this._handleAJAXResponse)\n\t          .withErrorHandler(this._handleAJAXResponse)\n\t          .go();\n\t    }\n\t  }\n\n\t  /**\n\t   * Shows the tab for the given Id.\n\t   *\n\t   * @param {String} id The Id of the tab to hide.\n\t   */\n\t  showTab(id) {\n\t    this.tabs[id].show();\n\t    this.redraw();\n\t  }\n\n\t  /**\n\t   * Adds a callback for AJAX calls. This is invoked after the AJAX load completes and the HTML is inserted into the\n\t   * DOM. The function is passed the container for the tab that was selected.\n\t   *\n\t   * @param {Function} callback The callback function.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withAJAXCallback(callback) {\n\t    this.options.ajaxCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Disable the default behavior of allowing a deep link provided on the URL to set the default tab during render.\n\t   *\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withDeepLinkingDisabled() {\n\t    this.options.deepLinkingEnabled = false;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enable error class handling. When this option is used, if the specified error class is found on any element\n\t   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n\t   *\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withErrorClassHandling(errorClass) {\n\t    this.options.errorClass = errorClass;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enables local storage of the currently selected tab. If the user navigates away from the page and back, the same\n\t   * tab will be selected. This key is how the selected tab is stored in local storage and by setting a key you also\n\t   * enable this feature.\n\t   *\n\t   * @param {?String} key The local storage key.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withLocalStorageKey(key) {\n\t    this.options.localStorageKey = key;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Specifies a callback function that is called whenever tabs are changed.\n\t   *\n\t   * @param {?Function} callback The callback function.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withSelectCallback(callback) {\n\t    this.options.selectCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the tab content elements.\n\t   *\n\t   * @param className {String} The class name.\n\t   * @returns {Tabs}\n\t   */\n\t  withTabContentClass(className) {\n\t    this.options.tabContentClass = className;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the AJAX response.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The AJAX response.\n\t   * @private\n\t   */\n\t  _handleAJAXResponse(xhr) {\n\t    this.selectedTab.removeClass('loading');\n\t    const container = this.tabContents[this.selectedTab.getDataSet().tabId];\n\t    container.removeClass('loading');\n\t    container.setHTML(xhr.responseText);\n\n\t    if (this.options.ajaxCallback !== null) {\n\t      this.options.ajaxCallback(container);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the tab click by showing the corresponding panel and hiding the others.\n\t   *\n\t   * @param {MouseEvent} event The click event on the anchor tag.\n\t   * @private\n\t   */\n\t  _handleClick(event) {\n\t    Utils.stopEvent(event);\n\t    const a = new PrimeElement(event.currentTarget);\n\t    if (!a.hasClass('disabled')) {\n\t      const href = a.getAttribute('href');\n\t      if (href.charAt(0) === '#') {\n\t        this.selectTab(href.substring(1));\n\t      } else {\n\t        this.selectTab(href);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      ajaxCallback: null,\n\t      errorClass: null,\n\t      deepLinkingEnabled: true,\n\t      localStorageKey: null,\n\t      selectCallback: null,\n\t      tabContentClass: 'prime-tab-content'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tconst open = [];\n\n\tclass Tooltip {\n\t  /**\n\t   * Constructs a new Tooltip object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Tooltip widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t  }\n\n\t  static get open() {\n\t    return open;\n\t  }\n\n\t  /**\n\t   * Hides the tooltip.\n\t   *\n\t   * @returns {Tooltip} This.\n\t   */\n\t  hide() {\n\t    if (Tooltip.open.length > 0) {\n\t      Tooltip.open.forEach(function(t) {\n\t        t.removeFromDOM();\n\t      });\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the widget by attaching event listeners to the element.\n\t   *\n\t   * @returns {Tooltip} This.\n\t   */\n\t  initialize() {\n\t    this.element.addEventListener('mouseenter', this._handleMouseEnter).addEventListener('mouseleave', this._handleMouseLeave);\n\t    PrimeDocument.addEventListener('scroll', this._handleMouseLeave);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shows the tooltip.\n\t   *\n\t   * @returns {Tooltip} This.\n\t   */\n\t  show() {\n\t    const text = this.element.getDataSet()[this.options.dataName];\n\t    const zIndex = this.element.getRelativeZIndex();\n\t    let classNames = this.options.className + ' ' + this.element.getTagName().toLocaleLowerCase();\n\t    if (this.options.additionalClasses !== null) {\n\t      classNames = classNames + ' ' + this.options.additionalClasses;\n\t    }\n\t    const tooltip = PrimeDocument.newElement('<span>')\n\t        .appendTo(PrimeDocument.bodyElement)\n\t        .addClass(classNames)\n\t        .setHTML(text)\n\t        .setStyle('zIndex', zIndex + 10);\n\n\t    const left = this.element.getLeft();\n\t    const top = this.element.getTop();\n\t    const width = this.element.getWidth();\n\t    const tooltipWidth = tooltip.getWidth();\n\t    const tooltipHeight = tooltip.getHeight();\n\n\t    tooltip.setLeft(left - (tooltipWidth / 2) + (width / 2));\n\t    tooltip.setTop(top - tooltipHeight - 8);\n\n\t    // If the tooltip is too close to the top of the screen invert it and move it under the element\n\t    if ((top - tooltipHeight - 8) < 0) {\n\t      tooltip.setTop(top + this.element.getHeight() + 8).addClass('inverted');\n\t    }\n\n\t    Tooltip.open.push(tooltip);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name to use when creating the tooltip.\n\t   *\n\t   * @param additionalClasses {?String} The class name or spaces separated names.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withAdditionalClassNames(additionalClasses) {\n\t    this.options.additionalClasses = additionalClasses;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name to use when creating the tooltip.\n\t   *\n\t   * @param className {String} The class name.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set data-set name to pull the tooltip text from.\n\t   *\n\t   * @param {string} name The data-set name.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withDataName(name) {\n\t    this.options.dataName = name;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the mouse enter event to show the tooltip.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMouseEnter() {\n\t    this.show();\n\t  }\n\n\t  /**\n\t   * Handles the mouse exit event to hide the tooltip.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMouseLeave() {\n\t    this.hide();\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      additionalClasses: null,\n\t      className: 'prime-tooltip',\n\t      dataName: 'tooltip'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\tPrimeDocument.onReady(function() {\n\t  // Fix browser issues with tooltips sticking around on back-button navigation\n\t  PrimeWindow.addEventListener('beforeunload', function() {\n\t    if (Tooltip.open.length > 0) {\n\t      Tooltip.open.forEach(function(t) {\n\t        t.removeFromDOM();\n\t      });\n\t    }\n\t  });\n\t});\n\n\t/*\n\t * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass TreeView {\n\t  /**\n\t   * Constructs a new TreeView object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the TreeView widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Initializes the element by traverse its children to find all of the anchor tags with the folder-toggle class (or\n\t   * whatever you set the class to).\n\t   *\n\t   * @returns {TreeView} This.\n\t   */\n\t  initialize() {\n\t    this.element.query('a.' + this.options.folderToggleClassName).each(function(e) {\n\t      e.addEventListener('click', this._handleClick);\n\t    }.bind(this));\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the folder toggle class name.\n\t   *\n\t   * @param className {String} The class name.\n\t   * @returns {TreeView} This.\n\t   */\n\t  withFolderToggleClassName(className) {\n\t    this.options.folderToggleClassName = className;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Handles the click event.\n\t   * @private\n\t   */\n\t  _handleClick(event) {\n\t    Utils.stopEvent(event);\n\t    const a = PrimeElement.wrap(event.target);\n\t    const li = a.getParent();\n\t    if (a.hasClass('open')) {\n\t      a.removeClass('open');\n\t      li.removeClass('open');\n\t    } else {\n\t      a.addClass('open');\n\t      li.addClass('open');\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      folderToggleClassName: 'prime-folder-toggle'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (const option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\n\n\n\tvar Widgets = Object.freeze({\n\t\tAJAXDialog: AJAXDialog,\n\t\tDateTimePicker: DateTimePicker,\n\t\tDismissable: Dismissable,\n\t\tDraggable: Draggable,\n\t\tHTMLDialog: HTMLDialog,\n\t\tInProgress: InProgress,\n\t\tMultipleSelect: MultipleSelect,\n\t\tOverlay: Overlay,\n\t\tSearcher: Searcher,\n\t\tSideMenu: SideMenu,\n\t\tSplitButton: SplitButton,\n\t\tTable: Table,\n\t\tTabs: Tabs,\n\t\tTooltip: Tooltip,\n\t\tTouchable: Touchable,\n\t\tTreeView: TreeView\n\t});\n\n\t/*\n\t * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass BaseTransition {\n\t  /**\n\t   * Constructs a BaseTransition for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element the effect will be applied to.\n\t   * @param {number} endValue The end value for the transition.\n\t   * @constructor\n\t   */\n\t  constructor(element, endValue) {\n\t    Utils.bindAll(this);\n\t    this.element = PrimeElement.wrap(element);\n\t    this.duration = 1000;\n\t    this.endFunction = null;\n\t    this.endValue = endValue;\n\t    this.iterations = 20;\n\t  }\n\n\t  /**\n\t   * Sets the function that is called when the effect has completed.\n\t   *\n\t   * @param {Function} endFunction The function that is called when the effect is completed.\n\t   * @returns {BaseTransition} This Effect.\n\t   */\n\t  withEndFunction(endFunction) {\n\t    this.endFunction = endFunction;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the duration of the fade-out effect.\n\t   *\n\t   * @param {number} duration The duration in milliseconds.\n\t   * @returns {BaseTransition} This Effect.\n\t   */\n\t  withDuration(duration) {\n\t    if (duration < 100) {\n\t      throw new TypeError('Duration should be greater than 100 milliseconds or it won\\'t really be noticeable');\n\t    }\n\n\t    this.duration = duration;\n\t    return this;\n\t  }\n\n\t  /*\n\t   * Protected functions\n\t   */\n\n\t  /**\n\t   * Changes an integer style property of the Element iteratively over a given period of time from one value to another\n\t   * value.\n\t   *\n\t   * @protected\n\t   * @param {Function} getFunction The function on the element to call to get the current value for the transition.\n\t   * @param {Function} setFunction The function on the element to call to set the new value for the transition.\n\t   */\n\t  _changeNumberStyleIteratively(getFunction, setFunction) {\n\t    let currentValue = getFunction.call(this.element);\n\t    const step = Math.abs(this.endValue - currentValue) / this.iterations;\n\n\t    // Close around ourselves\n\t    const self = this;\n\t    const stepFunction = function(last) {\n\t      if (last) {\n\t        currentValue = self.endValue;\n\t      } else {\n\t        if (currentValue < self.endValue) {\n\t          currentValue += step;\n\t        } else {\n\t          currentValue -= step;\n\t        }\n\t      }\n\n\t      setFunction.call(self.element, currentValue);\n\t    };\n\n\t    Utils.callIteratively(this.duration, this.iterations, stepFunction, this._internalEndFunction);\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the call back at the end.\n\t   *\n\t   * @private\n\t   */\n\t  _internalEndFunction() {\n\t    this._subclassEndFunction(this);\n\n\t    if (this.endFunction) {\n\t      this.endFunction(this);\n\t    }\n\t  }\n\n\t  /**\n\t   * Virtual function stub\n\t   *\n\t   * @private\n\t   */\n\t  _subclassEndFunction() {\n\t  }\n\t}\n\n\tclass Fade extends BaseTransition {\n\t  /**\n\t   * Constructs a new Fade for the given element. The fade effect uses the CSS opacity style and supports the IE alpha\n\t   * style. The duration defaults to 1000 milliseconds (1 second). This changes the opacity over the duration from 1.0 to\n\t   * 0.0. At the end, this hides the element so that it doesn't take up any space.\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to fade out.\n\t   */\n\t  constructor(element) {\n\t    super(element, 0.0);\n\t  }\n\n\t  /**\n\t   * Internal call back at the end of the transition. This hides the element so it doesn't take up space.\n\t   *\n\t   * @override\n\t   * @private\n\t   */\n\t  _subclassEndFunction() {\n\t    this.element.hide();\n\t  }\n\n\t  /**\n\t   * Executes the fade effect on the element using the opacity style.\n\t   */\n\t  go() {\n\t    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n\t  }\n\t}\n\n\tclass Appear extends BaseTransition {\n\t  /**\n\t   * Constructs a new Appear for the given element. The appear effect uses the CSS opacity style and supports the IE\n\t   * alpha style. The duration defaults to 1000 milliseconds (1 second). This first sets the opacity to 0, then it shows\n\t   * the element and finally it raises the opacity.\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to appear.\n\t   * @param {number} [opacity=1.0] The final opacity to reach when the effect is complete. Defaults to 1.0.\n\t   */\n\t  constructor(element, opacity) {\n\t    if (!Utils.isDefined(opacity)) {\n\t      opacity = 1.0;\n\t    }\n\t    super(element, opacity);\n\t  }\n\n\t  /**\n\t   * Executes the appear effect on the element using the opacity style.\n\t   */\n\t  go() {\n\t    this.element.setOpacity(0.0);\n\t    this.element.show();\n\t    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n\t  }\n\t}\n\n\tclass ScrollTo extends BaseTransition {\n\t  /**\n\t   * Constructs a new ScrollTo for the given element. The duration defaults to 1000 milliseconds (1 second).\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to scroll.\n\t   * @param {number} position The position to scroll the element to.\n\t   * @constructor\n\t   */\n\t  constructor(element, position) {\n\t    super(element, position);\n\n\t    this.axis = 'vertical';\n\t  }\n\n\t  /**\n\t   * Set the scroll axis, either 'horizontal' or 'vertical'. Default is 'vertical'.\n\t   *\n\t   * @param {string} axis The axis to scroll.\n\t   * @returns {ScrollTo}\n\t   */\n\t  withAxis(axis) {\n\t    this.axis = axis || 'vertical';\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Executes the scroll effect on the element.\n\t   */\n\t  go() {\n\t    if (this.axis === 'vertical') {\n\t      this._changeNumberStyleIteratively(this.element.getScrollTop, this.element.scrollTo);\n\t    } else {\n\t      this._changeNumberStyleIteratively(this.element.getScrollLeft, this.element.scrollLeftTo);\n\t    }\n\t  }\n\t}\n\n\tclass SlideOpen {\n\t  /**\n\t   * Creates a SlideOpen effect on the given element.\n\t   *\n\t   * @param {PrimeElement} element The element.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = element;\n\t    if (this.isOpen()) {\n\t      element.domElement.primeVisibleHeight = element.getHeight();\n\t    } else {\n\t      element.setStyle('height', 'auto');\n\t      element.domElement.primeVisibleHeight = element.getHeight();\n\t      element.setStyle('height', '0');\n\t    }\n\n\t    this.isTransitioning = false;\n\n\t    this._setInitialOptions();\n\t  }\n\n\t  close() {\n\t    if (!this.isOpen()) {\n\t      return;\n\t    }\n\n\t    // Set a fixed height instead of auto so that the transition runs, but only if the element is \"open\"\n\t    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n\t    this.isTransitioning = true;\n\n\t    // This timeout is needed since the height change takes time to run\n\t    setTimeout(function() {\n\t      this.element.setHeight(0);\n\t      this.element.removeClass('open');\n\t      this.isTransitioning = false;\n\n\t      if (this.options.closeCallback !== null) {\n\t        this.options.closeCallback();\n\t      }\n\t    }.bind(this), this.options.timeout);\n\t  }\n\n\t  isOpen() {\n\t    return this.element.getHeight() !== 0 || this.element.hasClass('open');\n\t  }\n\n\t  open() {\n\t    if (this.isOpen()) {\n\t      return;\n\t    }\n\n\t    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n\t    this.isTransitioning = true;\n\n\t    setTimeout(function() {\n\t      this.element.setHeight('auto');\n\t      this.element.addClass('open');\n\t      this.isTransitioning = false;\n\n\t      if (this.options.openCallback !== null) {\n\t        this.options.openCallback();\n\t      }\n\t    }.bind(this), this.options.timeout);\n\t  }\n\n\t  toggle() {\n\t    if (this.isOpen()) {\n\t      this.close();\n\t    } else {\n\t      this.open();\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the close callback function.\n\t   *\n\t   * @param {?Function} callback The close callback\n\t   * @returns {SlideOpen} This.\n\t   */\n\t  withCloseCallback(callback) {\n\t    this.options.closeCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set the open callback function.\n\t   *\n\t   * @param {?Function} callback The open callback\n\t   * @returns {SlideOpen} This.\n\t   */\n\t  withOpenCallback(callback) {\n\t    this.options.openCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {SlideOpen} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Set the initial options of the widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      openCallback: null,\n\t      closeCallback: null,\n\t      timeout: 310\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\n\n\n\tvar Effects = Object.freeze({\n\t\tBaseTransition: BaseTransition,\n\t\tFade: Fade,\n\t\tAppear: Appear,\n\t\tScrollTo: ScrollTo,\n\t\tSlideOpen: SlideOpen\n\t});\n\n\t/*\n\t * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass DataQueue {\n\t  /**\n\t   * First-In-First-Out Queue implementation modeled after java.util.Deque interface.\n\t   *\n\t   * @constructor\n\t   */\n\t  constructor() {\n\t    Utils.bindAll(this);\n\t    this._elements = {};\n\t    this._head = 0;\n\t    this._tail = 0;\n\t  }\n\n\t  /**\n\t   * Add the element to the head of the queue.\n\t   *\n\t   * @param {Object} element An object to store in the queue.\n\t   * @returns {DataQueue} This Element.\n\t   */\n\t  add(element) {\n\t    this._elements[this._head] = element;\n\t    this._head++;\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Return true if the queue is empty.\n\t   *\n\t   * @returns {boolean} True if the queue is empty, false if not.\n\t   */\n\t  isEmpty() {\n\t    return this._head === this._tail;\n\t  }\n\n\t  /**\n\t   * Return but do not remove the tail of the queue. This is the oldest element in the queue.\n\t   *\n\t   * @returns {Object} The object at the tail of the queue, or null if empty.\n\t   */\n\t  peek() {\n\t    if (this.isEmpty()) {\n\t      return null;\n\t    }\n\n\t    return this._elements[this._tail];\n\t  }\n\n\t  /**\n\t   * Return and remove the tail of the queue. This is the oldest element in the queue.\n\t   *\n\t   * @returns {Object} the object at the tail of the queue, or null if the queue is empty.\n\t   */\n\t  poll() {\n\t    if (this.isEmpty()) {\n\t      return null;\n\t    }\n\n\t    const object = this._elements[this._tail];\n\t    delete this._elements[this._tail];\n\t    this._tail++;\n\n\t    // The cursor should not go off the end of the queue\n\t    if (this._cursor < this._tail) {\n\t      this._cursor = this._tail;\n\t    }\n\n\t    return object;\n\t  }\n\n\t  /**\n\t   * Return the size of the queue.\n\t   *\n\t   * @returns {Number} The size of the queue.\n\t   */\n\t  size() {\n\t    return this._head - this._tail;\n\t  }\n\n\t}\n\n\t/*\n\t * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\tclass Template {\n\t  /**\n\t   * A Javascript Object that can serve to generate Prime.Document.Element from a source string and optional parameters.\n\t   *\n\t   * @constructor\n\t   * @param {string} template The String that defines the source of the template.\n\t   */\n\t  constructor(template) {\n\t    Utils.bindAll(this);\n\t    this.init(template);\n\t  }\n\n\t  init(template) {\n\t    this.template = template;\n\t  }\n\n\t  /**\n\t   * Generates a String from the given parameterHash.  Provide a hash of String keys to values.\n\t   * Keys can be regular text strings, in which case it will look for and replace #{key} as with the value.  You can\n\t   * also make the key a String \"/key/\", which will be converted to a Regex and run.\n\t   *\n\t   * For the value you can provide a straight up String, int, etc, or you can provide a function which will be called\n\t   * to provide the value\n\t   *\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   * @returns {string} The result of executing the template.\n\t   */\n\t  generate(parameters) {\n\t    parameters = Utils.isDefined(parameters) ? parameters : {};\n\t    let templateCopy = String(this.template);\n\t    for (let key in parameters) {\n\t      if (parameters.hasOwnProperty(key)) {\n\t        const value = parameters[key];\n\t        let expressedValue;\n\t        if (typeof(value) === 'function') {\n\t          expressedValue = value();\n\t        } else {\n\t          expressedValue = value;\n\t        }\n\n\t        if (key.indexOf('/') === 0 && key.lastIndexOf('/') === key.length - 1) {\n\t          templateCopy = templateCopy.replace(new RegExp(key.substring(1, key.length - 1), \"g\"), expressedValue);\n\t        } else {\n\t          const expressedKey = \"#{\" + key + \"}\";\n\t          while (templateCopy.indexOf(expressedKey) !== -1) {\n\t            templateCopy = templateCopy.replace(expressedKey, expressedValue);\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return templateCopy;\n\t  }\n\n\t  /**\n\t   * Calls to generate and then appends the resulting value to the inner HTML of the provided primeElement.\n\t   *\n\t   * @param {PrimeElement} primeElement The prime Element instance to append the result of executing the template to.\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   */\n\t  appendTo(primeElement, parameters) {\n\t    if (Utils.isDefined(primeElement)) {\n\t      primeElement.setHTML(primeElement.getHTML() + this.generate(parameters));\n\t    } else {\n\t      throw new TypeError('Please supply an element to append to');\n\t    }\n\t  }\n\n\t  /**\n\t   * Calls to generate and then inserts the resulting elements into the dom before the primeElement\n\t   *\n\t   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template before.\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   */\n\t  insertBefore(primeElement, parameters) {\n\t    if (Utils.isDefined(primeElement)) {\n\t      const holder = document.createElement('div');\n\t      holder.innerHTML = this.generate(parameters);\n\t      new PrimeElement(holder.children[0]).insertBefore(primeElement);\n\t    } else {\n\t      throw new TypeError('Please supply an element to append to');\n\t    }\n\t  }\n\n\t  /**\n\t   * Calls to generate and then inserts the resulting elements into the dom after the primeElement\n\t   *\n\t   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template after.\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   */\n\t  insertAfter(primeElement, parameters) {\n\t    if (Utils.isDefined(primeElement)) {\n\t      const holder = document.createElement('div');\n\t      holder.innerHTML = this.generate(parameters);\n\t      new PrimeElement(holder.children[0]).insertAfter(primeElement);\n\t    } else {\n\t      throw new TypeError('Please supply an element to append to');\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\t// Do any polyfill imports here for backwards compatibility\n\tconst Ajax = {\n\t  Request: PrimeRequest\n\t};\n\n\tconst Data = {\n\t  Queue: DataQueue\n\t};\n\n\texports.Effects = Effects;\n\texports.Widgets = Widgets;\n\texports.Ajax = Ajax;\n\texports.Data = Data;\n\texports.Browser = Browser;\n\texports.Events = Events;\n\texports.Date = PrimeDate;\n\texports.Document = PrimeDocument;\n\texports.Storage = PrimeStorage;\n\texports.Window = PrimeWindow;\n\texports.Template = Template;\n\texports.Utils = Utils;\n\n\treturn exports;\n\n}({}));\n\n","/*\n * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\n/**\n * The Browser namespace. This namespace does not contain any classes, just functions.\n *\n * @namespace Browser\n */\nconst Browser = {\n  /**\n   * Detects the browser name and version.\n   */\n  detect: function() {\n    this.name = this._searchString(this.dataBrowser) || \"An unknown browser\";\n    this.version = this._searchVersion(navigator.userAgent) || this._searchVersion(navigator.appVersion) || \"an unknown version\";\n    this.os = this._searchString(this.dataOS) || \"an unknown OS\";\n  },\n\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   *\n   * @param {Object} data The data array.\n   * @returns {?string} The browser identity String.\n   * @private\n   */\n  _searchString: function(data) {\n    for (let i = 0; i < data.length; i++) {\n      const dataString = data[i].string;\n      const dataProp = data[i].prop;\n      this.versionSearchString = data[i].versionSearch || data[i].identity;\n      if (dataString && dataString.indexOf(data[i].subString) !== -1) {\n        return data[i].identity;\n      } else if (dataProp) {\n        return data[i].identity;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   *\n   * @param {string} dataString The browser data string.\n   * @returns {?number} The version or null.\n   * @private\n   */\n  _searchVersion: function(dataString) {\n    const index = dataString.indexOf(this.versionSearchString);\n    if (index === -1) {\n      return null;\n    }\n\n    return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));\n  },\n\n  dataBrowser: [\n    {\n      string: navigator.userAgent,\n      subString: \"Chrome\",\n      identity: \"Chrome\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"OmniWeb\",\n      versionSearch: \"OmniWeb/\",\n      identity: \"OmniWeb\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"Apple\",\n      identity: \"Safari\",\n      versionSearch: \"Version\"\n    },\n    {\n      prop: window.opera,\n      identity: \"Opera\",\n      versionSearch: \"Version\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"iCab\",\n      identity: \"iCab\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"KDE\",\n      identity: \"Konqueror\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"Firefox\",\n      identity: \"Firefox\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"Camino\",\n      identity: \"Camino\"\n    },\n    {    // for newer Netscapes (6+)\n      string: navigator.userAgent,\n      subString: \"Netscape\",\n      identity: \"Netscape\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"MSIE\",\n      identity: \"Explorer\",\n      versionSearch: \"MSIE\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"Gecko\",\n      identity: \"Mozilla\",\n      versionSearch: \"rv\"\n    },\n    {     // for older Netscapes (4-)\n      string: navigator.userAgent,\n      subString: \"Mozilla\",\n      identity: \"Netscape\",\n      versionSearch: \"Mozilla\"\n    }\n  ],\n  dataOS: [\n    {\n      string: navigator.platform,\n      subString: \"Win\",\n      identity: \"Windows\"\n    },\n    {\n      string: navigator.platform,\n      subString: \"Mac\",\n      identity: \"Mac\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"iPhone\",\n      identity: \"iPhone/iPod\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"iPad\",\n      identity: \"iPad\"\n    },\n    {\n      string: navigator.platform,\n      subString: \"Linux\",\n      identity: \"Linux\"\n    }\n  ]\n};\nBrowser.detect();\n\nexport {Browser}\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Browser} from \"../Browser\";\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElementList} from \"./PrimeElementList\";\nimport {Utils} from \"../Utils\";\n\nconst blockElementRegexp = /^(?:ARTICLE|ASIDE|BLOCKQUOTE|BODY|BR|BUTTON|CANVAS|CAPTION|COL|COLGROUP|DD|DIV|DL|DT|EMBED|FIELDSET|FIGCAPTION|FIGURE|FOOTER|FORM|H1|H2|H3|H4|H5|H6|HEADER|HGROUP|HR|LI|MAP|OBJECT|OL|OUTPUT|P|PRE|PROGRESS|SECTION|TABLE|TBODY|TEXTAREA|TFOOT|TH|THEAD|TR|UL|VIDEO)$/;\nconst mouseEventsRegexp = /^(?:click|dblclick|mousedown|mouseup|mouseover|mousemove|mouseout|mouseenter|mouseleave)$/;\nconst htmlEventsRegexp = /^(?:abort|blur|change|error|focus|load|reset|resize|scroll|select|submit|unload)$/;\nlet anonymousId = 1;\nconst ieAlphaRegexp = /alpha\\(opacity=(.+)\\)/;\n\nclass PrimeElement {\n  /**\n   * Creates an Element class for the given DOM element.\n   *\n   * @constructor\n   * @param {Element|EventTarget} element The element\n   */\n  constructor(element) {\n    if (!Utils.isDefined(element.nodeType) || element.nodeType !== 1) {\n      throw new TypeError('You can only pass in DOM element Node objects to the PrimeDocument.Element constructor');\n    }\n\n    Utils.bindAll(this);\n    this.domElement = element;\n    this.domElement.customEventListeners = [];\n    this.domElement.eventListeners = {};\n  }\n\n  /**\n   * Regular expression that captures the tagnames of all the block elements in HTML5.\n   *\n   * @type {RegExp}\n   */\n  static get blockElementRegexp() {\n    return blockElementRegexp;\n  }\n\n  static get mouseEventsRegexp() {\n    return mouseEventsRegexp;\n  }\n\n  static get htmlEventsRegexp() {\n    return htmlEventsRegexp;\n  }\n\n  static get anonymousId() {\n    return anonymousId;\n  }\n\n  static set anonymousId(value) {\n    anonymousId = value;\n  }\n\n  static get ieAlphaRegexp() {\n    return ieAlphaRegexp;\n  }\n\n  /**\n   * Static method that wraps an element in a PrimeElement unless it is already wrapped. In that case, it simply\n   * returns the element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The element to wrap.\n   * @static\n   */\n  static wrap(element) {\n    return (element instanceof PrimeElement) ? element : new PrimeElement(element);\n  }\n\n  /**\n   * Static method that unwraps an element to a DOM element. This is the inverse of Element.wrap. If this is passed an\n   * Element, it returns domElement. Otherwise, this just returns the element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  static unwrap(element) {\n    return (element instanceof PrimeElement) ? element.domElement : element;\n  }\n\n  /**\n   * Adds the given class (or list of space separated classes) to this Element.\n   *\n   * @param {string} classNames The class name(s) separated by a space.\n   * @returns {PrimeElement} This Element.\n   */\n  addClass(classNames) {\n    let currentClassName = this.domElement.className;\n    if (currentClassName === '') {\n      currentClassName = classNames;\n    } else {\n      const currentClassNameList = this.domElement.className.split(Utils.spaceRegex);\n      const newClassNameList = classNames.split(Utils.spaceRegex);\n      for (let i = 0; i < newClassNameList.length; i++) {\n        if (currentClassNameList.indexOf(newClassNameList[i]) === -1) {\n          currentClassNameList.push(newClassNameList[i]);\n        }\n      }\n\n      currentClassName = currentClassNameList.join(' ');\n    }\n\n    this.domElement.className = currentClassName;\n    return this;\n  }\n\n  /**\n   * Attaches an event listener to the element and will only invoke the listener when the event target matches\n   * the provided selector.\n   *\n   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n   *\n   * @param {string} event The name of the event\n   * @param  {string} selector The selector to match against the Element\n   * @param {Function} listener The event listener function\n   */\n  addDelegatedEventListener(event, selector, listener) {\n    addEventListener(event, function(event) {\n      if (event.target.matches(selector)) {\n        listener(event);\n      }\n    });\n  }\n\n  /**\n   * Attaches an event listener to this Element.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event listener function.\n   * @returns {PrimeElement} This Element.\n   */\n  addEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      this.domElement.eventListeners = this.domElement.eventListeners || {};\n      this.domElement.eventListeners[event] = this.domElement.eventListeners[event] || [];\n      if (this.domElement.eventListeners[event].indexOf(listener) === -1) {\n        this.domElement.eventListeners[event].push(listener);\n      }\n      this.domElement.addEventListener(event, listener, false);\n    } else {\n      // Custom event\n      this.domElement.customEventListeners = this.domElement.customEventListeners || {};\n      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n      if (this.domElement.customEventListeners[event].indexOf(listener) === -1) {\n        this.domElement.customEventListeners[event].push(listener);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Appends the given element to this element. If the given element already exists in the DOM, it is removed from its\n   * current location and placed at the end of this element.\n   *\n   * @param {PrimeElement|Node} element The element to append.\n   * @returns {PrimeElement} This Element.\n   */\n  appendElement(element) {\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    if (domElement.parentNode) {\n      domElement.parentNode.removeChild(domElement);\n    }\n\n    this.domElement.appendChild(domElement);\n    return this;\n  }\n\n  /**\n   * Appends the given HTML string to this element.\n   *\n   * @param {string} html The HTML to append.\n   * @returns {PrimeElement} This Element.\n   */\n  appendHTML(html) {\n    this.domElement.insertAdjacentHTML('beforeend', html);\n    return this;\n  }\n\n  /**\n   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very end of the given\n   * element.\n   *\n   * @param {PrimeElement|Node} element The element to insert this Element into.\n   * @returns {PrimeElement} This Element.\n   */\n  appendTo(element) {\n    // Error out for now if this element is in the document so we can punt on cloning for now\n    if (this.domElement.parentNode) {\n      throw new TypeError('You can only insert new PrimeElements for now');\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    if (domElement.parentNode) {\n      domElement.appendChild(this.domElement);\n    } else {\n      throw new TypeError('The element you passed into appendTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires an event on the Element.\n   *\n   * @param {string} event The name of the event.\n   * @param {Object} [memo] Assigned to the memo field of the event.\n   * @param {Object} [target] The target.\n   * @param {boolean} [bubbling] If the event is bubbling, defaults to true.\n   * @param {boolean} [cancelable] If the event is cancellable, defaults to true.\n   * @returns {PrimeElement} This Element.\n   */\n  fireEvent(event, memo, target, bubbling, cancelable) {\n    memo = Utils.isDefined(memo) ? memo : {};\n    target = Utils.isDefined(target) ? target : this;\n    bubbling = Utils.isDefined(bubbling) ? bubbling : true;\n    cancelable = Utils.isDefined(cancelable) ? cancelable : true;\n\n    let evt;\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      if (document.createEventObject) {\n        // Dispatch for IE\n        evt = document.createEventObject();\n        evt.memo = memo || {};\n        evt.cancelBubble = !bubbling;\n        this.domElement.fireEvent('on' + event, evt);\n      } else if (document.createEvent) {\n        // Dispatch for others\n        if (PrimeElement.mouseEventsRegexp.exec(event)) {\n          evt = document.createEvent(\"MouseEvents\");\n          evt.initMouseEvent(event, bubbling, cancelable, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        } else if (PrimeElement.htmlEventsRegexp.exec(event)) {\n          evt = document.createEvent(\"HTMLEvents\");\n          evt.initEvent(event, bubbling, cancelable);\n        } else {\n          throw new TypeError('Invalid event [' + event + ']');\n        }\n\n        evt.memo = memo || {};\n        this.domElement.dispatchEvent(evt);\n      } else {\n        throw new TypeError('Unable to fire event. Neither createEventObject nor createEvent methods are available');\n      }\n    } else {\n      // Custom event\n      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n      evt = {event: event, memo: memo, target: target};\n      for (let index in this.domElement.customEventListeners[event]) {\n        if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n          this.domElement.customEventListeners[event][index](evt);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires a custom event on the Element using the given event object rather than creating a new event object. This is\n   * useful for pass-through event handling.\n   *\n   * @param {string} event The name of the event.\n   * @param {Object} eventObj The event object to pass to the handlers.\n   * @returns {PrimeElement} This Element.\n   */\n  fireCustomEvent(event, eventObj) {\n    eventObj = Utils.isDefined(eventObj) ? eventObj : {};\n    if (event.indexOf(':') === -1) {\n      throw new TypeError('This method can only be used for custom events');\n    }\n\n    // Custom event\n    this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n    for (let index in this.domElement.customEventListeners[event]) {\n      if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n        this.domElement.customEventListeners[event][index](eventObj);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Puts the focus on this element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  focus() {\n    this.domElement.focus();\n    return this;\n  }\n\n  /**\n   * Returns the absolute top of this element relative to the document.\n   *\n   * @returns {number} The number of pixels that this element is from the top of the document.\n   */\n  getAbsoluteTop() {\n    let top = 0;\n    let e = this.domElement;\n    while (e) {\n      top += e.offsetTop;\n      e = e.offsetParent;\n    }\n\n    return top;\n  }\n\n  /**\n   * Returns the value of the given attribute.\n   *\n   * @param {string} name The attribute name.\n   * @returns {string} This attribute value or null.\n   */\n  getAttribute(name) {\n    const attr = this.domElement.attributes.getNamedItem(name);\n    if (attr) {\n      return attr.value;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns all of the attributes on the element as an object.\n   *\n   * @returns {object} This attributes or an empty object if there are no attributes on this element.\n   */\n  getAttributes() {\n    const attrs = {};\n    if (this.domElement.hasAttributes()) {\n      for (let i = 0; i < this.domElement.attributes.length; i++) {\n        attrs[this.domElement.attributes[i].name] = this.domElement.attributes[i].value;\n      }\n    }\n\n    return attrs;\n  }\n\n  /**\n   * Gets the viewable height of the Element as an integer value in pixels. This height includes border, padding and scroll bar but excludes the margins.\n   *\n   * @returns {number} The height as pixels (number) or a string.\n   */\n  getBorderedHeight() {\n    return this.domElement.offsetHeight;\n  }\n\n  /**\n   * Gets the width of the Element as an integer value. This width includes border, padding and scroll bar but excludes the margins.\n   *\n   * @returns {number} The height in pixels.\n   */\n  getBorderedWidth() {\n    return this.domElement.offsetWidth;\n  }\n\n  /**\n   * @returns {number} The bottom position (in pixels) of the current element.\n   */\n  getBottom() {\n    return this.domElement.getBoundingClientRect().bottom;\n  }\n\n  /**\n   * Gets the children elements of this Element, optionally reduced to those matching the optional selector.\n   *\n   * @param {string} [selector] The selector. Optional, if not provided all children will be returned.\n   * @returns {PrimeElementList} The children.\n   */\n  getChildren(selector) {\n    if (!Utils.isDefined(selector)) {\n      return new PrimeElementList(this.domElement.children);\n    }\n\n    const matched = [];\n    for (let i = 0; i < this.domElement.children.length; i++) {\n      const child = this.domElement.children[i];\n      if (child.matches(selector)) {\n        matched.push(child);\n      }\n    }\n\n    return new PrimeElementList(matched);\n  }\n\n  /**\n   * Gets the class value of the current element. This might be a single class or multiple class names.\n   *\n   * @returns {string} The class.\n   */\n  getClass() {\n    return this.domElement.className;\n  }\n\n  /**\n   * Gets the computed style information for this Element.\n   *\n   * @returns {IEElementStyle|CSSStyleDeclaration} The style information.\n   */\n  getComputedStyle() {\n    return (this.domElement.currentStyle) ? this.domElement.currentStyle : document.defaultView.getComputedStyle(this.domElement, null);\n  }\n\n  /**\n   * Calculates the location of this element with respect to the document rather than the elements parent, offset parent\n   * or scroll position.\n   *\n   * @returns {{top: number, left: number}}\n   */\n  getCoordinates() {\n    const box = this.domElement.getBoundingClientRect();\n\n    const body = document.body;\n    const documentElement = document.documentElement;\n\n    const scrollTop = window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n    const scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n\n    const clientTop = documentElement.clientTop || body.clientTop || 0;\n    const clientLeft = documentElement.clientLeft || body.clientLeft || 0;\n\n    const top = box.top + scrollTop - clientTop;\n    const left = box.left + scrollLeft - clientLeft;\n\n    return {top: Math.round(top), left: Math.round(left)};\n  }\n\n  /**\n   * Returns the dataset if it exists, otherwise, this creates a new dataset object and returns it.\n   *\n   * @returns {object} This dataset object.\n   */\n  getDataSet() {\n    if (this.domElement.dataset) {\n      return this.domElement.dataset;\n    }\n\n    this.domElement.dataset = {};\n    const attrs = this.getAttributes();\n    for (let prop in attrs) {\n      if (attrs.hasOwnProperty(prop) && prop.indexOf('data-') === 0) {\n        const dataName = prop.substring(5).replace(/-([a-z])/g, function(g) {\n          return g[1].toUpperCase();\n        });\n        this.domElement.dataset[dataName] = attrs[prop];\n      }\n    }\n    return this.domElement.dataset;\n  }\n\n  /**\n   * Returns the data value if it exists, otherwise returns null.\n   *\n   * @param {string} name The attribute name.\n   * @returns {string} This attribute value or null.\n   */\n  getDataAttribute(name) {\n    return this.getDataSet()[name] || null;\n  }\n\n  /**\n   * Get the first child element of this Element, optionally filtered using the optional selector.\n   *\n   * @param {string} [selector] The selector. Optional.\n   * @returns {PrimeElement} The first child element or null if the element has no children or a selector was provided and nothing matched the selector..\n   */\n  getFirstChild(selector) {\n    const lastChild = this.getChildren(selector)[0];\n    if (!Utils.isDefined(lastChild)) {\n      return null;\n    }\n    return lastChild;\n  }\n\n  /**\n   * Gets the viewable height of the Element as an integer value in pixels. This height includes padding and scroll bar\n   * but excludes the margin and borders. This is often called the innerHeight of the element.\n   *\n   * @returns {number} The height as pixels (number) or a string.\n   */\n  getHeight() {\n    const computedStyle = this.getComputedStyle();\n    const offsetHeight = this.domElement.offsetHeight;\n    const borderTop = computedStyle['borderTopWidth'];\n    const borderBottom = computedStyle['borderBottomWidth'];\n    return offsetHeight - Utils.parseCSSMeasure(borderTop) - Utils.parseCSSMeasure(borderBottom);\n  }\n\n  /**\n   * Gets the inner HTML content of the Element.\n   *\n   * @returns {string} The HTML content.\n   */\n  getHTML() {\n    return this.domElement.innerHTML;\n  }\n\n  /**\n   * Gets the ID of this element from the domElement.\n   *\n   * @returns {string} ID The id of the domElement if it exists.\n   */\n  getId() {\n    return this.domElement.id;\n  }\n\n  /**\n   * Get the last child element of this Element, optionally filtered using the optional selector.\n   *\n   * @param {string} [selector] The selector. Optional.\n   * @returns {PrimeElement} The last child element or null if the element has no children or a selector was provided and nothing matched the selector..\n   */\n  getLastChild(selector) {\n    const elementList = this.getChildren(selector);\n    if (elementList.length > 0) {\n      return elementList[elementList.length - 1];\n    }\n    return null;\n  }\n\n  /**\n   * @returns {number} The left position (in pixels) of the current element.\n   */\n  getLeft() {\n    return this.domElement.getBoundingClientRect().left;\n  }\n\n  /**\n   * @returns {PrimeElement} This elements next sibling or null.\n   */\n  getNextSibling() {\n    let sibling = this.domElement.nextSibling;\n    while (sibling !== null && sibling.nodeType !== 1) {\n      sibling = sibling.nextSibling;\n    }\n\n    if (sibling === null) {\n      return null;\n    }\n\n    return new PrimeElement(sibling);\n  }\n\n  /**\n   * The elements offset left in pixels.\n   *\n   * @returns {number} The offset left.\n   */\n  getOffsetLeft() {\n    return this.domElement.offsetLeft;\n  }\n\n  /**\n   * The elements offset top in pixels.\n   *\n   * @returns {number} The offset top.\n   */\n  getOffsetTop() {\n    return this.domElement.offsetTop;\n  }\n\n  /**\n   * Retrieves the opacity value for the Element. This handles the IE alpha filter.\n   *\n   * @returns {number} The opacity value.\n   */\n  getOpacity() {\n    const computedStyle = this.getComputedStyle();\n    let opacity = 1.0;\n    if (Browser.name === 'Explorer' && Browser.version < 9) {\n      const filter = computedStyle['filter'];\n      if (filter !== undefined && filter !== '') {\n        const matches = PrimeElement.ieAlphaRegexp.match(filter);\n        if (matches.length > 0) {\n          opacity = parseFloat(matches[0]);\n        }\n      }\n    } else {\n      opacity = parseFloat(computedStyle['opacity']);\n    }\n\n    return opacity;\n  }\n\n  /**\n   * @returns {PrimeElementList} If this element is a select box, this returns the options of the select box in\n   *          an ElementList.\n   */\n  getOptions() {\n    if (this.getTagName() !== 'SELECT') {\n      throw new TypeError('You can only get the options for select elements');\n    }\n\n    return new PrimeElementList(this.domElement.options);\n  }\n\n  /**\n   * Gets the outer height of the element, including the margins. This does not include the padding or borders.\n   *\n   * @returns {number} The outer height of the element.\n   */\n  getOuterHeight() {\n    const computedStyle = this.getComputedStyle();\n    const offsetHeight = this.domElement.offsetHeight;\n    const marginTop = computedStyle['marginTop'];\n    const marginBottom = computedStyle['marginBottom'];\n    return offsetHeight + Utils.parseCSSMeasure(marginTop) + Utils.parseCSSMeasure(marginBottom);\n  }\n\n  /**\n   * Gets the outer HTML content of the Element.\n   *\n   * @returns {string} The outer HTML content.\n   */\n  getOuterHTML() {\n    return this.domElement.outerHTML;\n  }\n\n  /**\n   * Gets the outer width of the element, including the margins. This does not include the padding or borders.\n   *\n   * @returns {number} The outer width of the element.\n   */\n  getOuterWidth() {\n    const computedStyle = this.getComputedStyle();\n    const offsetWidth = this.domElement.offsetWidth;\n    const marginLeft = computedStyle['marginLeft'];\n    const marginRight = computedStyle['marginRight'];\n    return offsetWidth + Utils.parseCSSMeasure(marginLeft) + Utils.parseCSSMeasure(marginRight);\n  }\n\n  /**\n   * Returns this element's parent as a PrimeElement.\n   *\n   * @returns {PrimeElement} This element's parent or null if there is no parent\n   */\n  getParent() {\n    if (Utils.isDefined(this.domElement.parentElement)) {\n      return new PrimeElement(this.domElement.parentElement);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @returns {PrimeElement} This elements previous sibling or null.\n   */\n  getPreviousSibling() {\n    let sibling = this.domElement.previousSibling;\n    while (sibling !== null && sibling.nodeType !== 1) {\n      sibling = sibling.previousSibling;\n    }\n\n    if (sibling === null) {\n      return null;\n    }\n\n    return new PrimeElement(sibling);\n  }\n\n  /**\n   * @returns {number} The zIndex style of this element based on the element or the first positioned parent.\n   */\n  getRelativeZIndex() {\n    let e = this;\n    while (e !== null && e.getComputedStyle()['zIndex'] === 'auto') {\n      e = e.getParent();\n    }\n    return e === null ? 0 : parseInt(e.getComputedStyle()['zIndex']);\n  }\n\n  /**\n   * @returns {number} The right position (in pixels) of the current element.\n   */\n  getRight() {\n    return this.domElement.getBoundingClientRect().right;\n  }\n\n  /**\n   * @returns {number} The scroll height of this element.\n   */\n  getScrollHeight() {\n    return this.domElement.scrollHeight;\n  }\n\n  /**\n   * @returns {number} The scroll left position of this element.\n   */\n  getScrollLeft() {\n    return this.domElement.scrollLeft;\n  }\n\n  /**\n   * @returns {number} The scroll top position of this element.\n   */\n  getScrollTop() {\n    return this.domElement.scrollTop;\n  }\n\n  /**\n   * @returns {number} The scroll width of this element.\n   */\n  getScrollWidth() {\n    return this.domElement.scrollWidth;\n  }\n\n  /**\n   * Retrieves the selected texts of this Element, if the element is a select. If it is anything else this returns\n   * null.\n   *\n   * @returns {Array} The texts of this Element.\n   */\n  getSelectedTexts() {\n    let texts;\n    if (this.domElement.tagName === 'SELECT') {\n      texts = [];\n      for (let i = 0; i < this.domElement.options.length; i++) {\n        if (this.domElement.options[i].selected) {\n          texts.push(this.domElement.options[i].text);\n        }\n      }\n    } else {\n      texts = null;\n    }\n\n    return texts;\n  }\n\n  /**\n   * Retrieves the values of this Element, if the element is a checkbox or select. If it is anything else this returns\n   * null.\n   *\n   * @returns {Array} The values of this Element.\n   */\n  getSelectedValues() {\n    let values;\n    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n      values = [];\n      const name = this.domElement.name;\n      const form = PrimeDocument.queryUp('form', this.domElement);\n      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n        if (element.isChecked()) {\n          values.push(element.getValue());\n        }\n      });\n    } else if (this.domElement.tagName === 'SELECT') {\n      values = [];\n      for (let i = 0; i < this.domElement.length; i++) {\n        if (this.domElement.options[i].selected) {\n          values.push(this.domElement.options[i].value);\n        }\n      }\n    } else {\n      values = null;\n    }\n\n    return values;\n  }\n\n  /**\n   * Gets value of a style attribute.\n   *\n   * @returns {string} The style value.\n   */\n  getStyle(name) {\n    name = Utils.convertStyleName(name);\n    return this.domElement.style[name];\n  }\n\n  /**\n   * @returns {string} The tag name of this element as a string. This is always uppercase.\n   */\n  getTagName() {\n    return this.domElement.tagName;\n  }\n\n  /**\n   * Retrieves the text content of this Element.\n   *\n   * @returns {string} The text contents of this Element.\n   */\n  getTextContent() {\n    return this.domElement.innerText ? this.domElement.innerText : this.domElement.textContent;\n  }\n\n  /**\n   * @returns {number} The top position (in pixels) of the current element.\n   */\n  getTop() {\n    return this.domElement.getBoundingClientRect().top;\n  }\n\n  /**\n   * Gets the width of the Element as an integer value. This width includes padding and scroll bar but excludes the margin and borders.\n   * This is often called the innerWidth of the element.\n   *\n   * @returns {number} The height in pixels.\n   */\n  getWidth() {\n    const computedStyle = this.getComputedStyle();\n    const offsetWidth = this.domElement.offsetWidth;\n    const borderLeft = computedStyle['borderLeftWidth'];\n    const borderRight = computedStyle['borderRightWidth'];\n    return offsetWidth - Utils.parseCSSMeasure(borderLeft) - Utils.parseCSSMeasure(borderRight);\n  }\n\n  /**\n   * Retrieves the value attribute of this Element. This works on all checkboxes, radio buttons, text, text areas, and\n   * options. However, this does not retrieve the selected options in a select box, checked checkboxes or checked radio\n   * buttons. Use the getSelectedValues function for that.\n   *\n   * @returns {string} The value of this Element.\n   */\n  getValue() {\n    return this.domElement.value;\n  }\n\n  /**\n   * Returns true if the element has one or all class names\n   *\n   * @param {string} classNames The class name(s) in a string.\n   * @returns {boolean} True if all class names are present.\n   */\n  hasClass(classNames) {\n    const currentClassNames = this.domElement.className;\n    if (currentClassNames === '') {\n      return classNames === '';\n    }\n\n    const currentClassNameList = currentClassNames.split(Utils.spaceRegex);\n    const findClassNameList = classNames.split(Utils.spaceRegex);\n    for (let i = 0; i < findClassNameList.length; i++) {\n      if (currentClassNameList.indexOf(findClassNameList[i]) === -1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Hides the Element by setting the display style to none.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  hide() {\n    this.domElement.style.display = 'none';\n    return this;\n  }\n\n  /**\n   * Inserts this Element into the DOM after the given element, removing it from it's parent if it's an existing element.\n   *\n   * @param {PrimeElement|Element} element The element to insert this Element after.\n   * @returns {PrimeElement} This Element.\n   */\n  insertAfter(element) {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    const parentElement = domElement.parentNode;\n    if (parentElement) {\n      parentElement.insertBefore(this.domElement, domElement.nextSibling);\n    } else {\n      throw new TypeError('The element you passed into insertAfter is not in the DOM. You can\\'t insert a PrimeElement after an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Inserts this Element into the DOM before the given element, removing it from it's parent if it's an existing element.\n   *\n   * @param {PrimeElement|Element} element The element to insert this Element before.\n   * @returns {PrimeElement} This Element.\n   */\n  insertBefore(element) {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    const parentElement = domElement.parentNode;\n    if (parentElement) {\n      parentElement.insertBefore(this.domElement, domElement);\n    } else {\n      throw new TypeError('The element you passed into insertBefore is not in the DOM. You can\\'t insert a PrimeElement before an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Inserts the given HTML snippet directly after this element.\n   *\n   * @param {string} html The HTML string.\n   * @returns {PrimeElement} This Element.\n   */\n  insertHTMLAfter(html) {\n    this.domElement.insertAdjacentHTML('afterend', html);\n    return this;\n  }\n\n  /**\n   * Inserts the given HTML snippet inside this element, before its first child.\n   *\n   * @param {string} html The HTML string.\n   * @returns {PrimeElement} This Element.\n   */\n  insertHTMLAfterBegin(html) {\n    this.domElement.insertAdjacentHTML('afterbegin', html);\n    return this;\n  }\n\n  /**\n   * Inserts the given text after this Element.\n   *\n   * @param {string} text The text to insert.\n   * @returns {PrimeElement} This Element.\n   */\n  insertTextAfter(text) {\n    if (!this.domElement.parentNode) {\n      throw new TypeError('This Element is not currently in the DOM');\n    }\n\n    const textNode = document.createTextNode(text);\n    this.domElement.parentNode.insertBefore(textNode, this.domElement.nextSibling);\n\n    return this;\n  }\n\n  /**\n   * Inserts the given text before this Element.\n   *\n   * @param {string} text The text to insert.\n   * @returns {PrimeElement} This Element.\n   */\n  insertTextBefore(text) {\n    if (!this.domElement.parentNode) {\n      throw new TypeError('This Element is not currently in the DOM');\n    }\n\n    const textNode = document.createTextNode(text);\n    this.domElement.parentNode.insertBefore(textNode, this.domElement);\n\n    return this;\n  }\n\n  /**\n   * Returns true if the element matches the provided selector.\n   *\n   * @param {string} selector to match against the Element\n   * @returns {boolean} True if the element matches the selector, false if it does not match the selector.\n   */\n  is(selector) {\n    return this.domElement.matches(selector);\n  }\n\n  /**\n   * Returns whether or not the element is checked. If the element is not a checkbox or a radio this returns false.\n   *\n   * @returns {boolean} True if the element is selected, false if it isn't or is not a checkbox or a radio.\n   */\n  isChecked() {\n    return this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio') && this.domElement.checked;\n  }\n\n  /**\n   * Determines if this element is a child of the given element.\n   *\n   * @param {PrimeElement|Node} element The element to check to see if this element is a child of.\n   * @returns {boolean} True if this element is a child of the given element, false otherwise.\n   */\n  isChildOf(element) {\n    const domElement = element instanceof PrimeElement ? element.domElement : element;\n    let parent = this.domElement.parentNode;\n    while (domElement !== parent && parent !== null) {\n      parent = parent.parentNode;\n    }\n\n    return domElement === parent;\n  }\n\n  /**\n   * @returns {boolean} Whether or not this element is disabled according to the disabled property.\n   */\n  isDisabled() {\n    return this.domElement.disabled;\n  }\n\n  /**\n   * @returns {boolean} True if this element has focus.\n   */\n  isFocused() {\n    return document.activeElement === this.domElement;\n  }\n\n  /**\n   * @return {boolean} True if this element is an INPUT, SELECT or TEXTAREA.\n   */\n  isInput() {\n    const tagName = this.getTagName();\n    return tagName === 'SELECT' || tagName === 'INPUT' || tagName === 'TEXTAREA';\n  }\n\n  /**\n   * Determines if the this element is inside the given element\n   *\n   * @param target {PrimeElement} The target element.\n   * @returns {boolean} True if this element is inside the given element.\n   */\n  isInside(target) {\n    if (this.domElement === document.body || this.domElement === document.documentElement || this.domElement === document) {\n      return false;\n    }\n\n    let parent = this.getParent();\n    while (parent.domElement !== document.body) {\n      if (parent.domElement === target.domElement) {\n        return true;\n      }\n      parent = parent.getParent();\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether or not the element is selected. If the element is not an option this returns false.\n   *\n   * @returns {boolean} True if the element is selected, false if it isn't or is not an option.\n   */\n  isSelected() {\n    return this.domElement.tagName === 'OPTION' && this.domElement.selected;\n  }\n\n  /**\n   * Determines if the element is visible using its display and visibility styles.\n   *\n   * @returns {boolean} True if the element is visible, false otherwise. This might return an invalid value if the element\n   * is absolutely positioned and off the screen, but is still technically visible.\n   */\n  isVisible() {\n    const computedStyle = this.getComputedStyle();\n    return computedStyle['display'] !== 'none' && computedStyle['visibility'] !== 'hidden';\n  }\n\n  /**\n   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very beginning of the given\n   * element.\n   *\n   * @param {PrimeElement|Element} element The element to insert this Element into.\n   * @returns {PrimeElement} This Element.\n   */\n  prependTo(element) {\n    // Error out for now if this element is in the document so we can punt on cloning for now\n    if (this.domElement.parentNode) {\n      throw new TypeError('You can only insert new PrimeElements for now');\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    if (domElement.parentNode) {\n      domElement.insertBefore(this.domElement, domElement.firstChild);\n    } else {\n      throw new TypeError('The element you passed into prependTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at this element and returns all the matched elements.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElementList} An element list.\n   */\n  query(selector) {\n    return PrimeDocument.query(selector, this);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at this element and returns the first matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElement} An element or null.\n   */\n  queryFirst(selector) {\n    return PrimeDocument.queryFirst(selector, this);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at this element and returns the last matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElement} An element or null.\n   */\n  queryLast(selector) {\n    return PrimeDocument.queryLast(selector, this);\n  }\n\n  /**\n   * Traverses up the DOM from this element and looks for a match to the selector.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElement} An element or null.\n   */\n  queryUp(selector) {\n    return PrimeDocument.queryUp(selector, this);\n  }\n\n  /**\n   * Removes all of the event listeners for the given element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  removeAllEventListeners() {\n    for (let event in this.domElement.eventListeners) {\n      if (this.domElement.eventListeners.hasOwnProperty(event)) {\n        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n        }\n      }\n    }\n\n    this.domElement.eventListeners = {};\n    this.domElement.customEventListeners = {};\n\n    return this;\n  }\n\n  /**\n   * Removes an attribute from the Element\n   *\n   * @param {string} name The name of the attribute.\n   * @returns {PrimeElement} This Element.\n   */\n  removeAttribute(name) {\n    this.domElement.removeAttribute(name);\n    return this;\n  }\n\n  /**\n   * Removes the given class (or list of space separated classes) from this Element.\n   *\n   * @param {string} classNames The class name(s).\n   * @returns {PrimeElement} This Element.\n   */\n  removeClass(classNames) {\n    const currentClassName = this.domElement.className;\n    if (currentClassName === '') {\n      return this;\n    }\n\n    const currentClassNameList = currentClassName.split(Utils.spaceRegex);\n    const removeClassNameList = classNames.split(Utils.spaceRegex);\n    for (let i = 0; i < removeClassNameList.length; i++) {\n      Utils.removeFromArray(currentClassNameList, removeClassNameList[i]);\n    }\n\n    this.domElement.className = currentClassNameList.join(' ');\n    return this;\n  }\n\n  /**\n   * Removes an event listener for a specific event from this Element, you must have attached using addEventListener\n   *\n   * @param {string} event The name of the event.\n   * @param {*} listener The event listener that was bound.\n   * @returns {PrimeElement} This Element.\n   */\n  removeEventListener(event, listener) {\n    let listeners;\n    if (event.indexOf(':') === -1) {\n      this._internalRemoveEventListener(event, listener);\n      listeners = this.domElement.eventListeners[event];\n    } else {\n      listeners = this.domElement.customEventListeners[event];\n    }\n\n    if (listeners) {\n      Utils.removeFromArray(listeners, listener);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all of the event listeners for the given event from this element.\n   *\n   * @param {string} event The name of the event to remove the listeners for.\n   * @returns {PrimeElement} This Element.\n   */\n  removeEventListeners(event) {\n    if (event.indexOf(':') === -1) {\n      if (this.domElement.eventListeners[event]) {\n        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n        }\n\n        delete this.domElement.eventListeners[event];\n      }\n    } else {\n      if (this.domElement.customEventListeners[event]) {\n        delete this.domElement.customEventListeners[event];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all of the event listeners for the given pattern from this element.\n   *\n   * @param {RegExp} pattern The regular expression that matches the names of the events to remove the listeners for.\n   * @returns {PrimeElement} This Element.\n   */\n  removeEventListenersByPattern(pattern) {\n    for (let event in this.domElement.eventListeners) {\n      if (this.domElement.eventListeners.hasOwnProperty(event) && pattern.test(event)) {\n        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n        }\n\n        delete this.domElement.eventListeners[event];\n      }\n    }\n\n    for (let event in this.domElement.customEventListeners) {\n      if (this.domElement.customEventListeners.hasOwnProperty(event) && pattern.test(event)) {\n        delete this.domElement.customEventListeners[event];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes this Element from the DOM. If the Element isn't in the DOM this does nothing.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  removeFromDOM() {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    return this;\n  }\n\n  /**\n   * Create a selected range for this element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  selectElementContents() {\n    let range;\n    let selection;\n\n    if (document.body.createTextRange) {\n      /* IE */\n      range = document.body.createTextRange();\n      range.moveToElementText(this.domElement);\n      range.select();\n    } else if (window.getSelection) {\n      /* Rest of the world */\n      selection = window.getSelection();\n      range = document.createRange();\n      range.selectNodeContents(this.domElement);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n\n    return this;\n  }\n\n  /**\n   * Scrolls this Element into the visible area of the browser window.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  scrollIntoView() {\n    this.domElement.scrollIntoView();\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the given horizontal position.\n   *\n   * @param {number} position The position to scroll the element to.\n   * @returns {PrimeElement} This Element.\n   */\n  scrollLeftTo(position) {\n    this.domElement.scrollLeft = position;\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the given vertical position.\n   *\n   * @param {number} position The position to scroll the element to.\n   * @returns {PrimeElement} This Element.\n   */\n  scrollTo(position) {\n    this.domElement.scrollTop = position;\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the bottom.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  scrollToBottom() {\n    this.domElement.scrollTop = this.domElement.scrollHeight;\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the top.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  scrollToTop() {\n    this.domElement.scrollTop = 0;\n    return this;\n  }\n\n  /**\n   * Sets an attribute of the Element.\n   *\n   * @param {string} name The attribute name\n   * @param {number|string} value The attribute value\n   * @returns {PrimeElement} This Element.\n   */\n  setAttribute(name, value) {\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n    if (this.domElement.setAttribute) {\n      this.domElement.setAttribute(name, value);\n    } else {\n      const attribute = document.createAttribute(name);\n      attribute.nodeValue = value;\n      this.domElement.setAttributeNode(attribute);\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets a data- attribute of the Element.\n   *\n   * Example: setDataAttribute('fooBar', 'baz');\n   *  is equivalent to calling setAttribute('data-foo-bar', 'baz');\n   *\n   * @param {string} name The attribute name\n   * @param {number|string} value The attribute value\n   * @returns {PrimeElement} This Element.\n   */\n  setDataAttribute(name, value) {\n    const dataName = 'data-' + name.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n    return this.setAttribute(dataName, value);\n  }\n\n  /**\n   * Sets multiple attributes of the Element from the hash\n   *\n   * @param {Object} attributes An object of key value style pairs.\n   * @returns {PrimeElement} This Element.\n   */\n  setAttributes(attributes) {\n    for (let key in attributes) {\n      if (attributes.hasOwnProperty(key)) {\n        this.setAttribute(key, attributes[key]);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n   * value.\n   *\n   * @param {boolean} value The value to set the checked state of this element to.\n   * @returns {PrimeElement} This Element.\n   */\n  setChecked(value) {\n    this.domElement.checked = value;\n    return this;\n  }\n\n  /**\n   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n   *\n   * @param {boolean} value The value to set the disabled state of this element to.\n   * @returns {PrimeElement} This Element.\n   */\n  setDisabled(value) {\n    this.domElement.disabled = value;\n    return this;\n  }\n\n  /**\n   * Sets the height of this element using the height style.\n   *\n   * @param {number|string} height The new height as a number (for pixels) or string.\n   * @returns {PrimeElement} This Element.\n   */\n  setHeight(height) {\n    if (typeof(height) === 'number') {\n      height = height + 'px';\n    }\n\n    this.setStyle('height', height);\n    return this;\n  }\n\n  /**\n   * Sets the inner HTML content of the Element.\n   *\n   * @param {string|PrimeElement} newHTML The new HTML content for the Element.\n   * @returns {PrimeElement} This Element.\n   */\n  setHTML(newHTML) {\n    if (newHTML !== null) {\n      if (newHTML instanceof PrimeElement) {\n        this.domElement.innerHTML = newHTML.getHTML();\n      } else {\n        this.domElement.innerHTML = newHTML;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the ID of the Element.\n   *\n   * @param {string} id The ID.\n   * @returns {PrimeElement} This Element.\n   */\n  setId(id) {\n    this.domElement.id = id;\n    return this;\n  }\n\n  /**\n   * Sets left position of the element.\n   *\n   * @param {number|string} left The left position of the element in pixels or as a string.\n   * @returns {PrimeElement} This Element.\n   */\n  setLeft(left) {\n    let leftString = left;\n    if (typeof(left) === 'number') {\n      leftString = left + 'px';\n    }\n\n    this.setStyle('left', leftString);\n    return this;\n  }\n\n  /**\n   * Sets the opacity of the element. This also sets the IE alpha filter for IE version 9 or younger.\n   *\n   * @param {number} opacity The opacity.\n   * @returns {PrimeElement} This Element.\n   */\n  setOpacity(opacity) {\n    if (Browser.name === 'Explorer' && Browser.version < 9) {\n      this.domElement.style.filter = 'alpha(opacity=' + opacity + ')';\n    } else {\n      this.domElement.style.opacity = opacity;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the selected value on the element. If the element is not an option or radio, this does nothing.\n   *\n   * @param {boolean} selected Selected value.\n   */\n  setSelected(selected) {\n    this.domElement.selected = selected;\n  }\n\n  /**\n   * Sets the selected value(s) of this element. This works on selects, checkboxes, and radio buttons.\n   *\n   * @param {string} [arguments] The value(s) to select (var args).\n   * @returns {PrimeElement} This Element.\n   */\n  setSelectedValues() {\n    // Handle the case where they passed in an array\n    let values = null;\n    if (arguments.length === 1 && Utils.isArray(arguments[0])) {\n      values = arguments[0];\n    } else {\n      values = Array.prototype.slice.call(arguments, 0);\n    }\n\n    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n      const name = this.domElement.name;\n      const form = PrimeDocument.queryUp('form', this.domElement);\n      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n        element.setChecked(values.indexOf(element.getValue()) !== -1);\n      });\n    } else if (this.domElement.tagName === 'SELECT') {\n      for (let i = 0; i < this.domElement.length; i++) {\n        this.domElement.options[i].selected = values.indexOf(this.domElement.options[i].value) !== -1;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the style for the name of this Element.\n   *\n   * @param {string} name The style name.\n   * @param {number|string} value The style value.\n   * @returns {PrimeElement} This Element.\n   */\n  setStyle(name, value) {\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n    this.domElement.style[name] = value;\n    return this;\n  }\n\n  /**\n   * Sets multiple styles of this Element.\n   *\n   * @param {Object} styles An object with key value pairs for the new style names and values.\n   * @returns {PrimeElement} This Element.\n   */\n  setStyles(styles) {\n    for (let key in styles) {\n      if (styles.hasOwnProperty(key)) {\n        this.setStyle(key, styles[key]);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the textContent of the Element.\n   *\n   * @param {number|string|PrimeElement} newText The new text content for the Element.\n   * @returns {PrimeElement} This Element.\n   */\n  setTextContent(newText) {\n    if (newText !== null) {\n      if (newText instanceof PrimeElement) {\n        this.domElement.textContent = newText.getTextContent();\n      } else {\n        if (typeof newText === 'number') {\n          newText = newText.toString();\n        }\n        this.domElement.textContent = newText;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets top position of the element.\n   *\n   * @param {number|string} top The top position of the element in pixels or as a string.\n   * @returns {PrimeElement} This Element.\n   */\n  setTop(top) {\n    let topString = top;\n    if (typeof(top) === 'number') {\n      topString = top + 'px';\n    }\n\n    this.setStyle('top', topString);\n    return this;\n  }\n\n  /**\n   * Sets the value of this Element. This handles checkboxes, radio buttons, options, text inputs and text areas. This\n   * works on checkboxes and radio buttons, but it change the value attribute on them rather than checking and unchecking\n   * the buttons themselves. To check and uncheck the buttons, use the select method.\n   *\n   * @param {number|string} value The new value.\n   * @returns {PrimeElement} This Element.\n   */\n  setValue(value) {\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n    this.domElement.value = value;\n    return this;\n  }\n\n  /**\n   * Sets the width of this element using the height style.\n   *\n   * @param {number|string} width The new width as a number (for pixels) or string.\n   * @returns {PrimeElement} This Element.\n   */\n  setWidth(width) {\n    if (typeof(width) === 'number') {\n      width = width + 'px';\n    }\n\n    this.setStyle('width', width);\n    return this;\n  }\n\n  /**\n   * Shows the Element by setting the display style first to empty string. After this, the elements computed style is\n   * checked to see if the element is still not visible. If that is true, the element must have a CSS style defined in\n   * a stylesheet that is setting it to display: none. In this case, we determine if the element is a block level element\n   * and either set the display to 'block' or 'inline'.\n   *\n   * @param {string} [displayValue] The display value to use for the show. This defaults to the W3C standard display\n   * setting depending on the type of element you are showing. For example, INPUT is inline and DIV is block.\n   * @returns {PrimeElement} This Element.\n   */\n  show(displayValue) {\n    if (Utils.isDefined(displayValue)) {\n      this.domElement.style.display = displayValue;\n      return this;\n    }\n\n    this.domElement.style.display = '';\n\n    const computedDisplay = this.getComputedStyle()['display'];\n    if (computedDisplay === 'none') {\n      if (!Utils.isDefined(displayValue)) {\n        displayValue = (PrimeElement.blockElementRegexp.test(this.domElement.tagName)) ? 'block' : 'inline';\n      }\n\n      this.domElement.style.display = displayValue;\n    }\n\n    return this;\n  }\n\n  /**\n   * Toggle the class on this element.\n   *\n   * @param {string} className The class name.\n   * @returns {PrimeElement} This Element.\n   */\n  toggleClass(className) {\n    if (this.hasClass(className)) {\n      this.removeClass(className);\n    } else {\n      this.addClass(className);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes this element from the DOM while preserving the inner HTML.\n   *\n   * Example, call unwrap on the italic element:\n   *   <strong>Hello</strong><italic> World </italic> --> <strong>Hello</strong> World\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  unwrap() {\n    const parent = this.getParent().domElement;\n    while (this.domElement.firstChild) {\n      parent.insertBefore(this.domElement.firstChild, this.domElement);\n    }\n\n    this.removeFromDOM();\n  }\n\n  /**\n   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n   *\n   * @param {string} elementString The element string.\n   * @param {Object} [properties={}] The properties for the new element.\n   * @returns {PrimeElement} A new PrimeElement.\n   */\n  wrapInnerHTML(elementString, properties) {\n    const element = PrimeDocument.newElement(elementString, properties);\n    element.setHTML(this.getOuterHTML());\n    this.domElement.outerHTML = element.domElement.outerHTML;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Removes the event listener proxy from this element.\n   *\n   * @param {string} event The event name.\n   * @param {Function} listener The listener function.\n   * @private\n   */\n  _internalRemoveEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      if (this.domElement.removeEventListener) {\n        this.domElement.removeEventListener(event, listener, false);\n      } else if (this.domElement.detachEvent) {\n        this.domElement.detachEvent('on' + event, listener);\n      } else {\n        throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n      }\n    } else if (this.domElement.customEventListeners && this.domElement.customEventListeners[event]) {\n      // Custom event\n      const customListeners = this.domElement.customEventListeners[event];\n      Utils.removeFromArray(customListeners, listener);\n    }\n  }\n}\n\n\n/* ===================================================================================================================\n * Polyfill\n * ===================================================================================================================*/\n\n(function() {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = function(selector) {\n      const domElement = this;\n      const matches = (domElement.parentNode || domElement.document).querySelectorAll(selector);\n      let i = 0;\n\n      while (matches[i] && matches[i] !== domElement) {\n        i++;\n      }\n\n      return !!matches[i];\n    };\n  }\n})();\n\nexport {PrimeElement};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"./PrimeElement\";\nimport {Utils} from \"../Utils\";\n\nclass PrimeElementList {\n  /**\n   * Constructs an PrimeElementList object using the given array containing DOMElements or PrimeElement objects, or the NodeList containing Node objects.\n   *\n   * @constructor\n   * @param {Array|NodeList} elements An array containing DOMElement or PrimeElement objects, or a NodeList containing Node objects.\n   */\n  constructor(elements) {\n    Utils.bindAll(this);\n\n    // NodeList does not inherit from Array so do not assume object type.\n    this.length = elements.length;\n    for (let i = 0; i < elements.length; i++) {\n      if (elements[i] instanceof PrimeElement) {\n        this[i] = elements[i];\n      } else {\n        this[i] = new PrimeElement(elements[i]);\n      }\n    }\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.addClass} on each Element in the PrimeElementList.\n   *\n   * Adds the given class (or list of space separated classes) to all Elements in this PrimeElementList.\n   *\n   * @param {string} classNames The class name(s) separated by a space.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  addClass(classNames) {\n    return this._proxyToElement('addClass', classNames);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.addEventListener} on each Element in the PrimeElementList.\n   *\n   * Attaches an event listener to all Elements in this PrimeElementList.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event listener function.\n   * @returns {PrimeElement|PrimeElementList} This Element.\n   */\n  addEventListener(event, listener) {\n    return this._proxyToElement('addEventListener', event, listener);\n  }\n\n  /**\n   * Iterates over each of the PrimeElement objects in this PrimeElementList and calls the given function for each one.\n   * The <code>this</code> variable inside the function will be managed by the caller of this method. You should use the\n   * <code>bind</code> method on the Function object if you want to manage the <code>this</code> reference.\n   *\n   * The function can optionally take two parameters. The first parameter is the current element. The second parameter\n   * is the current index.\n   *\n   * @param {Function} iterationFunction The function to call.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  each(iterationFunction) {\n    for (let i = 0; i < this.length; i++) {\n      iterationFunction(this[i], i);\n    }\n\n    return this;\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.hide} on each Element in the PrimeElementList.\n   *\n   * Hides the Element by setting the display style to none.\n   *\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  hide() {\n    return this._proxyToElement('hide');\n  }\n\n  /**\n   * Returns the indexOf the element that matches the parameter, either Prime Element or DOMElement.\n   *\n   * @param {PrimeElement|Element} element The element to look for\n   * @returns {number} The position of the element in the list, or -1 if not present.\n   */\n  indexOf(element) {\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\n    for (let i = 0; i < this.length; i++) {\n      if (this[i].domElement === domElement) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Removes all the matched elements in the PrimeElementList from the DOM.\n   *\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  removeAllFromDOM() {\n    for (let i = 0; i < this.length; i++) {\n      this[i].removeFromDOM();\n    }\n\n    return this;\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.removeClass} on each Element in the PrimeElementList.\n   *\n   * Removes the given class (or list of space separated classes) from all Elements in this PrimeElementList.\n   *\n   * @param {string} classNames The class name(s) separated by a space.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  removeClass(classNames) {\n    return this._proxyToElement('removeClass', classNames);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.setChecked} on each Element in the PrimeElementList.\n   *\n   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n   * value.\n   *\n   * @param {boolean} value The value to set the checked state of this element to.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  setChecked(value) {\n    return this._proxyToElement('setChecked', value);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.setDisabled} on each Element in the PrimeElementList.\n   *\n   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n   *\n   * @param {boolean} value The value to set the disabled state of this element to.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  setDisabled(value) {\n    return this._proxyToElement('setDisabled', value);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.show} on each Element in the PrimeElementList.\n   *\n   * Shows the element.\n   *\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  show() {\n    return this._proxyToElement('show');\n  }\n\n  /**\n   * @callback PrimeElementListPredicate\n   *\n   * A function that defines a condition on a PrimeElement\n   *\n   * @param {PrimeElement} element\n   * @returns {boolean} True if the element matches a condition\n   */\n\n  /**\n   * A function that tests for any element that matches a condition.\n   * @param {PrimeElementListPredicate} predicate A function that defines the condition to check\n   * @returns {boolean} True if any element matches the predicate\n   */\n  some(predicate) {\n    for (let i = 0; i < this.length; ++i) {\n      if (predicate(this[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Proxy function calls to each Element in the PrimeElementList.\n   * The first parameter is function name, followed by a variable length of arguments.\n   *\n   * Example usage: this._proxyToElement('addClass', classNames);\n   *\n   * @returns {PrimeElementList}\n   * @private\n   */\n  _proxyToElement() {\n    const args = Array.prototype.slice.apply(arguments);\n    for (let i = 0; i < this.length; i++) {\n      this[i][args[0]].apply(this[i], args.slice(1));\n    }\n    return this;\n  }\n}\n\nexport {PrimeElementList}\n","/*\n * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElementList} from \"./Document/PrimeElementList\";\nimport {PrimeElement} from \"./Document/PrimeElement\";\nimport {Utils} from \"./Utils\";\n\nconst readyFunctions = [];\nconst tagRegexp = /^<(\\w+)\\s*\\/?>.*(?:<\\/\\1>)?$/;\n\n/**\n * The Body element as a PrimeElement object.\n *\n * @type {?PrimeElement}\n */\nlet bodyElement = null;\n\nclass PrimeDocument {\n\n  /**\n   * @returns {PrimeElement}\n   */\n  static get Element() {\n    return PrimeElement;\n  }\n\n  /**\n   * @returns {PrimeElementList}\n   */\n  static get ElementList() {\n    return PrimeElementList;\n  }\n\n  /**\n   * @returns {Array<Function>}\n   */\n  static get readyFunctions() {\n    return readyFunctions;\n  }\n\n  /**\n   * @returns {RegExp}\n   */\n  static get tagRegexp() {\n    return tagRegexp;\n  }\n\n  /**\n   * @returns {?PrimeElement} the Prime body element\n   */\n  static get bodyElement() {\n    if (bodyElement === null) {\n      bodyElement = new PrimeElement(document.body);\n    }\n    return bodyElement;\n  }\n\n  /**\n   * Set the body element\n   * @param {?PrimeElement} body the Prime body element\n   */\n  static set bodyElement(body) {\n    bodyElement = body;\n  }\n\n  /**\n   * Attaches an event listener to the document body and will only invoke the listener when the event target matches\n   * the provided selector.\n   *\n   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n   *\n   * @param {string} event The name of the event\n   * @param  {string} selector The selector to match against the Element\n   * @param {Function} listener The event listener function\n   */\n  static addDelegatedEventListener(event, selector, listener) {\n    PrimeDocument.bodyElement.addDelegatedEventListener(event, selector, listener);\n  }\n\n  /**\n   * Attaches an event listener to the document, returning the handler proxy.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event listener function.\n   * @returns {PrimeDocument} The PrimeDocument object so you can chain method calls together.\n   */\n  static addEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      document.eventListeners = document.eventListeners || {};\n      document.eventListeners[event] = document.eventListeners[event] || [];\n      document.eventListeners[event].push(listener);\n      document.addEventListener(event, listener, false);\n    } else {\n      // Custom event\n      document.customEventListeners = document.customEventListeners || {};\n      document.customEventListeners[event] = document.customEventListeners[event] || [];\n      document.customEventListeners[event].push(listener);\n    }\n\n    return PrimeDocument;\n  }\n\n  /**\n   * Returns the height of the document.\n   *\n   * @returns {number} The height of the document in pixels.\n   */\n  static getHeight() {\n    const body = document.body;\n    const html = document.documentElement;\n\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n  /**\n   * Returns the width of the document.\n   *\n   * @returns {number} The width of the document in pixels.\n   */\n  static getWidth() {\n    const body = document.body;\n    const html = document.documentElement;\n\n    return Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);\n  }\n\n  /**\n   * Builds a new document using the given HTML document.\n   *\n   * @param {string} documentString The HTML string to build the document.\n   * @returns {Document} A new document.\n   */\n  static newDocument(documentString) {\n    return new DOMParser().parseFromString(documentString, \"text/html\");\n  }\n\n  /**\n   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n   *\n   * @param {string} elementString The element string.\n   * @param {Object} [properties={}] The properties for the new element.\n   * @returns {PrimeElement} A new PrimeElement.\n   */\n  static newElement(elementString, properties) {\n    properties = Utils.isDefined(properties) ? properties : {};\n    const result = PrimeDocument.tagRegexp.exec(elementString);\n    if (result === null) {\n      throw new TypeError('Invalid string to create a new element [' + elementString + ']. It should look like <a/>');\n    }\n\n    const element = new PrimeElement(document.createElement(result[1]));\n    for (let key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        if (key === 'id') {\n          element.setId(properties[key]);\n        } else {\n          element.setAttribute(key, properties[key]);\n        }\n      }\n    }\n\n    return element;\n  }\n\n  /**\n   * Adds the given callback function to the list of functions to invoke when the document is ready. If the document is\n   * already fully loaded, this simply invokes the callback directly.\n   *\n   * @param {Function} callback The callback function.\n   */\n  static onReady(callback) {\n    if (document.readyState === 'complete') {\n      callback();\n    } else {\n      // If this is the first call, register the event listener on the document\n      if (this.readyFunctions.length === 0) {\n        if (document.addEventListener) {\n          document.addEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n        } else if (document.attachEvent) {\n          document.attachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n        } else {\n          throw new TypeError('No way to attach an event to the document. What browser are you running?');\n        }\n      }\n\n      // Add the callback\n      PrimeDocument.readyFunctions.push(callback);\n    }\n  }\n\n  /**\n   * Take the HTML string and append it to the body.\n   *\n   * @param {string} html The HTML to append\n   */\n  static appendHTML(html) {\n    document.body.insertAdjacentHTML('beforeend', html);\n  }\n\n  /**\n   * Moves the given element by appending it to the element provided by the second argument.\n   *\n   * @param {Element|PrimeElement} element The element to move.\n   * @param {Element|PrimeElement} appendToElement [appendToElement=body] The element to append to, defaults to the body if not provided.\n   * @returns {PrimeElement} The element that has been moved.\n   */\n  static move(element, appendToElement) {\n    element = (element instanceof PrimeElement) ? element : new PrimeElement(element);\n\n    if (!Utils.isDefined(appendToElement)) {\n      appendToElement = new PrimeElement(document.body);\n    } else {\n      appendToElement = (appendToElement instanceof PrimeElement) ? appendToElement : new PrimeElement(appendToElement);\n    }\n\n    appendToElement.appendHTML(element.getOuterHTML());\n    element.removeFromDOM();\n    return appendToElement.getLastChild();\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at the given element and returns all the matched elements.\n   *\n   * @param {string} selector The selector.\n   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n   * @returns {PrimeElementList} An element list.\n   */\n  static query(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      domElement = document;\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    const elements = domElement.querySelectorAll(selector);\n    return new PrimeElementList(elements);\n  }\n\n  /**\n   * Queries the DOM for an element that has the given ID.\n   *\n   * @param {string} id The ID.\n   * @returns {PrimeElement} The element or null.\n   */\n  static queryById(id) {\n    let element = document.getElementById(id);\n    if (!element) {\n      return null;\n    }\n\n    return new PrimeElement(element);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at the given element and returns the first matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n   * @returns {PrimeElement} An element or null.\n   */\n  static queryFirst(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      domElement = document;\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    domElement = domElement.querySelector(selector);\n    if (domElement === null) {\n      return null;\n    }\n\n    return new PrimeElement(domElement);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at the given element and returns the last matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n   * @returns {PrimeElement} An element or null.\n   */\n  static queryLast(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      domElement = document;\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    const domElements = domElement.querySelectorAll(selector);\n    if (domElements.length === 0) {\n      return null;\n    }\n\n    return new PrimeElement(domElements[domElements.length - 1]);\n  }\n\n  /**\n   * Traverses up the DOM from the starting element and looks for a match to the selector.\n   *\n   * @param {string} selector The selector.\n   * @param {PrimeElement|Element} element The starting point for the upward traversal.\n   * @returns {PrimeElement} An element or null.\n   */\n  static queryUp(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      throw new SyntaxError('Missing required parameter. The element is required.');\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    domElement = domElement.parentNode;\n    while (domElement !== null && !domElement.matches(selector)) {\n      domElement = domElement.parentNode;\n      if (domElement === document) {\n        domElement = null;\n      }\n    }\n\n    if (domElement !== null) {\n      return new PrimeElement(domElement);\n    }\n\n    return null;\n  }\n\n  /**\n   * Removes an event handler for a specific event from the document that you attached using addEventListener\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The listener function.\n   */\n  static removeEventListener(event, listener) {\n    if (document.removeEventListener) {\n      document.removeEventListener(event, listener, false);\n    } else if (document.detachEvent) {\n      document.detachEvent('on' + event, listener);\n    } else {\n      throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n    }\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Calls all the registered document ready listeners.\n   *\n   * @private\n   */\n  static _callReadyListeners() {\n    if (document.addEventListener || document.readyState === 'complete') {\n      let readyFunction;\n      while (readyFunction = PrimeDocument.readyFunctions.shift()) {\n        readyFunction();\n      }\n    }\n\n    if (document.removeEventListener) {\n      document.removeEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n    } else {\n      document.detachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n    }\n  }\n}\n\n/* ===================================================================================================================\n * Polyfill\n * ===================================================================================================================*/\n\n/* https://developer.mozilla.org/en-US/docs/Web/API/DOMParser */\n(function(DOMParser) {\n  const proto = DOMParser.prototype;\n  const nativeParse = proto.parseFromString;\n\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if ((new DOMParser()).parseFromString('', 'text/html')) {\n      // text/html parsing is natively supported\n      return;\n    }\n  } catch (ex) {\n  }\n\n  proto.parseFromString = function(markup, type) {\n    if (/^\\s*text\\/html\\s*(?:;|$)/i.test(type)) {\n      const doc = document.implementation.createHTMLDocument('');\n      if (markup.toLowerCase().indexOf('<!doctype') > -1) {\n        doc.documentElement.innerHTML = markup;\n      } else {\n        doc.body.innerHTML = markup;\n      }\n      return doc;\n    } else {\n      return nativeParse.apply(this, arguments);\n    }\n  };\n}(DOMParser));\n\nexport {PrimeDocument};\n","/*\n * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"./PrimeDocument\";\n\n/**\n * The Utils namespace. This contains utility functions.\n *\n * @namespace Utils\n */\nconst Utils = {\n  spaceRegex: /\\s+/,\n  typeRegex: /^\\[object\\s(.*)\\]$/,\n\n  /**\n   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n   * references manually you can instead bind all of the functions in the object and then use them directly for event\n   * listeners.\n   *\n   * Here's an example:\n   *\n   * <pre>\n   *   function Foo() {\n   *     Utils.bindAll(this);\n   *\n   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n   *   }\n   *\n   *   Foo.prototype = {\n   *     handleClick: function(event) {\n   *       ...\n   *     }\n   *   };\n   * </pre>\n   *\n   * @param {*} object The object to bind all the functions for.\n   */\n  bindAll: function(object) {\n    Utils.getAllPropertyNames(object).forEach((property) => {\n      if (property !== 'constructor' && typeof object[property] === 'function' &&\n          !(object[property].name && object[property].name.startsWith('bound '))) { // name isn't defined in ie\n        Object.defineProperty(object, property, {value: object[property].bind(object)});\n      }\n    });\n  },\n\n  /**\n   * HTML escape a string.\n   *\n   * @param string The string to escape\n   * @returns {string} the escaped string\n   */\n  escapeHTML: function(string) {\n    let div = document.createElement('div');\n    div.appendChild(document.createTextNode(string));\n    return div.innerHTML;\n  },\n\n  /**\n   * Returns all of the properties for this object and all of its\n   * inherited properties from parent objects.\n   *\n   * @param object\n   * @returns {Array<string>}\n   */\n  getAllPropertyNames: function(object) {\n    let props = {};\n\n    do {\n      Object.getOwnPropertyNames(object).forEach((prop) => {\n        if (!props[prop]) {\n          props[prop]=prop;\n        }\n      })\n    } while (object = Object.getPrototypeOf(object));\n\n    return Object.keys(props);\n  },\n\n  /**\n   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n   * references manually you can instead bind all of the functions in the object and then use them directly for event\n   * listeners.\n   *\n   * Here's an example:\n   *\n   * <pre>\n   *   function Foo() {\n   *     Utils.bindAll(this);\n   *\n   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n   *   }\n   *\n   *   Foo.prototype = {\n   *     handleClick: function(event) {\n   *       ...\n   *     }\n   *   };\n   * </pre>\n   *\n   * @param {*} object The object to bind all the functions for.\n   * @param {String} arguments A varargs list of function names to bind.\n   */\n  bindSome: function(object) {\n    if (arguments.length > 1) {\n      for (let i = 1; i < arguments.length; i++) {\n        const func = object[arguments[i]];\n        if (!Utils.isDefined(func) || !(func instanceof Function)) {\n          throw new TypeError('The object does not contain a function named [' + arguments[i] + ']');\n        }\n\n        object[arguments[i]] = func.bind(object);\n      }\n    }\n    for (let property in object) {\n      if (object[property] instanceof Function) {\n        object[property] = object[property].bind(object);\n      }\n    }\n  },\n\n  /**\n   * Safely binds a function to a context.\n   *\n   * @param {Function} func The function to bind.\n   * @param {Object} [context] An optional context to bind the function to.\n   * @returns {Function} Either <code>func</code> or the newly bound function.\n   */\n  bindSafe: function(func, context) {\n    if (!Utils.isDefined(func)) {\n      throw new Error('Invalid arguments');\n    }\n\n    if (!Utils.isDefined(context)) {\n      return func;\n    }\n\n    return func.bind(context);\n  },\n\n  /**\n   * Calculates the length of the given text using the style of the given element.\n   *\n   * @param {PrimeElement} element The element to use the style of.\n   * @param {string} text The text to calculate the length of.\n   * @returns {number} The length of the text.\n   */\n  calculateTextLength: function(element, text) {\n    const computedStyle = element.getComputedStyle();\n    let textCalculator = PrimeDocument.queryById('prime-text-calculator');\n    if (textCalculator === null) {\n      textCalculator = PrimeDocument.newElement('<span/>')\n          .setStyles({\n            position: 'absolute',\n            width: 'auto',\n            fontSize: computedStyle['fontSize'],\n            fontFamily: computedStyle['fontFamily'],\n            fontWeight: computedStyle['fontWeight'],\n            letterSpacing: computedStyle['letterSpacing'],\n            whiteSpace: 'nowrap'\n          })\n          .setId('prime-text-calculator')\n          .setTop(-9999)\n          .setLeft(-9999)\n          .appendTo(document.body);\n    }\n\n    textCalculator.setHTML(text);\n    return textCalculator.getWidth();\n  },\n\n  /**\n   * Attempts to invoke a function iteratively in the background a specific number of times within a specific duration.\n   * This might not complete in the specified duration. The functions passed in should be short functions that return as\n   * quickly as possible. If you are using long functions, use the recursive setTimeout trick by-hand instance.\n   *\n   * @param {number} totalDuration The duration in milliseconds.\n   * @param {number} timesToCall The number of times to call the function.\n   * @param {Function} stepFunction The step function to call each iteration.\n   * @param {Function} [endFunction] The function to invoke at the end.\n   */\n  callIteratively: function(totalDuration, timesToCall, stepFunction, endFunction) {\n    const step = totalDuration / timesToCall;\n    let count = 0;\n    const id = setInterval(function() {\n      count++;\n      const last = (count >= timesToCall);\n      stepFunction(last);\n      if (last) {\n        clearInterval(id);\n\n        if (Utils.isDefined(endFunction)) {\n          endFunction();\n        }\n      }\n    }, step - 1);\n  },\n\n  /**\n   * Capitalizes the given String.\n   *\n   * @param {string} str The String to capitalize.\n   * @returns {string} The capitalized String.\n   */\n  capitalize: function(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n  },\n\n  /**\n   * Converts CSS style names to style JavaScript names.\n   *\n   * @param {string} name The CSS style name to convert\n   * @returns {string} The converted style name.\n   */\n  convertStyleName: function(name) {\n    if (name === 'float') {\n      return 'cssFloat';\n    }\n\n    let dash = name.indexOf('-');\n    if (dash === -1) {\n      return name;\n    }\n\n    let start = 0;\n    let result = '';\n    while (dash !== -1) {\n      const piece = name.substring(start, dash);\n      if (start === 0) {\n        result = result.concat(piece);\n      } else {\n        result = result.concat(Utils.capitalize(piece));\n      }\n\n      start = dash + 1;\n      dash = name.indexOf('-', start);\n    }\n\n    return result + Utils.capitalize(name.substring(start));\n  },\n\n  /**\n   * Return an options map {Object} of the data set values coerced to a typed value of boolean, string or number.\n   *\n   * @param {PrimeElement} element The element.\n   * @returns {Object} The options object.\n   */\n  dataSetToOptions: function(element) {\n    const options = {};\n    const data = element.getDataSet();\n    for (let prop in data) {\n      if (!data.hasOwnProperty(prop)) {\n        continue;\n      }\n      const value = data[prop];\n      if (isNaN(value)) {\n        if (value === 'true') {\n          options[prop] = true;\n        } else if (value === 'false') {\n          options[prop] = false;\n        } else {\n          options[prop] = value;\n        }\n      } else {\n        options[prop] = parseInt(value);\n      }\n    }\n\n    return options;\n  },\n\n  /**\n   * Determines if an object is an array or not.\n   *\n   * @param {*} o The object to check.\n   * @returns {boolean} True if the object is an array, false otherwise.\n   */\n  isArray: function(o) {\n    return Object.prototype.toString.call(o) === '[object Array]';\n  },\n\n  /**\n   * Tests whether or not the value is not null and not 'undefined'.\n   *\n   * @param {*} value The value to test.\n   * @returns {boolean} True if the value is defined (not null or undefined).\n   */\n  isDefined: function(value) {\n    return value !== null && typeof(value) !== 'undefined';\n  },\n\n  /**\n   * Left pad a number.\n   * @param {number} number the number to pad\n   * @param {number} width the width of the final result\n   * @returns {string}\n   */\n  leftPadNumber: function(number, width) {\n    const sign = Math.sign(number) === -1 ? '-' : '';\n    return sign + new Array(width).concat([Math.abs(number)]).join('0').slice(-width);\n  },\n\n  /**\n   * Parses a CSS measure value (12px) as an integer.\n   *\n   * @param {string} measure The CSS measure\n   * @returns {number} The value as an integer.\n   */\n  parseCSSMeasure: function(measure) {\n    const index = measure.indexOf('px');\n    if (index > 0) {\n      return parseInt(measure.substring(0, measure.length - 2));\n    }\n\n    return parseInt(measure) || 0;\n  },\n\n  /**\n   * Parses JSON.\n   *\n   * @param {string} json The JSON.\n   * @returns {Object} The JSON data as an object.\n   */\n  parseJSON: function(json) {\n    return JSON.parse(json);\n  },\n\n  /**\n   * Removes the objects in the toRemove array from the fromArray.\n   *\n   * @param {Array} fromArray The array to remove from.\n   * @param {Array} toRemove The values to remove.\n   */\n  removeAllFromArray: function(fromArray, toRemove) {\n    for (let i = 0; i < toRemove.length; i++) {\n      Utils.removeFromArray(fromArray, toRemove[i]);\n    }\n  },\n\n  /**\n   * Removes the given object from the given array.\n   *\n   * @param {Array} array The array to remove from.\n   * @param {*} obj The object to remove.\n   */\n  removeFromArray: function(array, obj) {\n    const index = array.indexOf(obj);\n    if (index !== -1) {\n      const shift = array.splice(index + 1, array.length);\n      array.length = index;\n      array.push.apply(array, shift);\n    }\n  },\n\n  /**\n   * Helper function to provide a one liner to behave as if you returned 'false' from a legacy version of Prime.js.\n   *\n   * Calling this method is equivalent to calling event.preventDefault and event.stopPropagation.\n   * @param event\n   */\n  stopEvent: function(event) {\n    // Compatibility with older versions of IE\n    event.cancelBubble = true;\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    }\n    if (event.preventDefault) {\n      event.preventDefault();\n    }\n  },\n\n  type: function(object) {\n    return Object.prototype.toString.call(object).match(Utils.typeRegex)[1];\n  }\n};\n\nexport {Utils};\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nimport {Utils} from \"../Utils\";\nimport {PrimeDocument} from \"../PrimeDocument\";\n\n/**\n * The singleton instance.\n *\n * @type {Overlay}\n */\nlet instance;\n\nclass Overlay {\n  /**\n   * Constructs a new Overlay instance once per DOM.\n   *\n   * @constructor\n   */\n  constructor() {\n    Utils.bindAll(this);\n\n    // Check if the overlay doesn't exist and add it\n    this.overlay = PrimeDocument.queryById('prime-overlay');\n    if (this.overlay === null) {\n      this.overlay = PrimeDocument.newElement('<div/>').setId('prime-overlay').appendTo(document.body).hide();\n    }\n    this.bodyOverflow = null;\n  }\n\n  /**\n   * Return the instance of the Overlay widget\n   * @returns {Overlay}\n   */\n  static get instance() {\n    return instance;\n  }\n\n  /**\n   * Set the instance value of the Overlay instance\n   * @param  value {Overlay}\n   */\n  static set instance(value) {\n    instance = value;\n  }\n\n  /**\n   * Closes the overlay and the target element.\n   */\n  close() {\n    // using null ensures that if this style is not defined, we'll remove it when we're done\n    let overflowStyle = this.bodyOverflow || '';\n    PrimeDocument.bodyElement.setStyle('overflow', overflowStyle);\n    this.overlay.setStyle('zIndex', '10');\n    this.overlay.hide();\n    return this;\n  }\n\n  /**\n   * Opens the overlay and positions the element over it.\n   * @param zIndex {Number|string}\n   */\n  open(zIndex) {\n    if (this.bodyOverflow === null) {\n      this.bodyOverflow = PrimeDocument.bodyElement.getStyle('overflow');\n    }\n    PrimeDocument.bodyElement.setStyle('overflow', 'hidden');\n    this.overlay.show();\n\n    // Set the z-index of this dialog and the overlay\n    this.overlay.setStyle('zIndex', zIndex.toString());\n    return this;\n  }\n\n  /**\n   * Changes the id of the Overlay element.\n   *\n   * @param id {string} The new id.\n   * @returns {Overlay}\n   */\n  setId(id) {\n    this.overlay.setId(id);\n    return this;\n  }\n\n  /**\n   * Updates the zindex of the overlay.\n   *\n   * @param zIndex {string|number} The new zIndex.\n   */\n  setZIndex(zIndex) {\n    this.overlay.setStyle('zIndex', zIndex.toString());\n    return this;\n  }\n}\n\nPrimeDocument.onReady(function() {\n  Overlay.instance = new Overlay();\n});\n\nexport {Overlay};\n","/*\n * Copyright (c) 2014-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils\";\nimport {PrimeElement} from \"./Document/PrimeElement\";\n\nclass PrimeRequest {\n  /**\n   * Makes a new AJAX request.\n   *\n   * @constructor\n   * @param {string} [url] The URL to call. This can be left out for sub-classing but should otherwise be provided.\n   * @param {string} [method=GET] The HTTP method to use. You can specify GET, POST, PUT, DELETE, HEAD, SEARCH, etc.\n   */\n  constructor(url, method) {\n    Utils.bindAll(this);\n    this.xhr = new XMLHttpRequest();\n    this.async = true;\n    this.body = null;\n    this.queryParams = null;\n    this.contentType = null;\n    this.inProgress = null;\n    this.errorHandler = this.onError;\n    this.headers = {};\n    this.loadingHandler = this.onLoading;\n    this.method = method || 'GET';\n    this.openHandler = this.onOpen;\n    this.password = null;\n    this.sendHandler = this.onSend;\n    this.successHandler = this.onSuccess;\n    this.unsetHandler = this.onUnset;\n    this.url = url;\n    this.username = null;\n  }\n\n  /**\n   * Changes the URL to call.\n   *\n   * @param {string} url The new URL to call.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  forURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Invokes the AJAX request. If the URL is not set, this throws an exception.\n   *\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  go() {\n    if (!this.url) {\n      throw new TypeError('No URL set for AJAX request');\n    }\n\n    let requestUrl = this.url;\n    if ((this.method === 'GET' || this.method === 'DELETE') && this.queryParams !== null) {\n      if (requestUrl.indexOf('?') === -1) {\n        requestUrl += '?' + this.queryParams;\n      } else {\n        requestUrl += '&' + this.queryParams;\n      }\n    }\n\n    if (this.async) {\n      if (this.inProgress !== null) {\n        this.inProgress.open();\n      }\n\n      this.xhr.onreadystatechange = this._handler.bind(this);\n    }\n\n    this.xhr.open(this.method, requestUrl, this.async, this.username, this.password);\n\n    if (Object.keys(this.headers).length > 0) {\n      for (let key in this.headers) {\n        if (this.headers.hasOwnProperty(key)) {\n          this.xhr.setRequestHeader(key, this.headers[key]);\n        }\n      }\n    }\n\n    if (this.contentType) {\n      this.xhr.setRequestHeader('Content-Type', this.contentType);\n    }\n\n    this.xhr.send(this.body);\n\n    return this;\n  }\n\n  /**\n   * Default handler for the \"completed\" state and an HTTP response status of anything but 2xx. Sub-classes can override\n   * this handler or you can pass in a handler function to the {@link #withUnsetHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onError(xhr) {\n  }\n\n  /**\n   * Default handler for the \"loading\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withLoadingHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onLoading(xhr) {\n  }\n\n  /**\n   * Default handler for the \"open\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withOpenHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onOpen(xhr) {\n  }\n\n  /**\n   * Default handler for the \"send\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withSendHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onSend(xhr) {\n  }\n\n  /**\n   * Default handler for the \"complete\" state and an HTTP response status of 2xx. Sub-classes can override this handler\n   * or you can pass in a handler function to the {@link #withUnsetHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onSuccess(xhr) {\n  }\n\n  /**\n   * Default handler for the \"unset\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withUnsetHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onUnset(xhr) {\n  }\n\n  /**\n   * Sets the async flag to false.\n   *\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  synchronously() {\n    this.async = false;\n    return this;\n  }\n\n  /**\n   * Sets the method used to make the AJAX request.\n   *\n   * @param {string} method The HTTP method.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  usingMethod(method) {\n    this.method = method;\n    return this;\n  }\n\n  /**\n   * Sets the request body for the request.\n   *\n   * @param {string} body The request body.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withBody(body) {\n    this.body = body;\n    return this;\n  }\n\n  /**\n   * Sets the content type for the request.\n   *\n   * @param {string} contentType The contentType.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withContentType(contentType) {\n    this.contentType = contentType;\n    return this;\n  }\n\n  /**\n   * Sets the data object for the request. Will store the values for query parameters or post data depending on the\n   * method that is set.  If the method is a post or put, will also set content-type to x-www-form-urlencoded.\n   *\n   * @param {Object} data The data object.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withData(data) {\n    for (let prop in data) {\n      if (data.hasOwnProperty(prop)) {\n        if (this.method === 'PUT' || this.method === 'POST') {\n          this.body = this._addDataValue(this.body, prop, data[prop]);\n        } else {\n          this.queryParams = this._addDataValue(this.queryParams, prop, data[prop]);\n        }\n      }\n    }\n\n    if (this.method === \"PUT\" || this.method === \"POST\") {\n      this.contentType = 'application/x-www-form-urlencoded';\n    }\n    return this;\n  }\n\n  /**\n   * Sets the data for the request using the form fields in the given form element. Will store the values for query\n   * parameters or post data depending on the method that is set.  If the method is a post or put, will also set\n   * content-type to x-www-form-urlencoded.\n   *\n   * @param {PrimeElement|HTMLFormElement} form The form object.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withDataFromForm(form) {\n    let domElement = form;\n    if (form instanceof PrimeElement) {\n      domElement = form.domElement;\n    }\n\n    for (let i = 0; i < domElement.elements.length; i++) {\n      const primeElement = new PrimeElement(domElement.elements[i]);\n      if (primeElement.isDisabled() || !primeElement.isInput()) {\n        continue;\n      }\n\n      let type = primeElement.getAttribute('type');\n      if (type !== null) {\n        type = type.toLowerCase();\n      }\n\n      let values;\n      if (primeElement.getTagName() === 'SELECT') {\n        values = primeElement.getSelectedValues();\n      } else if ((type === 'radio' || type === 'checkbox') && !primeElement.isChecked()) {\n        continue;\n      } else {\n        values = primeElement.getValue();\n      }\n\n      const name = primeElement.domElement.name;\n      if (this.method === 'PUT' || this.method === 'POST') {\n        this.body = this._addDataValue(this.body, name, values)\n      } else {\n        this.queryParams = this._addDataValue(this.queryParams, name, values);\n      }\n    }\n\n    if (this.method === \"PUT\" || this.method === \"POST\") {\n      this.contentType = 'application/x-www-form-urlencoded';\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n   * not 2xx.\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withErrorHandler(func) {\n    this.errorHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets an InProgress object that will be called by this AJAX request.\n   *\n   * @param {InProgress} inProgress The InProgress object.\n   * @return {PrimeRequest} This.\n   */\n  withInProgress(inProgress) {\n    this.inProgress = inProgress;\n    return this;\n  }\n\n  /**\n   * Sets the body of the AJAX request to the string value of the provided JSON object. The content-type of the request\n   * will also be set to 'application/json'. The provided JSON object may be passed as a string or an object.\n   *\n   * @param {Object} json The JSON object.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withJSON(json) {\n    this.body = typeof(json) === String ? json : JSON.stringify(json);\n    this.contentType = 'application/json';\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"loading\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withLoadingHandler(func) {\n    this.loadingHandler = func;\n    return this;\n  }\n\n  /**\n   * Set the request headers using the key and value.\n   *\n   * @param {String} key The key name.\n   * @param {String} value The value.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withHeader(key, value) {\n    this.headers[key] = value;\n    return this;\n  }\n\n  /**\n   * Set the key value pairs provided as request headers.\n   *\n   * @param {Object} headers A map of key value pairs.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withHeaders(headers) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        this.headers[key] = headers[key];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the XMLHTTPRequest's response type field, which will control how the response is parsed.\n   *\n   * @param {string} responseType The response type.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withResponseType(responseType) {\n    this.xhr.responseType = responseType;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"open\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withOpenHandler(func) {\n    this.openHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"send\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withSendHandler(func) {\n    this.sendHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n   * 2xx.\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withSuccessHandler(func) {\n    this.successHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"unset\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withUnsetHandler(func) {\n    this.unsetHandler = func;\n    return this;\n  }\n\n  /**\n   * Resets the Request back to a base state (basically just the URL + method).  This can be\n   * useful if a component is going to make many requests to the same endpoint with different parameters.\n   *\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  reset() {\n    this.queryParams = null;\n    this.data = null;\n    this.body = null;\n    this.contentType = null;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Adds the given name-value pair to the given data String. If the value is an array, it adds multiple values for each\n   * piece. Otherwise, it assumes value is a String or can be converted to a String.\n   *\n   * @param {string} dataString The data String used to determine if an ampersand is necessary.\n   * @param {string} name The name of the name-value pair.\n   * @param {string|Array} value The value of the name-value pair.\n   * @returns {string} The new data string.\n   * @private\n   */\n  _addDataValue(dataString, name, value) {\n    let result = '';\n    if (value instanceof Array) {\n      for (let i = 0; i < value.length; i++) {\n        result += encodeURIComponent(name) + '=' + encodeURIComponent(value[i]);\n        if (i + 1 < value.length) {\n          result += '&';\n        }\n      }\n    } else {\n      result = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    }\n\n    if (dataString !== null && result !== '') {\n      result = dataString + '&' + result;\n    } else if (dataString !== null && result === '') {\n      result = dataString;\n    }\n\n    return result;\n  }\n\n  /**\n   * @private\n   */\n  _handler() {\n    if (this.xhr.readyState === 0) {\n      this.unsetHandler(this.xhr);\n    } else if (this.xhr.readyState === 1) {\n      this.openHandler(this.xhr);\n    } else if (this.xhr.readyState === 2) {\n      this.sendHandler(this.xhr);\n    } else if (this.xhr.readyState === 3) {\n      this.loadingHandler(this.xhr);\n    } else if (this.xhr.readyState === 4) {\n\n      // Call the InProgress before hand because the success handler might call another AJAX method that might open another InProgress\n      if (this.inProgress !== null) {\n        this.inProgress.close(function() {\n          if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n            this.successHandler(this.xhr);\n          } else {\n            this.errorHandler(this.xhr);\n          }\n        }.bind(this));\n      } else {\n        if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n          this.successHandler(this.xhr);\n        } else {\n          this.errorHandler(this.xhr);\n        }\n      }\n    }\n  }\n}\n\nexport {PrimeRequest};\n","/*\n * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nclass PrimeWindow {\n  /**\n   * Attaches an event listener to the window, returning the handler proxy.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event handler.\n   * @returns {Window} The window object.\n   */\n  static addEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      window.eventListeners = window.eventListeners || {};\n      window.eventListeners[event] = window.eventListeners[event] || [];\n      window.eventListeners[event].push(listener);\n      if (window.addEventListener) {\n        window.addEventListener(event, listener, false);\n      } else if (window.attachEvent) {\n        window.attachEvent('on' + event, listener);\n      } else {\n        throw new TypeError('Unable to set event onto the window. Neither addEventListener nor attachEvent methods are available');\n      }\n    } else {\n      // Custom event\n      window.customEventListeners = window.customEventListeners || {};\n      window.customEventListeners[event] = window.customEventListeners[event] || [];\n      window.customEventListeners[event].push(listener);\n    }\n\n    return window;\n  }\n\n  /**\n   * Returns the inner height of the window. This includes only the rendering area and not the window chrome (toolbars,\n   * status bars, etc). If this method can't figure out the inner height, it throws an exception.\n   *\n   * @returns {number} The inner height of the window.\n   */\n  static getInnerHeight() {\n    if (typeof(window.innerHeight) === 'number') {\n      // Most browsers\n      return window.innerHeight;\n    } else if (document.documentElement && document.documentElement.clientHeight) {\n      // IE 6+ in 'standards compliant mode'\n      return document.documentElement.clientHeight;\n    } else if (document.body && document.body.clientHeight) {\n      // IE 4 compatible\n      return document.body.clientHeight;\n    }\n\n    throw new Error('Unable to determine inner height of the window');\n  }\n\n  /**\n   * Returns the inner width of the window. This includes only the rendering area and not the window chrome (toolbars,\n   * status bars, etc). If this method can't figure out the inner width, it throws an exception.\n   *\n   * @returns {number} The inner width of the window.\n   */\n  static getInnerWidth() {\n    if (typeof(window.innerWidth) === 'number') {\n      // Most browsers\n      return window.innerWidth;\n    } else if (document.documentElement && document.documentElement.clientWidth) {\n      // IE 6+ in 'standards compliant mode'\n      return document.documentElement.clientWidth;\n    } else if (document.body && document.body.clientWidth) {\n      // IE 4 compatible\n      return document.body.clientWidth;\n    }\n\n    throw new Error('Unable to determine inner width of the window');\n  }\n\n  /**\n   * Returns the number of pixels the Window is scrolled by.\n   *\n   * @returns {number} The number of pixels.\n   */\n  static getScrollTop() {\n    if (typeof(window.pageYOffset) === 'number') {\n      return window.pageYOffset;\n    } else if (document.body && document.body.scrollTop) {\n      return document.body.scrollTop;\n    } else if (document.documentElement && document.documentElement.scrollTop) {\n      return document.documentElement.scrollTop;\n    }\n\n    throw new Error('Unable to determine scrollTop of the window');\n  }\n}\n\nexport {PrimeWindow}\n","/*\n * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\nimport {PrimeDocument} from \"../PrimeDocument\";\n\nclass Draggable {\n  /**\n   * Constructs a new Draggable object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Draggable widget.\n   * @param {string} [gripSelector=] gripSelector The optional selector to identify the 'grippy' part.\n   * @constructor\n   */\n  constructor(element, gripSelector) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this.offset = {};\n\n    if (!Utils.isDefined(gripSelector)) {\n      this.grip = this.element;\n    } else {\n      this.grip = this.element.queryFirst(gripSelector);\n      if (this.grip === null) {\n        throw Error('Unable to find an element using the provided selector [' + gripSelector + ']');\n      }\n    }\n  }\n\n  /**\n   * Destroys the Draggable Widget\n   */\n  destroy() {\n    this.element.removeClass('active');\n    this.element.setStyles(this.originalStyle);\n\n    this.grip.removeEventListener('mousedown', this._handleMouseDown);\n    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n  }\n\n  /**\n   * Initializes the Draggable by attaching the event listeners.\n   *\n   * @returns {Draggable} This.\n   */\n  initialize() {\n    this.originalStyle = {\n      cursor: this.element.getStyle('cursor'),\n      zIndex: this.element.getStyle('zIndex')\n    };\n\n    this.grip.addEventListener('mousedown', this._handleMouseDown).setStyle('cursor', 'move');\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handle Mouse Down Event\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleMouseDown(event) {\n    event.preventDefault();\n    this.element.addClass('active');\n\n    this.offset = {\n      zIndex: this.element.getStyle('zIndex'),\n      height: this.element.getOuterHeight(),\n      width: this.element.getOuterWidth(),\n      x: event.screenX,\n      y: event.screenY\n    };\n\n    this.element.setStyle('zIndex', this.offset.zIndex + 10);\n\n    // Remove old listeners\n    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\n    // Attach all the events\n    PrimeDocument.addEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.addEventListener('mouseup', this._handleMouseUp);\n  }\n\n  /**\n   * Handle the Mouse Move event for the body element.\n   *\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleMouseMove(event) {\n    const xDiff = event.screenX - this.offset.x;\n    const yDiff = event.screenY - this.offset.y;\n    this.offset.x = event.screenX;\n    this.offset.y = event.screenY;\n    this.element.setLeft(this.element.getLeft() + xDiff);\n    this.element.setTop(this.element.getTop() + yDiff);\n  }\n\n  /**\n   * Handle the Mouse Up event for this draggable widget.\n   * @private\n   */\n  _handleMouseUp() {\n    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n    this.element.setStyle('zIndex', this.offset.zIndex);\n    this.element.removeClass('active');\n  }\n}\n\nexport {Draggable}\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\n'use strict';\n\nimport {Overlay} from \"./Overlay\";\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeRequest} from \"../PrimeRequest\";\nimport {Utils} from \"../Utils\";\nimport {PrimeWindow} from \"../Window\";\nimport {Draggable} from \"./Draggable\";\n\nclass AJAXDialog {\n  /**\n   * Constructs a new dialog box, which is dynamically built and then populated with the HTML returned from an AJAX call.\n   *\n   * @constructor\n   */\n  constructor() {\n    Utils.bindAll(this);\n\n    this.draggable = null;\n    this.element = null;\n    this.initialized = false;\n    this._setInitialOptions();\n  }\n\n  /**\n   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n   * @returns {AJAXDialog} This.\n   */\n  close() {\n    this.element.removeClass('open');\n    if (this.draggable !== null) {\n      this.draggable.destroy();\n      this.draggable = null;\n    }\n\n    setTimeout(function() {\n      this.element.removeFromDOM();\n      this.element = null;\n\n      const highestZIndex = this._determineZIndex();\n      if (highestZIndex !== 0) {\n        Overlay.instance.setZIndex(highestZIndex);\n      } else {\n        Overlay.instance.close();\n      }\n    }.bind(this), this.options.closeTimeout);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dialog by calling the close function.\n   * @returns {AJAXDialog} This.\n   */\n  destroy() {\n    this.close();\n    return this;\n  }\n\n  /**\n   * Initializes the dialog.\n   * @returns {AJAXDialog} This.\n   */\n  initialize() {\n    return this;\n  }\n\n  /**\n   * Opens the dialog by making the AJAX GET request to the given URI and the opening then dialog.\n   *\n   * @param uri {string} The URI to make the AJAX GET request to.\n   * @returns {AJAXDialog} This.\n   */\n  open(uri) {\n    const request = this.options.ajaxRequest || new PrimeRequest(uri, 'GET');\n    request.withSuccessHandler(this._handleAJAXDialogResponse)\n        .withErrorHandler(this._handleAJAXDialogResponse)\n        .go();\n    return this;\n  }\n\n  /**\n   * Opens the dialog by making the AJAX POST request to the given URI with the given form and extra data (optional)\n   * and then opening the dialog.\n   *\n   * @param uri {string} The URI to make the AJAX POST request to.\n   * @param form {HTMLFormElement|PrimeElement} The Form element to retrieve the data from.\n   * @param extraData [extraData=] {object} (Optional) Extra data to send with the POST.\n   * @returns {AJAXDialog} This.\n   */\n  openPost(uri, form, extraData) {\n    new PrimeRequest(uri, 'POST')\n        .withDataFromForm(form)\n        .withData(extraData)\n        .withSuccessHandler(this._handleAJAXDialogResponse)\n        .go();\n    return this;\n  }\n\n  /**\n   * Updates the HTML contents of the dialog.\n   *\n   * @param html {String} The HTML.\n   * @returns {AJAXDialog} This.\n   */\n  setHTML(html) {\n    this.element.setHTML(html);\n    this._initializeDialog();\n    return this;\n  }\n\n  /**\n   * Sets any additional classes that should be on the dialog.\n   *\n   * @param classes {string} The list of additional classes.\n   * @returns {AJAXDialog} This.\n   */\n  withAdditionalClasses(classes) {\n    this.options.additionalClasses = classes;\n    return this;\n  }\n\n  /**\n   * Override the default Ajax Request used to open the dialog. This does not override the\n   * success and error handlers.\n   *\n   * @param request {PrimeRequest} The Ajax Request to use to open the dialog.\n   * @returns {AJAXDialog} This.\n   */\n  withAjaxRequest(request) {\n    this.options.ajaxRequest = request;\n    return this;\n  }\n\n  /**\n   * Sets the callback that is called after the dialog has been fetched and rendered.\n   *\n   * @param callback {function} The callback function.\n   * @returns {AJAXDialog} This.\n   */\n  withCallback(callback) {\n    this.options.callback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the dialog element.\n   *\n   * @param className {string} The class name.\n   * @returns {AJAXDialog} This.\n   */\n  withClassName(className) {\n    if (className.indexOf(' ') !== -1) {\n      throw 'Invalid class name [' + className + ']. You can use the additionalClasses options to add more classes.';\n    }\n\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n   * the server.\n   *\n   * @param selector {string} The element selector.\n   * @returns {AJAXDialog} This.\n   */\n  withCloseButtonElementSelector(selector) {\n    this.options.closeButtonElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {AJAXDialog} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets the draggable element selector that is used for the DraggableWidget.\n   *\n   * @param selector {string} The element selector.\n   * @returns {AJAXDialog} This.\n   */\n  withDraggableButtonElementSelector(selector) {\n    this.options.draggableElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Sets an error callback for AJAX form handling. This is called after a failed form submission.\n   *\n   * @param callback {Function} The callback function. The callback function will called with two parameters,\n   *        the first is a reference this object, the second is the XMLHttpRequest object.\n   * @returns {AJAXDialog} This.\n   */\n  withFormErrorCallback(callback) {\n    this.options.formErrorCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets whether or not forms inside the dialog are handled via AJAX or not.\n   *\n   * @param enabled {boolean} The choice.\n   * @returns {AJAXDialog} This.\n   */\n  withFormHandling(enabled) {\n    this.options.formHandling = enabled;\n    return this;\n  }\n\n  /**\n   * Sets a pre-submit callback for AJAX form handling. This is called before the form is submitted.\n   *\n   * @param callback {Function} The callback function.\n   * @returns {AJAXDialog} This.\n   */\n  withFormPreSubmitCallback(callback) {\n    this.options.formPreSubmitCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets a success callback for AJAX form handling. This is called after a successful form submission.\n   *\n   * @param callback {Function} The callback function. The callback function will called with two parameters,\n   *        the first is a reference this object, the second is the XMLHttpRequest object.\n   * @returns {AJAXDialog} This.\n   */\n  withFormSuccessCallback(callback) {\n    this.options.formSuccessCallback = callback;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {AJAXDialog} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  _determineZIndex() {\n    let highestZIndex = 0;\n    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n      if (dialog.isVisible() && zIndex > highestZIndex) {\n        highestZIndex = zIndex;\n      }\n    });\n    return highestZIndex;\n  }\n\n  _handleCloseClickEvent(event) {\n    Utils.stopEvent(event);\n    this.close();\n  }\n\n  _handleAJAXDialogResponse(xhr) {\n    this.element = PrimeDocument.newElement('<div/>', {class: this.options.className + ' ' + this.options.additionalClasses}).appendTo(document.body);\n    this.setHTML(xhr.responseText);\n  }\n\n  _handleAJAXFormError(xhr) {\n    this.setHTML(xhr.responseText);\n    this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n\n    if (this.options.formErrorCallback !== null) {\n      this.options.formErrorCallback(this, xhr);\n    }\n\n    if (this.draggable !== null) {\n      this.draggable.destroy();\n    }\n\n    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n    }\n  }\n\n  _handleAJAXFormSuccess(xhr) {\n    if (this.options.formSuccessCallback !== null) {\n      this.options.formSuccessCallback(this, xhr);\n    } else {\n      const successURI = this.form.getDataSet()['ajaxSuccessUri'];\n      if (successURI !== undefined) {\n        window.location = successURI;\n      } else {\n        window.location.reload();\n      }\n    }\n  }\n\n  _handleAJAXFormSubmit(event) {\n    Utils.stopEvent(event);\n\n    if (this.options.formPreSubmitCallback !== null) {\n      this.options.formPreSubmitCallback(this);\n    }\n\n    new PrimeRequest(this.form.getAttribute('action'), this.form.getAttribute('method'))\n        .withDataFromForm(this.form)\n        .withSuccessHandler(this._handleAJAXFormSuccess)\n        .withErrorHandler(this._handleAJAXFormError)\n        .go();\n  }\n\n  _initializeDialog() {\n    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n      e.addEventListener('click', this._handleCloseClickEvent);\n    }.bind(this));\n\n    // Only set the z-index upon first open\n    if (!this.initialized) {\n      const highestZIndex = this._determineZIndex();\n      Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n      this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n      this.element.addClass('open');\n    }\n\n    // Call the callback before positioning to ensure all changes to the dialog have been made\n    if (this.options.callback !== null) {\n      this.options.callback(this);\n    }\n\n    // Setup forms if enabled\n    if (this.options.formHandling) {\n      this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n    }\n\n    // Only set the position of the dialog when we first open it, if someone calls setHTML on the dialog we are not resizing it.\n    if (!this.initialized) {\n      // Position the fixed dialog in the center of the screen\n      const windowHeight = PrimeWindow.getInnerHeight();\n      const dialogHeight = this.element.getHeight();\n      this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n    }\n\n    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n    }\n\n    this.initialized = true;\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      additionalClasses: '',\n      ajaxRequest: null,\n      callback: null,\n      className: 'prime-dialog',\n      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n      closeTimeout: 200,\n      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n      formErrorCallback: null,\n      formHandling: false,\n      formPreSubmitCallback: null,\n      formSuccessCallback: null,\n      zIndexOffset: 1000\n    };\n  }\n}\n\nexport {AJAXDialog};\n","/*\n * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\n/**\n * @const {{Keys: {BACKSPACE: number, ENTER: number, ESCAPE: number, SPACE: number, TAB: number, LEFT_ARROW: number, UP_ARROW: number, RIGHT_ARROW: number, DOWN_ARROW: number, DELETE: number}} Events}\n */\nconst Events = {\n  Keys: {\n    BACKSPACE: 8,\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32,\n    TAB: 9,\n    LEFT_ARROW: 37,\n    UP_ARROW: 38,\n    RIGHT_ARROW: 39,\n    DOWN_ARROW: 40,\n    DELETE: 46\n  }\n};\n\nexport {Events};\n","/*\n * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\nimport {Utils} from \"./Utils\"\n\nconst PrimeDate = {\n  DAYS_IN_MONTH: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /**\n   * Return the hour in a 12-hour format. AM and PM are not communicated by the returned hour.\n   *\n   * @param date {Date} The date object to retrieve the hour from.\n   * @returns {Number} The hour of the day between 1 and 12.\n   */\n  getHourOfDay: function(date) {\n    return (date.getHours() + 24) % 12 || 12;\n  },\n\n  /**\n   * @param year The year.\n   * @returns {boolean} True if this is a leap year, otherwise false.\n   */\n  isLeapYear: function(year) {\n    return !((year % 4) || (!(year % 100) && (year % 400)));\n  },\n\n  /**\n   * Return the number of days in the month.\n   * @param year The year, the days in the month may change during a leap year.\n   * @param month The month.\n   * @returns {Number} The number of days in the month.\n   */\n  numberOfDaysInMonth: function(year, month) {\n    if (month === 1 && this.isLeapYear(year)) {\n      return 29;\n    } else {\n      return PrimeDate.DAYS_IN_MONTH[month];\n    }\n  },\n\n  /**\n   * Adds the given number of days to the given Date.\n   *\n   * @param date {Date} The date to add the days to.\n   * @param number {Number} The number of days to add.\n   */\n  plusDays: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    let newDate = date.getDate() + number;\n    let numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\n    if (newDate > 0) {\n      while (newDate > numberOfDaysInMonth) {\n        PrimeDate.plusMonths(date, 1);\n        newDate = newDate - numberOfDaysInMonth;\n        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n      }\n\n      date.setDate(newDate);\n    } else {\n      while (newDate <= 0) {\n        PrimeDate.plusMonths(date, -1);\n        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n        newDate = newDate + numberOfDaysInMonth;\n      }\n\n      date.setDate(newDate);\n    }\n  },\n\n  /**\n   * Adds the given number of hours to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of hours to add.\n   */\n  plusHours: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    const deltaDays = parseInt(number / 24);\n    PrimeDate.plusDays(date, deltaDays);\n\n    const deltaHours = number % 24;\n    const newHour = date.getHours() + deltaHours;\n    if (newHour > 23) {\n      PrimeDate.plusDays(date, 1);\n      date.setHours(newHour - 24);\n    } else if (newHour < 0) {\n      PrimeDate.plusDays(date, -1);\n      date.setHours(24 + newHour);\n    } else {\n      date.setHours(newHour);\n    }\n  },\n\n  /**\n   * Adds the given number of minutes to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of minutes to add.\n   */\n  plusMinutes: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    const deltaHours = parseInt(number / 60);\n    PrimeDate.plusHours(date, deltaHours);\n\n    const deltaMinutes = number % 60;\n    const newMinute = date.getMinutes() + deltaMinutes;\n    if (newMinute > 60) {\n      PrimeDate.plusHours(date, 1);\n      date.setMinutes(newMinute - 60);\n    } else if (newMinute < 0) {\n      PrimeDate.plusHours(date, -1);\n      date.setMinutes(60 + newMinute);\n    } else {\n      date.setMinutes(newMinute);\n    }\n  },\n\n  /**\n   * Adds the given number of months to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of months to add.\n   */\n  plusMonths: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    let deltaYears = parseInt(number / 12);\n    let deltaMonths = number % 12;\n    let currentMonth = date.getMonth();\n    const newMonth = currentMonth + deltaMonths;\n    if (newMonth < 0) {\n      deltaYears--;\n      deltaMonths = newMonth;\n      currentMonth = 12;\n    } else if (newMonth >= 12) {\n      deltaYears++;\n      deltaMonths = newMonth - 12;\n      currentMonth = 0;\n    }\n\n    date.setYear(date.getFullYear() + deltaYears);\n    // If the day is 31 and you set month to 1 (February) it will adjust to March 3 (Feb 28 + 3)\n    const adjustedMonth = currentMonth + deltaMonths;\n    if (date.getDate() > this.DAYS_IN_MONTH[adjustedMonth]) {\n      date.setDate(this.DAYS_IN_MONTH[adjustedMonth]);\n    }\n    date.setMonth(adjustedMonth);\n  },\n\n  /**\n   * Adds the given number of seconds to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of seconds to add.\n   */\n  plusSeconds: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    const deltaMinutes = parseInt(number / 60);\n    PrimeDate.plusMinutes(date, deltaMinutes);\n\n    const deltaSeconds = number % 60;\n    const newSecond = date.getSeconds() + deltaSeconds;\n    if (newSecond > 60) {\n      PrimeDate.plusMinutes(date, 1);\n      date.setSeconds(newSecond - 60);\n    } else if (newSecond < 0) {\n      PrimeDate.plusMinutes(date, -1);\n      date.setSeconds(60 + newSecond);\n    } else {\n      date.setSeconds(newSecond);\n    }\n  },\n\n  /**\n   * Adds the given number of years to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of years to add.\n   */\n  plusYears: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    date.setFullYear(date.getFullYear() + number);\n  },\n\n  /**\n   * Return a string in simplified extended ISO format (ISO 8601) truncated to only return YYYY-MM-DD.\n   *\n   * For example: new Date(2015, 6, 4) --> 2015-07-04\n   *\n   * @param date {Date} The date.\n   * @returns {String} A date string in the format YYYY-MM-DD.\n   */\n  toDateOnlyISOString: function(date) {\n    if (date instanceof Date) {\n      return date.getFullYear()\n          + '-' + Utils.leftPadNumber(date.getMonth() + 1, 2)\n          + '-' + Utils.leftPadNumber(date.getDate(), 2);\n    }\n    throw TypeError('date parameter must be a Date object.');\n  }\n};\n\nexport {PrimeDate}\n","/*\n * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Events} from \"../Events\";\nimport {PrimeDate} from \"../Date\";\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\n\nconst SHORT_DAY_NAMES = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst DATE_SEPARATOR = '/';\nconst TIME_SEPARATOR = ':';\nconst AM_PM = ['AM', 'PM'];\n\nclass DateTimePicker {\n  /**\n   * Constructs a new DateTimePicker object for the given input element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the DateTimePicker widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    if (!this.element.is('input')) {\n      throw new TypeError('You can only use DateTimePicker with an input element');\n    }\n\n    this.callback = null;\n    this.customFormatHandler = null;\n    this._setInitialOptions();\n  };\n\n  static get SHORT_DAY_NAMES() {\n    return SHORT_DAY_NAMES;\n  }\n\n  static get MONTHS() {\n    return MONTHS;\n  }\n\n  static get DATE_SEPARATOR() {\n    return DATE_SEPARATOR;\n  }\n\n  static get TIME_SEPARATOR() {\n    return TIME_SEPARATOR;\n  }\n\n  static get AM_PM() {\n    return AM_PM;\n  }\n\n  /**\n   * Closes the Date Picker widget.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  close() {\n    this.datepicker.removeClass('open');\n\n    // Pause a bit to cancel focus event and allow transition to play\n    setTimeout(function() {\n      this.datepicker.hide();\n    }.bind(this), this.options.closeTimeout);\n    return this;\n  }\n\n  /**\n   * Closes the months select box.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  closeMonthsSelect() {\n    this.months.removeClass('open');\n    setTimeout(function() {\n      this.months.hide();\n    }.bind(this), this.options.closeTimeout);\n    return this;\n  }\n\n  /**\n   * Closes the years select box.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  closeYearsSelect() {\n    this.years.removeClass('open');\n    setTimeout(function() {\n      this.years.hide();\n    }.bind(this), this.options.closeTimeout);\n    return this;\n  }\n\n  /**\n   * Destroys the DateTimePicker Widget\n   */\n  destroy() {\n    this.datepicker.removeFromDOM();\n    this.element.removeEventListener('click', this._handleInputClick)\n        .removeEventListener('focus', this._handleInputClick)\n        .removeEventListener('keydown', this._handleInputKey);\n    PrimeDocument.removeEventListener('click', this._handleGlobalClick);\n    PrimeDocument.removeEventListener('keydown', this._handleGlobalKey);\n  }\n\n  /**\n   * Draws the calendar using the month and year from the given Date object.\n   *\n   * @param date {Date} The date to draw the calendar for.\n   * @return {DateTimePicker} This DateTimePicker.\n   */\n  drawCalendar(date) {\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    const firstDay = new Date(year, month, 1);\n    const firstDayOfMonth = firstDay.getDay();\n    const daysInMonth = PrimeDate.numberOfDaysInMonth(year, month);\n    const used = firstDayOfMonth + daysInMonth;\n    const weeksInMonth = Math.ceil(used / 7);\n\n    let rows = '';\n    let startDay = 1;\n    for (let i = 0; i < weeksInMonth; i++) {\n      const startDayOfWeek = i === 0 ? firstDayOfMonth : 0;\n      rows += this._buildCalendarWeek(date, startDayOfWeek, startDay, daysInMonth);\n      startDay += 7 - startDayOfWeek; // increment by 7 adjusted by a week day of week offset\n    }\n\n    this.calendarBody.setHTML(rows);\n\n    // update data- attributes\n    this.monthDisplay.setDataAttribute('month', month);\n    this.yearDisplay.setDataAttribute('year', year);\n\n    // update text\n    this.monthDisplay.setTextContent(DateTimePicker.MONTHS[month]);\n    this.yearDisplay.setTextContent(year);\n\n    return this;\n  }\n\n  /**\n   * Rebuilds the entire widget using the date value. Even if the user has moved to a different month display, this will\n   * rebuild the table completely.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  initialize() {\n    const value = this.element.getValue();\n    if (value === '' || value === null) {\n      this.date = new Date();\n    } else {\n      this.date = new Date(value);\n    }\n\n    const year = this.date.getUTCFullYear();\n    const timeSeparator = `<span>${DateTimePicker.TIME_SEPARATOR}</span>`;\n    const dateSeparator = `<span>${DateTimePicker.DATE_SEPARATOR}</span>`;\n    let html =\n        `<div class=\"${this.options.className }\">\n  <header>\n    <span class=\"prev\">&#9664;</span>\n    <span class=\"month\"></span>\n    <span class=\"year\"></span>\n    <span class=\"next\">&#9654;</span>\n  </header>\n  <table>\n    <thead>\n      <tr>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[0]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[1]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[2]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[3]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[4]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[5]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[6]}</th>\n      </tr>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n  <div class=\"inputs\">\n    <div class=\"date\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"month\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"day\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"4\" maxlength=\"4\" type=\"text\" name=\"year\" autocomplete=\"off\"/>\n    </div>\n    <div class=\"time\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"hour\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"minute\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"second\" autocomplete=\"off\"/>\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"am_pm\" autocomplete=\"off\"/>\n    </div>\n  </div>\n</div>`;\n    PrimeDocument.appendHTML(html);\n    this.datepicker = PrimeDocument.queryLast('.' + this.options.className).hide();\n    this.element.addEventListener('click', this._handleInputClick);\n    this.element.addEventListener('focus', this._handleInputClick);\n    this.element.addEventListener('keydown', this._handleInputKey);\n\n    this.calendarBody = this.datepicker.queryFirst('table tbody').addEventListener('click', this._handleDayClick);\n    this.monthDisplay = this.datepicker.queryFirst('header .month').addEventListener('click', this._handleMonthExpand);\n    this.yearDisplay = this.datepicker.queryFirst('header .year').addEventListener('click', this._handleYearExpand);\n\n    this.time = this.datepicker.queryFirst('.time');\n    this.inputs = this.datepicker.queryFirst('div.inputs');\n    this.hourInput = this.inputs.queryFirst('input[name=hour]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleHourKey);\n    this.minuteInput = this.inputs.queryFirst('input[name=minute]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMinuteKey);\n    this.secondInput = this.inputs.queryFirst('input[name=second]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleSecondKey);\n    this.ampmInput = this.inputs.queryFirst('input[name=am_pm]').addEventListener('keydown', this._handleAmPmKey);\n    this.monthInput = this.inputs.queryFirst('input[name=month]').setValue(this.date.getMonth() + 1).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMonthKey);\n    this.dayInput = this.inputs.queryFirst('input[name=day]').setValue(this.date.getDate()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleDayKey);\n    this.yearInput = this.inputs.queryFirst('input[name=year]').setValue(this.date.getFullYear()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleYearKey);\n\n    this.datepicker.queryFirst('header .next').addEventListener('click', this._handleNextMonth);\n    this.datepicker.queryFirst('header .prev').addEventListener('click', this._handlePreviousMonth);\n\n    PrimeDocument.addEventListener('click', this._handleGlobalClick);\n    PrimeDocument.addEventListener('keydown', this._handleGlobalKey);\n\n    // Setup months dropdown\n    html = '<div class=\"months\">';\n    for (let i = 0; i < DateTimePicker.MONTHS.length; i++) {\n      html += `<div data-month=\"${i}\">${DateTimePicker.MONTHS[i]}</div>`;\n    }\n    html += '</div>';\n    this.datepicker.appendHTML(html);\n    this.months = this.datepicker.queryFirst('.months');\n    this.months.hide();\n    this.months.getChildren().each(function(month) {\n      month.addEventListener('click', function() {\n        this.setMonth(parseInt(month.getDataAttribute('month')));\n        this.closeMonthsSelect();\n      }.bind(this));\n    }.bind(this));\n\n    // Setup year dropdown\n    html = '<div class=\"years\">';\n    const startYear = this.date.getFullYear() - 10;\n    const endYear = this.date.getFullYear() + 10;\n    for (let i = startYear; i < endYear; i++) {\n      html += `<div data-year=\"${i}\">${i}</div>`;\n    }\n    html += '</div>';\n    this.datepicker.appendHTML(html);\n    this.years = this.datepicker.queryFirst('.years');\n    this.years.hide();\n    this.years.getChildren().each(function(year) {\n      year.addEventListener('click', function() {\n        this.setYear(parseInt(year.getDataAttribute('year')));\n        this.closeYearsSelect();\n      }.bind(this));\n    }.bind(this));\n\n    this._rebuild();\n\n    if (this.customFormatHandler !== null) {\n      this.element.setValue(this.customFormatHandler.call(null, this.date));\n    }\n\n    return this;\n  }\n\n  /**\n   * @returns {Date} Return the current value of the time picker.\n   */\n  getDate() {\n    return new Date(this.date.getTime());\n  }\n\n  /**\n   * Moves the DateTimePicker to the next month and redraws the calendar.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  nextMonth() {\n    const newDate = new Date(this.date);\n    newDate.setDate(1); // Set the day to 1 to keep us from wrapping months on the 30 and 31st.\n    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n    PrimeDate.plusMonths(newDate, 1);\n    this.drawCalendar(newDate);\n    return this;\n  }\n\n  /**\n   * Opens the Date Picker widget.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  open() {\n    this.datepicker.setLeft(this.element.getLeft());\n    this.datepicker.setTop(this.element.getAbsoluteTop() + this.element.getHeight() + 8);\n    this.datepicker.show();\n    this.datepicker.addClass('open');\n\n    const zIndex = this.element.getRelativeZIndex();\n    this.datepicker.setStyle('zIndex', zIndex + 10);\n    return this;\n  }\n\n  /**\n   * Opens the month select box.\n   */\n  openMonthSelect() {\n    this.closeYearsSelect();\n\n    this.months.setLeft(this.monthDisplay.getOffsetLeft() - 5);\n    this.months.setTop(this.monthDisplay.getOffsetTop() - 5);\n    this.months.setStyle('zIndex', this.monthDisplay.getRelativeZIndex() + 10);\n    this.months.show();\n    this.months.addClass('open');\n\n    const currentMonth = this.months.queryFirst('[data-month=\"' + this.date.getMonth() + '\"]');\n    this.months.getChildren().each(function(month) {\n      month.removeClass('selected');\n    });\n    currentMonth.addClass('selected');\n  }\n\n  /**\n   * Opens the year select box.\n   */\n  openYearSelect() {\n    this.closeMonthsSelect();\n\n    this.years.setLeft(this.yearDisplay.getOffsetLeft() - 5);\n    this.years.setTop(this.yearDisplay.getOffsetTop() - 5);\n    this.years.setStyle('zIndex', this.yearDisplay.getRelativeZIndex() + 10);\n    this.years.show();\n    this.years.addClass('open');\n\n    const currentYear = this.years.queryFirst('[data-year=\"' + this.date.getFullYear() + '\"]');\n    this.years.getChildren().each(function(year) {\n      year.removeClass('selected');\n    });\n    currentYear.addClass('selected');\n  }\n\n  /**\n   * Moves the DateTimePicker to the previous month and redraws the calendar.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  previousMonth() {\n    const newDate = new Date(this.date);\n    newDate.setDate(1); // Set to 1 until month has been set\n    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n    PrimeDate.plusMonths(newDate, -1);\n    this.drawCalendar(newDate);\n    return this;\n  }\n\n  /**\n   * Sets the date of the DateTimePicker and redraws the calendar to the month for the date.\n   *\n   * @param {Date} newDate The new date.\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  setDate(newDate) {\n    this.date = newDate;\n\n    if (this.customFormatHandler !== null) {\n      this.element.setValue(this.customFormatHandler.call(null, this.date));\n    } else {\n      if (this.options.dateOnly) {\n        this.element.setValue(PrimeDate.toDateOnlyISOString(newDate));\n      } else {\n        this.element.setValue(newDate.toISOString());\n      }\n    }\n\n    this._rebuild();\n\n    if (this.callback !== null) {\n      this.callback(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * @param {number} month The month. A 0 based number between 0 (January) and 11 (December).\n   * @returns {DateTimePicker}\n   */\n  setMonth(month) {\n    let currentYear = parseInt(this.yearDisplay.getDataAttribute('year'));\n    if (month < 0) {\n      month = 11;\n      currentYear--;\n    } else if (month > 11) {\n      currentYear++;\n      month = 0;\n    }\n\n    this.date.setMonth(month);\n    this.date.setYear(currentYear);\n    this.setDate(this.date);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {number} year The year.\n   * @returns {DateTimePicker}\n   */\n  setYear(year) {\n    this.yearDisplay.setDataAttribute('year', year);\n    this.yearDisplay.setTextContent(year);\n    this.date.setYear(year);\n    this.setDate(this.date);\n    return this;\n  }\n\n  /**\n   * Sets the callback handler that is called with the DateTimePicker's value is changed.\n   *\n   * @param callback {Function} The callback function.\n   * @return {DateTimePicker} This.\n   */\n  withCallback(callback) {\n    this.callback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the main div of the date time picker.\n   *\n   * @param className {string} The class name.\n   * @returns {DateTimePicker} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {DateTimePicker}\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets a custom format handler responsible for formatting the date string that will be set into the input field.\n   * When not defined the default behavior will be used.\n   *\n   * @param formatHandler {Function} The handler function.\n   * @return {DateTimePicker} This.\n   */\n  withCustomFormatHandler(formatHandler) {\n    this.customFormatHandler = formatHandler;\n    return this;\n  }\n\n  /**\n   * Render the DateTimePicker w/out the time picker. Only the calendar will be displayed and the input field will be updated with date only.\n   *\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  withDateOnly() {\n    this.options.dateOnly = true;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Build the HTML for a single calendar week.\n   *\n   * @param date {Date} The date to build the calendar week based on.\n   * @param startDayOfWeek {Number} The day of the week of this week begins. A 0 based number between 0 and 6.\n   * @param startDayOfMonth {Number} The day of the month this week begins. A number between 1 and 31.\n   * @param daysInMonth {Number} The number of days in this calendar month.\n   * @returns {string} The HTML for this week.\n   * @private\n   */\n  _buildCalendarWeek(date, startDayOfWeek, startDayOfMonth, daysInMonth) {\n    const daysInPreviousMonth = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n    let startDayOfPreviousMonth = daysInPreviousMonth - startDayOfWeek + 1;\n    let startDayOfNextMonth = 1;\n\n    let row = '<tr>';\n    let emptyColumns = 0;\n    const year = date.getFullYear();\n    const month = date.getMonth();\n\n    for (let i = 0; i < 7; i++) {\n      const dayOfWeek = startDayOfMonth + i;\n      // Days of the previous month\n      if (dayOfWeek <= startDayOfWeek) {\n        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + (month - 1) + '\" data-day=\"' + startDayOfPreviousMonth + '\">' + startDayOfPreviousMonth + '</a></td>';\n        startDayOfPreviousMonth++;\n        emptyColumns++;\n      } else if (dayOfWeek > daysInMonth) {\n        // Days of the next month\n        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + dayOfWeek + '\">' + startDayOfNextMonth + '</a></td>';\n        startDayOfNextMonth++;\n      } else {\n        // Days in the current month\n        const day = dayOfWeek - emptyColumns;\n        const selected = this.date.getDate() === day && this.date.getMonth() === month;\n        row += '<td><a ' + (selected ? 'class=\"selected\"' : '') + 'href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + day + '\">' + day + '</a></td>';\n      }\n    }\n\n    row += '</tr>';\n    return row;\n  }\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Clamp the value between the minimum and maximum values.\n   *\n   * @param {Number} min the minimum number value.\n   * @param {Number} max The maximum number value.\n   * @param {Number} value The value to clamp.\n   * @returns {Number} The resulting value, either the min, max or actual value if not out of bounds.\n   * @private\n   */\n  _clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Handles when the AM/PM element is selected and the user hits a key. If the user hits A, this changes to AM. If the\n   * user hits P, this changes to PM. If the use hits the up or down arrows, this toggles between AM and PM.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @private\n   */\n  _handleAmPmKey(event) {\n    if (event.keyCode === Events.Keys.TAB) {\n      Utils.stopEvent(event);\n      if (event.shiftKey) {\n        this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n        this.secondInput.focus();\n      } else {\n        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n        this.monthInput.focus();\n      }\n      return;\n    }\n\n    // Decode the key event\n    const current = this.ampmInput.getValue();\n    if (event.keyCode === 65) {\n      // User hit A\n      if (current === DateTimePicker.AM_PM[1]) {\n        PrimeDate.plusHours(this.date, -12);\n      }\n    } else if (event.keyCode === 80) {\n      // User hit P\n      if (current === DateTimePicker.AM_PM[0]) {\n        PrimeDate.plusHours(this.date, 12);\n      }\n    } else if (event.keyCode === Events.Keys.UP_ARROW || event.keyCode === Events.Keys.DOWN_ARROW) {\n      // User hit up or down arrow\n      if (current === DateTimePicker.AM_PM[0]) {\n        PrimeDate.plusHours(this.date, 12);\n      } else if (current === DateTimePicker.AM_PM[1]) {\n        PrimeDate.plusHours(this.date, -12);\n      }\n    } else if (event.keyCode === Events.Keys.ENTER || event.keyCode === Events.Keys.ESCAPE) {\n      return;\n    }\n\n    this.setDate(this.date);\n    this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n    Utils.stopEvent(event);\n  }\n\n  /**\n   * Handle date/time change events. This pulls the values from the 3 date fields and makes a new Date. Then it calls\n   * {@link #setDate(Date)}.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @private\n   */\n  _handleDateTimeChange(event) {\n    Utils.stopEvent(event);\n    const newDate = new Date();\n    const hours = this._clamp(1, 12, parseInt(this.hourInput.getValue()));\n    if (this.ampmInput.getValue() === DateTimePicker.AM_PM[0]) {\n      if (hours === 12) {\n        newDate.setHours(0);\n      } else {\n        newDate.setHours(hours);\n      }\n    } else {\n      if (hours === 12) {\n        newDate.setHours(12);\n      } else {\n        newDate.setHours(hours + 12);\n      }\n    }\n\n    const seconds = this._clamp(0, 59, parseInt(this.secondInput.getValue()));\n    const minutes = this._clamp(0, 59, parseInt(this.minuteInput.getValue()));\n\n    newDate.setSeconds(seconds);\n    newDate.setMinutes(minutes);\n    newDate.setDate(1); // Set to 1 until month has been set\n    newDate.setMonth(parseInt(this.monthInput.getValue()) - 1);\n    newDate.setDate(parseInt(this.dayInput.getValue()));\n    newDate.setYear(parseInt(this.yearInput.getValue()));\n\n    this.setDate(newDate);\n  }\n\n  /**\n   * Handle the click on a day.\n   *\n   * @parameter {MouseEvent} event The click event.\n   * @private\n   */\n  _handleDayClick(event) {\n    Utils.stopEvent(event);\n    let dayElement = new PrimeElement(event.target);\n    if (!dayElement.is('a')) {\n      dayElement = dayElement.queryFirst('a');\n    }\n\n    const newDate = new Date(this.date);\n    newDate.setDate(1); // Set to 1 until month has been set\n    newDate.setFullYear(parseInt(dayElement.getDataAttribute('year')));\n    newDate.setMonth(parseInt(dayElement.getDataAttribute('month')));\n    newDate.setDate(parseInt(dayElement.getDataAttribute('day')));\n    this.setDate(newDate);\n  }\n\n  /**\n   * Handles when a key is click in the day input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the day.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleDayKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      PrimeDate.plusDays(this.date, 1);\n      this.setDate(this.date);\n      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n      Utils.stopEvent(event);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusDays(this.date, -1);\n      this.setDate(this.date);\n      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setDate(parseInt(this.dayInput.getValue()));\n    }\n  }\n\n  /**\n   * Handles a global click event. This determines if the click was outside of the DateTimePicker and closes it.\n   *\n   * @param {MouseEvent} event The click event.\n   * @private\n   */\n  _handleGlobalClick(event) {\n    // Skip this function completely if they clicked the input field\n    if (event.target === this.element.domElement) {\n      return;\n    }\n\n    const top = this.datepicker.getTop();\n    const bottom = this.datepicker.getBottom();\n    const left = this.datepicker.getLeft();\n    const right = this.datepicker.getRight();\n    if (this.datepicker.isVisible() && (event.x < left || event.x > right || event.y < top || event.y > bottom)) {\n      this.close();\n      this.closeYearsSelect();\n      this.closeMonthsSelect();\n    } else {\n      if (this.years.isVisible()) {\n        this.closeYearsSelect();\n      }\n      if (this.months.isVisible()) {\n        this.closeMonthsSelect();\n      }\n    }\n  }\n\n  /**\n   * Handles a global key event. This determines if the DateTimePicker is open and if enter or escape was hit.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleGlobalKey(event) {\n    // Skip this function completely if the DateTimePicker isn't open\n    if (!this.datepicker.isVisible()) {\n      return;\n    }\n\n    if (event.keyCode === Events.Keys.ENTER) {\n      Utils.stopEvent(event);\n      this.setDate(this.date);\n      this.close();\n      this.element.focus();\n    } else if (event.keyCode === Events.Keys.ESCAPE) {\n      this.close();\n      this.element.focus();\n    }\n  }\n\n  /**\n   * Handles when a key is click in the hours input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the hour.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleHourKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusHours(this.date, 1);\n      this.setDate(this.date);\n      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusHours(this.date, -1);\n      this.setDate(this.date);\n      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setHours(parseInt(this.hourInput.getValue()));\n    }\n  }\n\n  /**\n   * Handle the click event for the input date field. If the DateTimePicker is hidden this will call the {@link #show()}\n   * function.\n   *\n   * @returns {boolean} Always true.\n   * @private\n   */\n  _handleInputClick() {\n    if (!this.datepicker.isVisible()) {\n      this.open();\n      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n      this.monthInput.focus();\n    }\n  }\n\n  /**\n   * Handle the key event for the input date field. If the user hits tab or shift-tab, this moves the focus to the\n   * nested inputs.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @private\n   */\n  _handleInputKey(event) {\n    if (this.datepicker.isVisible() && event.keyCode === Events.Keys.TAB) {\n      Utils.stopEvent(event);\n      if (event.shiftKey) {\n        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n        this.ampmInput.focus();\n      } else {\n        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n        this.monthInput.focus();\n      }\n    }\n  }\n\n  /**\n   * Handle the key down event and capture the up and down arrow key to increment and decrement the minute.\n\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleMinuteKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMinutes(this.date, 1);\n      this.setDate(this.date);\n      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMinutes(this.date, -1);\n      this.setDate(this.date);\n      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setMinutes(parseInt(this.minuteInput.getValue()));\n    }\n  }\n\n  /**\n   * Handles the click on the month to open the month select.\n   *\n   * @private\n   */\n  _handleMonthExpand(event) {\n    Utils.stopEvent(event);\n    this.openMonthSelect();\n  }\n\n  /**\n   * Handles when a key is click in the month input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the month.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleMonthKey(event) {\n    if (event.keyCode === Events.Keys.TAB && event.shiftKey) {\n      Utils.stopEvent(event);\n      if (this.options.dateOnly) {\n        this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n        this.yearInput.focus();\n      } else {\n        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n        this.ampmInput.focus();\n      }\n      return;\n    }\n\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMonths(this.date, 1);\n      this.setDate(this.date);\n      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMonths(this.date, -1);\n      this.setDate(this.date);\n      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setMonth(parseInt(this.monthInput.getValue()) - 1);\n    }\n  }\n\n  /**\n   * Handle the next month button click.\n   *\n   * @param {MouseEvent} event The mouse event.\n   * @private\n   */\n  _handleNextMonth(event) {\n    Utils.stopEvent(event);\n    this.nextMonth();\n  }\n\n  /**\n   * Handle the previous month button click.\n   *\n   * @param {MouseEvent} event The mouse event.\n   * @private\n   */\n  _handlePreviousMonth(event) {\n    Utils.stopEvent(event);\n    this.previousMonth();\n  }\n\n  /**\n   * Handle the key down event and capture the up and down arrow key to increment and decrement the second.\n\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleSecondKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusSeconds(this.date, 1);\n      this.setDate(this.date);\n      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusSeconds(this.date, -1);\n      this.setDate(this.date);\n      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setSeconds(parseInt(this.secondInput.getValue()));\n    }\n  }\n\n  /**\n   * Handles the click on the year to open the year select.\n   *\n   * @private\n   */\n  _handleYearExpand(event) {\n    Utils.stopEvent(event);\n    this.openYearSelect();\n  }\n\n  /**\n   * Handles when a key is click in the year input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the year.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleYearKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusYears(this.date, 1);\n      this.setDate(this.date);\n      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusYears(this.date, -1);\n      this.setDate(this.date);\n      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.TAB && this.options.dateOnly) {\n      Utils.stopEvent(event);\n      if (event.shiftKey) {\n        this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n        this.dayInput.focus();\n      } else {\n        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n        this.monthInput.focus();\n      }\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setFullYear(parseInt(this.yearInput.getValue()));\n    }\n  }\n\n  /**\n   * Rebuilds the HTML of the DateTimePicker.\n   * @private\n   */\n  _rebuild() {\n    this.drawCalendar(this.date);\n    this._refreshInputs();\n\n    if (this.options.dateOnly) {\n      this.time.hide();\n    }\n  }\n\n  /**\n   * Refresh the time inputs.\n   *\n   * @private\n   */\n  _refreshInputs() {\n    // Set Time -- assuming 12-hour time for the input fields and ISO 24-hour time for the field\n    const hours = PrimeDate.getHourOfDay(this.date);\n    this.hourInput.setValue(hours);\n\n    const minutes = this.date.getMinutes();\n    this.minuteInput.setValue((\"00\" + minutes).slice(-2));\n\n    const seconds = this.date.getSeconds();\n    this.secondInput.setValue((\"00\" + seconds).slice(-2));\n\n    if (this.date.getHours() >= 12) {\n      this.ampmInput.setValue(DateTimePicker.AM_PM[1]);\n    } else {\n      this.ampmInput.setValue(DateTimePicker.AM_PM[0]);\n    }\n\n    this.monthInput.setValue(this.date.getMonth() + 1);\n    this.dayInput.setValue(this.date.getDate());\n    this.yearInput.setValue(this.date.getFullYear());\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      className: 'prime-date-picker',\n      closeTimeout: 200,\n      dateOnly: false\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {DateTimePicker};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\n\nclass Dismissable {\n  /**\n   * Constructs a new Dismissable object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Element for the Dismissable widget.\n   * @param {PrimeElement|Element|EventTarget} dismissButton The Element for the Dismissable button.\n   * @constructor\n   */\n  constructor(element, dismissButton) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this.dismissButton = dismissButton;\n    this._setInitialOptions();\n  }\n\n  /**\n   * Closes the Dismissable by removing the open class from the element and setting a timer to remove the element from\n   * the DOM.\n   */\n  close() {\n    this.element.addClass('closed');\n    setTimeout(function() {\n      this.element.removeFromDOM();\n    }.bind(this), this.options.closeTimeout);\n  }\n\n  /**\n   * Destroys the widget.\n   */\n  destroy() {\n    this.dismissButton.removeEventListener('click', this._handleClick);\n  }\n\n  /**\n   * Initializes the Dismissable by binding the events to the dismiss button.\n   *\n   * @returns {Dismissable} This.\n   */\n  initialize() {\n    this.dismissButton.addEventListener('click', this._handleClick);\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {Dismissable} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Dismissable} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the click event.\n   * @private\n   */\n  _handleClick(event) {\n    Utils.stopEvent(event);\n    this.close();\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      closeTimeout: 400\n    };\n  }\n}\n\nexport {Dismissable}\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\nimport {PrimeWindow} from \"../Window\";\nimport {Overlay} from \"./Overlay\";\nimport {Draggable} from \"./Draggable\";\nimport {PrimeDocument} from \"../PrimeDocument\";\n\nclass HTMLDialog {\n  /**\n   * Constructs a new dialog box from an element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the HTMLDialog widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n    this.draggable = null;\n  }\n\n  /**\n   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n   * @returns {HTMLDialog} This.\n   */\n  close() {\n    this.element.removeClass('open');\n    if (this.draggable !== null) {\n      this.draggable.destroy();\n      this.draggable = null;\n    }\n\n    setTimeout(function() {\n      this.element.hide();\n\n      const highestZIndex = this._determineZIndex();\n      if (highestZIndex !== 0) {\n        Overlay.instance.setZIndex(highestZIndex);\n      } else {\n        Overlay.instance.close();\n      }\n    }.bind(this), this.options.closeTimeout);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dialog by calling the close function.\n   * @returns {HTMLDialog} This.\n   */\n  destroy() {\n    this.close();\n    return this;\n  }\n\n  /**\n   * Initializes the dialog.\n   * @returns {HTMLDialog} This.\n   */\n  initialize() {\n    this.element.hide();\n    return this;\n  }\n\n  /**\n   * Opens the dialog.\n   *\n   * @returns {HTMLDialog} This.\n   */\n  open() {\n    const highestZIndex = this._determineZIndex();\n    Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n    this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n    this.element.show();\n    this.element.addClass('open');\n\n    // Call the callback before positioning to ensure all changes to the dialog have been made\n    if (this.options.callback !== null) {\n      this.options.callback(this);\n    }\n\n    // Position the fixed dialog in the center of the screen\n    const windowHeight = PrimeWindow.getInnerHeight();\n    const dialogHeight = this.element.getHeight();\n    this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n\n    this._setupButtons();\n\n    if (this.draggable === null) {\n      if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n        this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the HTML contents of the dialog.\n   *\n   * @param html {String} The HTML.\n   * @returns {HTMLDialog} This.\n   */\n  setHTML(html) {\n    this.element.setHTML(html);\n    this._setupButtons();\n    return this;\n  }\n\n  /**\n   * Sets the callback that is called after the dialog has been fetched and rendered.\n   *\n   * @param callback {function} The callback function.\n   * @returns {HTMLDialog} This.\n   */\n  withCallback(callback) {\n    this.options.callback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the dialog element.\n   *\n   * @param className {string} The class name.\n   * @returns {HTMLDialog} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n   * the server.\n   *\n   * @param selector {string} The element selector.\n   * @returns {HTMLDialog} This.\n   */\n  withCloseButtonElementSelector(selector) {\n    this.options.closeButtonElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {HTMLDialog} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets the draggable element selector that is used for the Draggable.\n   *\n   * @param selector {string} The element selector.\n   * @returns {HTMLDialog} This.\n   */\n  withDraggableButtonElementSelector(selector) {\n    this.options.draggableElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {HTMLDialog} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  _determineZIndex() {\n    let highestZIndex = 0;\n    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n      if (dialog.isVisible() && zIndex > highestZIndex) {\n        highestZIndex = zIndex;\n      }\n    });\n    return highestZIndex;\n  }\n\n  _handleCloseClickEvent(event) {\n    Utils.stopEvent(event);\n    this.close();\n  }\n\n  _setupButtons() {\n    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n      e.addEventListener('click', this._handleCloseClickEvent);\n    }.bind(this));\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      callback: null,\n      className: 'prime-dialog',\n      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n      closeTimeout: 200,\n      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n      zIndexOffset: 1000\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {HTMLDialog};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\n\nclass InProgress {\n  /**\n   * Constructs a In Progress widget that opens an overlay over an element while something is running and closes it when\n   * it finishes.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to overlay.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n    this.draggable = null;\n  }\n\n  /**\n   * Closes the InProgress process.\n   *\n   * @param {Function} callback (Optional) A callback function to invoke after the InProgress has been completely closed.\n   */\n  close(callback) {\n    try {\n      this.options.endFunction(this);\n    } finally {\n      const now = new Date().getTime();\n      const duration = now - this.startInstant;\n      if (duration < this.options.minimumTime) {\n        setTimeout(function() {\n          this.overlay.removeFromDOM();\n\n          if (callback) {\n            callback();\n          }\n        }.bind(this), this.options.minimumTime - duration);\n      } else {\n        this.overlay.removeFromDOM();\n\n        if (callback) {\n          callback();\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Opens the InProgress process.\n   */\n  open() {\n    this.startInstant = new Date().getTime();\n    this.overlay = PrimeDocument.newElement('<div/>').setId('prime-in-progress-overlay').appendTo(document.body);\n    PrimeDocument.newElement('<i/>', {class: 'fa fa-spin fa-' + this.options.iconName}).appendTo(this.overlay);\n\n    const coords = this.element.getCoordinates();\n    const bodyCoords = PrimeDocument.bodyElement.getCoordinates();\n    this.overlay.setTop(coords.top - bodyCoords.top);\n    this.overlay.setLeft(coords.left - bodyCoords.left);\n    this.overlay.setWidth(this.element.getBorderedWidth());\n    this.overlay.setHeight(this.element.getBorderedHeight());\n    this.overlay.setStyle('zIndex', (this.element.getRelativeZIndex() + 1000).toString());\n\n    this.options.startFunction(this);\n\n    return this;\n  }\n\n  /**\n   * Sets the end function that is called when the InProgress process is finished.\n   *\n   * @param f {function} The function.\n   * @returns {InProgress} This.\n   */\n  withEndFunction(f) {\n    this.options.endFunction = f;\n    return this;\n  }\n\n  /**\n   * Sets the FontAwesome icon name to use for the overlay.\n   *\n   * @param iconName {string} The icon name.\n   * @returns {InProgress} This.\n   */\n  withIconName(iconName) {\n    this.options.iconName = iconName;\n    return this;\n  }\n\n  /**\n   * Sets the minimum time that the InProgress process must run.\n   *\n   * @param time {number} The time in milliseconds.\n   * @returns {InProgress} This.\n   */\n  withMinimumTime(time) {\n    this.options.minimumTime = time;\n    return this;\n  }\n\n  /**\n   * Sets the start function that is called when the InProgress process is started.\n   *\n   * @param f {function} The function.\n   * @returns {InProgress} This.\n   */\n  withStartFunction(f) {\n    this.options.startFunction = f;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      endFunction: function() {\n      },\n      iconName: 'refresh',\n      minimumTime: 1000,\n      startFunction: function() {\n      }\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {InProgress};\n","/*\n * Copyright (c) 2014-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Events} from \"../Events\";\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\n\nclass Searcher {\n  /**\n   * Constructs a Searcher object for the given text input.\n   *\n   * The Searcher object can be attached and used in conjunction with any other widgets in a generic manner. It\n   * provides search capabilities and manages the search results. This is useful for MultipleSelects, IntelliSense and\n   * other widgets. Here's the HTML for the search results.\n   *\n   * <pre>\n   *   &lt;input type=\"text\" class=\"prime-search-result-input\" value=\"F\"/>\n   *   &lt;ul>\n   *     &lt;li>Four&lt;/li>\n   *     &lt;li>Five&lt;/li>\n   *     &lt;li>Fifteen&lt;/li>\n   *     &lt;li>Add Custom Entry: F/li>\n   *   &lt;/ul>\n   * &lt;/div>\n   * </pre>\n   *\n   * The with* methods can be used to setup the configuration for this SearchResults, but here are some defaults:\n   *\n   * <ul>\n   *   <li>closeTimeout = 200</li>\n   *   <li>customAddEnabled = true</li>\n   *   <li>customAddCallback = function(customValue){return true;}</li>\n   *   <li>customAddLabel = \"Add Custom:\"</li>\n   *   <li>tooManySearchResultsLabel = \"Too Many Matches For:\"</li>\n   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n   * </ul>\n   *\n   * The callback object must conform to this interface:\n   *\n   * <pre>\n   *   CallbackObject {\n *     void deletedBeyondSearchInput()\n *     void doesNotContainValue()\n *     object{results:Array, tooManyResults:boolean} search(_searchString:string),\n *     void selectSearchResult(selectedSearchResult:string),\n *   }\n   * </pre>\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} inputElement The input element that is used to execute the search.\n   * @param {PrimeElement|Element|EventTarget} searchResultsContainer The element that is used to store the search results.\n   * @param {*} callbackObject The object that is used to callback for searching and numerous other functions to help\n   *            communicate state and determine how to draw the input and search results.\n   */\n  constructor(inputElement, searchResultsContainer, callbackObject) {\n    Utils.bindAll(this);\n\n    this.searchResults = PrimeElement.wrap(searchResultsContainer);\n    this.inputElement = PrimeElement.wrap(inputElement);\n    if (this.inputElement.domElement.tagName !== 'INPUT') {\n      throw new TypeError('You can only use Prime.Widgets.SearchResults with INPUT elements');\n    }\n\n    this._setInitialOptions(callbackObject);\n  }\n\n  /**\n   * A search function that works on a select box.\n   *\n   * @param searchText {String} The search String.\n   * @param select {HTMLSelectElement|PrimeElement} The select box.\n   * @returns {{results: Array, tooManyResults: boolean}}\n   */\n  static selectSearchFunction(searchText, select) {\n    const options = PrimeElement.unwrap(select).options;\n    const selectableOptions = [];\n    for (let i = 0; i < options.length; i++) {\n      const option = new PrimeElement(options[i]);\n      if (option.isSelected()) {\n        continue;\n      }\n\n      const html = option.getHTML();\n      if (searchText === null || searchText === undefined || searchText === '' || html.toLowerCase().indexOf(searchText.toLowerCase()) === 0) {\n        selectableOptions.push(html);\n      }\n    }\n\n    // Alphabetize the options\n    if (selectableOptions.length > 0) {\n      selectableOptions.sort();\n    }\n\n    return {results: selectableOptions, tooManyResults: false};\n  }\n\n  /**\n   * Closes the search results display, unhighlights any options that are highlighted and resets the input's value to\n   * empty string.\n   */\n  closeSearchResults() {\n    this._removeAllSearchResults();\n    this.inputElement.setValue('');\n    this.searchResults.removeClass('open');\n    setTimeout(function() {\n      this.searchResults.hide();\n      this.resizeInput();\n    }.bind(this), this.options.closeTimeout);\n  }\n\n  /**\n   * Removes all of the event listeners from the input element.\n   */\n  destroy() {\n    this.inputElement\n        .removeEventListener('blur', this._handleBlurEvent)\n        .removeEventListener('click', this._handleClickEvent)\n        .removeEventListener('keyup', this._handleKeyUpEvent)\n        .removeEventListener('keydown', this._handleKeyDownEvent)\n        .removeEventListener('focus', this._handleFocusEvent);\n  }\n\n  focus() {\n    this.inputElement.focus();\n  }\n\n  /**\n   * @returns {PrimeElement} The highlighted search result or null.\n   */\n  getHighlightedSearchResult() {\n    return this.searchResults.queryFirst('.selected');\n  }\n\n  /**\n   * Highlights the next search result if one is highlighted. If there isn't a highlighted search result, this\n   * highlights the first one. This method handles wrapping.\n   *\n   * @returns {Searcher} This Searcher.\n   */\n  highlightNextSearchResult() {\n    let searchResult = this.getHighlightedSearchResult();\n    if (searchResult !== null) {\n      searchResult = searchResult.getNextSibling();\n    }\n\n    // Grab the first search result in the list if there isn't a next sibling\n    if (searchResult === null) {\n      searchResult = this.searchResults.queryFirst('.search-result');\n    }\n\n    if (searchResult !== null) {\n      this.highlightSearchResult(searchResult);\n    }\n\n    return this;\n  }\n\n  /**\n   * Highlights the previous search result if one is highlighted. If there isn't a highlighted search result, this\n   * selects the last one. This method handles wrapping.\n   *\n   * @returns {Searcher} This Searcher.\n   */\n  highlightPreviousSearchResult() {\n    let searchResult = this.getHighlightedSearchResult();\n    if (searchResult !== null) {\n      searchResult = searchResult.getPreviousSibling();\n    }\n\n    if (searchResult === null) {\n      searchResult = this.searchResults.queryFirst('.search-result');\n    }\n\n    if (searchResult !== null) {\n      this.highlightSearchResult(searchResult);\n    }\n\n    return this;\n  }\n\n  /**\n   * Highlights the given search result.\n   *\n   * @param {PrimeElement} searchResult The search result to highlight.\n   * @returns {Searcher} This Searcher.\n   */\n  highlightSearchResult(searchResult) {\n    this.searchResults.getChildren().removeClass('selected');\n\n    searchResult.addClass('selected');\n    const scrollTop = this.searchResults.getScrollTop();\n    const height = this.searchResults.getHeight();\n    const searchResultOffset = searchResult.getOffsetTop();\n    if (searchResultOffset + 1 >= scrollTop + height) {\n      this.searchResults.scrollTo(searchResult.getOffsetTop() - this.searchResults.getHeight() + searchResult.getOuterHeight());\n    } else if (searchResultOffset < scrollTop) {\n      this.searchResults.scrollTo(searchResultOffset);\n    }\n\n    return this;\n  }\n\n  /**\n   * Initializes the Searcher by setting up the event listeners and closing the search result element.\n   *\n   * @returns {Searcher} This.\n   */\n  initialize() {\n    this.inputElement\n        .addEventListener('blur', this._handleBlurEvent)\n        .addEventListener('click', this._handleClickEvent)\n        .addEventListener('keyup', this._handleKeyUpEvent)\n        .addEventListener('keydown', this._handleKeyDownEvent)\n        .addEventListener('focus', this._handleFocusEvent);\n\n    this.closeSearchResults();\n    return this;\n  }\n\n  /**\n   * @returns {boolean} True if the search results add custom option is being displayed currently.\n   */\n  isCustomAddVisible() {\n    return this.searchResults.queryFirst('.custom-add') !== null;\n  }\n\n  /**\n   * @returns {boolean} True if any search results are being displayed currently.\n   */\n  isSearchResultsVisible() {\n    return this.searchResults.hasClass('open');\n  }\n\n  /**\n   * Poor mans resizing of the input field as the user types into it.\n   */\n  resizeInput() {\n    const text = this.inputElement.getValue() === '' ? this.inputElement.getAttribute('placeholder') : this.inputElement.getValue();\n    const newLength = Utils.calculateTextLength(this.inputElement, text) + 35;\n    this.inputElement.setWidth(newLength);\n  }\n\n  /**\n   * Executes a search by optionally updating the input to the given value (if specified) and then rebuilding the search\n   * results using the input's value. This method also puts focus on the input and shows the search results (in case\n   * they are hidden for any reason).\n   *\n   * @param {string} [searchText] The text to search for (this value is also set into the input box). If this is not\n   * specified then the search is run using the input's value.\n   * @returns {Searcher} This Searcher.\n   */\n  search(searchText) {\n    // Set the search text into the input box if it is different and then lowercase it\n    if (Utils.isDefined(searchText) && this.inputElement.getValue() !== searchText) {\n      this.inputElement.setValue(searchText);\n    }\n\n    searchText = Utils.isDefined(searchText) ? searchText.toLowerCase() : this.inputElement.getValue();\n    this.resizeInput();\n\n    // Clear the search results (if there are any)\n    this._removeAllSearchResults();\n\n    // Call the callback\n    const searchResults = this.options.callbackObject.search(searchText);\n    if (!searchResults.hasOwnProperty('results') || !searchResults.hasOwnProperty('tooManyResults')) {\n      throw new TypeError('The callback must return an Object that contains the properties results[Array] and tooManyResults[boolean]');\n    }\n\n    let count = 0;\n    let matchingSearchResultElement = null;\n    for (let i = 0; i < searchResults.results.length; i++) {\n      const searchResult = searchResults.results[i];\n      const element = PrimeDocument.newElement('<li/>')\n          .addClass('search-result')\n          .setAttribute('value', searchResult)\n          .setHTML(searchResult)\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('mouseover', this._handleMouseOverEvent)\n          .appendTo(this.searchResults);\n      if (searchResult.toLowerCase().trim() === searchText.toLowerCase().trim()) {\n        matchingSearchResultElement = element;\n      }\n\n      count++;\n    }\n\n    // Show the custom add option if necessary\n    const trimmedLength = searchText.trim().length;\n    if (this.options.customAddEnabled && trimmedLength !== 0 && matchingSearchResultElement === null\n        && (!('doesNotContainValue' in this.options.callbackObject) || this.options.callbackObject.doesNotContainValue(searchText))) {\n      matchingSearchResultElement = PrimeDocument.newElement('<li/>')\n          .addClass('custom-add')\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('mouseover', this._handleMouseOverEvent)\n          .setHTML(this.options.customAddLabel + Utils.escapeHTML(searchText))\n          .appendTo(this.searchResults);\n      count++;\n    }\n\n    if (count === 0 && trimmedLength !== 0) {\n      PrimeDocument.newElement('<li/>')\n          .addClass('no-search-results')\n          .setHTML(this.options.noSearchResultsLabel + Utils.escapeHTML(searchText))\n          .appendTo(this.searchResults);\n      count++;\n    }\n\n    // Handle too many results\n    if (searchResults.tooManyResults) {\n      PrimeDocument.newElement('<li/>')\n          .addClass('too-many-search-results')\n          .setHTML(this.options.tooManySearchResultsLabel + Utils.escapeHTML(searchText))\n          .appendTo(this.searchResults);\n      count++;\n    }\n\n    if (count !== 0) {\n      this.searchResults.show();\n      this.searchResults.addClass('open');\n\n      if (count >= 10) {\n        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * 10 + 1);\n      } else {\n        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * count + 1);\n      }\n    } else {\n      this.closeSearchResults();\n    }\n\n    if (matchingSearchResultElement !== null) {\n      this.highlightSearchResult(matchingSearchResultElement);\n    }\n\n    return this;\n  }\n\n  /**\n   * Selects the highlighted search result unless there isn't one highlighted, in which case, this does nothing.\n   *\n   * @returns {Searcher} This Searcher.\n   */\n  selectHighlightedSearchResult() {\n    const searchResult = this.getHighlightedSearchResult();\n    if (searchResult === null) {\n      return this;\n    }\n\n    const custom = searchResult.hasClass('custom-add');\n    const value = (custom) ? this.inputElement.getValue().trim() : searchResult.getHTML();\n    if (custom) {\n      // The client of this searcher needs to warn the user.\n      if (!this.options.customAddCallback(value)) {\n        return this;\n      }\n    }\n\n    this.options.callbackObject.selectSearchResult(value);\n    this.closeSearchResults();\n\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {Searcher} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets whether or not this Searcher allows custom options to be added.\n   *\n   * @param {boolean} enabled The flag.\n   * @returns {Searcher} This Searcher.\n   */\n  withCustomAddEnabled(enabled) {\n    this.options.customAddEnabled = enabled;\n    return this;\n  }\n\n  /**\n   * Sets whether or not this Searcher allows custom options to be added.\n   *\n   * @param {Function} callback The function to call that will return true if the custom option can be added.\n   * @returns {Searcher} This Searcher.\n   */\n  withCustomAddCallback(callback) {\n    this.options.customAddCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the label used when custom options are added.\n   *\n   * @param {string} customAddLabel The label.\n   * @returns {Searcher} This Searcher.\n   */\n  withCustomAddLabel(customAddLabel) {\n    this.options.customAddLabel = customAddLabel;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Searcher} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the label that is printed when there are no search results.\n   *\n   * @param {string} noSearchResultsLabel The label text.\n   * @returns {Searcher} This Searcher.\n   */\n  withNoSearchResultsLabel(noSearchResultsLabel) {\n    this.options.noSearchResultsLabel = noSearchResultsLabel;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Sets the label that is printed when there are too many search results.\n   *\n   * @param {string} tooManySearchResultsLabel The label text.\n   * @returns {Searcher} This Searcher.\n   */\n  withTooManySearchResultsLabel(tooManySearchResultsLabel) {\n    this.options.tooManySearchResultsLabel = tooManySearchResultsLabel;\n    return this;\n  }\n\n  /**\n   * Handles the blur event when the input goes out of focus.\n   *\n   * @private\n   */\n  _handleBlurEvent() {\n    window.setTimeout((function() {\n      if (document.activeElement !== this.inputElement.domElement) {\n        this.closeSearchResults();\n      }\n    }).bind(this), 300);\n  }\n\n  /**\n   * Handles all click events sent to the Searcher.\n   *\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleClickEvent(event) {\n    const target = new PrimeElement(event.currentTarget);\n    if (target.hasClass('custom-add') || target.hasClass('search-result')) {\n      this.selectHighlightedSearchResult();\n    } else if (target.domElement === this.inputElement.domElement) {\n      this.search();\n    } else {\n      console.log('Clicked something else target=[' + event.target + '] currentTarget=[' + event.currentTarget + ']');\n    }\n  }\n\n  /**\n   * Handles when the input field is focused by opening the search results.\n   *\n   * @private\n   */\n  _handleFocusEvent() {\n    this.search();\n  }\n\n  /**\n   * Handles the key down events that should not be propagated.\n   *\n   * @param {KeyboardEvent} event The keyboard event object.\n   * @private\n   */\n  _handleKeyDownEvent(event) {\n    const key = event.keyCode;\n    if (key === Events.Keys.BACKSPACE) {\n      this.previousSearchString = this.inputElement.getValue();\n    } else if (key === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      this.highlightPreviousSearchResult();\n    } else if (key === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      if (this.isSearchResultsVisible()) {\n        this.highlightNextSearchResult();\n      } else {\n        this.search();\n      }\n    } else if (key === Events.Keys.ENTER) {\n      Utils.stopEvent(event); // Don't bubble enter otherwise the form submits\n    }\n  }\n\n  /**\n   * Handles all key up events sent to the search results container.\n   *\n   * @param {KeyboardEvent} event The keyboard event object.\n   *  @private\n   */\n  _handleKeyUpEvent(event) {\n    const key = event.keyCode;\n    const value = this.inputElement.getValue();\n\n    if (key === Events.Keys.BACKSPACE) {\n      if (value === '' && this.previousSearchString === '') {\n        this.options.callbackObject.deletedBeyondSearchInput();\n      } else {\n        this.search();\n      }\n    } else if (key === Events.Keys.ENTER) {\n      Utils.stopEvent(event);\n      // If a search result is highlighted, add it\n      if (this.getHighlightedSearchResult() !== null) {\n        this.selectHighlightedSearchResult();\n      }\n    } else if (key === Events.Keys.ESCAPE) {\n      this.closeSearchResults();\n    } else if (key === Events.Keys.SPACE || key === Events.Keys.DELETE ||\n        (key >= 48 && key <= 90) || (key >= 96 && key <= 111) || (key >= 186 && key <= 192) || (key >= 219 && key <= 222)) {\n      this.search();\n    }\n  }\n\n  /**\n   * Handles mouseover events for the search results (only) by highlighting the event target.\n   *\n   * @param {Event} event The mouseover event.\n   * @private\n   */\n  _handleMouseOverEvent(event) {\n    const target = new PrimeElement(event.currentTarget);\n    this.highlightSearchResult(target);\n  }\n\n  /**\n   * Removes all of the search results.\n   *\n   * @private\n   */\n  _removeAllSearchResults() {\n    this.searchResults.query('li').removeAllFromDOM();\n  }\n\n  /* ===================================================================================================================\n   * Search function implementations.\n   * ===================================================================================================================*/\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions(callbackObject) {\n    // Defaults\n    this.options = {\n      callbackObject: callbackObject,\n      closeTimeout: 200,\n      customAddEnabled: true,\n      'customAddCallback'() {\n        return true;\n      },\n      customAddLabel: 'Add Custom: ',\n      noSearchResultsLabel: 'No Matches For: ',\n      tooManySearchResultsLabel: 'Too Many Matches For: ',\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.inputElement);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {Searcher};","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Events} from \"../Events\";\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\nimport {Searcher} from \"./Searcher\";\n\nlet count = 1;\nlet AddOptionEvent = 'MultipleSelect:addOption';\nlet DeselectOptionEvent = 'MultipleSelect:deselectOption';\nlet SelectOptionEvent = 'MultipleSelect:selectOption';\n\nclass MultipleSelect {\n  /**\n   * Constructs a MultipleSelect object for the given element.\n   *\n   * The MultipleSelect generates a number of different HTML elements directly after the SELECT element you pass to the\n   * constructor. A fully rendered MultipleSelect might look something like this:\n   *\n   * <pre>\n   * &lt;select id=\"foo\">\n   *   &lt;option value=\"one\">One&lt;/option>\n   *   &lt;option value=\"two\">Two&lt;/option>\n   *   &lt;option value=\"three\">Three&lt;/option>\n   * &lt;/select>\n   * &lt;div id=\"foo-display\" class=\"prime-multiple-select\">\n   *   &lt;ul id=\"foo-option-list\" class=\"option-list\">\n   *     &lt;li id=\"foo-option-one\">&lt;span>One&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n   *     &lt;li id=\"foo-option-two\">&lt;span>Two&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n   *     &lt;li id=\"foo-option-three\">&lt;span>Three&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n   *     &lt;li>&lt;input type=\"text\" value=\"aaa\"/>&lt;/li>\n   *   &lt;/ul>\n   *   &lt;ul class=\"search-results\">\n   *     &lt;li>One&lt;/li>\n   *     &lt;li>Two&lt;/li>\n   *     &lt;li>Three&lt;/li>\n   *     &lt;li>Add Custom Entry: aaa/li>\n   *   &lt;/ul>\n   * &lt;/div>\n   * </pore>\n   *\n   * The with* methods can be used to setup the configuration for this MultipleSelect, but here are some defaults:\n   *\n   * <ul>\n   *   <li>placeholder = \"Choose\"</li>\n   *   <li>customAddEnabled = true</li>\n   *   <li>customAddLabel = \"Add Custom Value:\"</li>\n   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n   * </ul>\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the MultipleSelect.\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    if (this.element.domElement.tagName !== 'SELECT') {\n      throw new TypeError('You can only use MultipleSelect with select elements');\n    }\n\n    if (this.element.getAttribute('multiple') !== 'multiple') {\n      throw new TypeError('The select box you are attempting to convert to a MultipleSelect must have the multiple=\"multiple\" attribute set');\n    }\n\n    this._setInitialOptions();\n  }\n\n  /*\n   * Statics\n   */\n  /**\n   * @returns {number}\n   */\n  static get count() {\n    return count;\n  }\n\n  /**\n   * @param {number} value\n   */\n  static set count(value) {\n    count = value;\n  }\n\n  /**\n   * @returns {string}\n   */\n  static get AddOptionEvent() {\n    return AddOptionEvent;\n  }\n\n  /**\n   * @param {string} value\n   */\n  static set AddOptionEvent(value) {\n    AddOptionEvent = value;\n  }\n\n  /**\n   * @returns {string}\n   */\n  static get DeselectOptionEvent() {\n    return DeselectOptionEvent;\n  }\n\n  /**\n   * @param {string} value\n   */\n  static set DeselectOptionEvent(value) {\n    DeselectOptionEvent = value;\n  }\n\n  /**\n   * @returns {string}\n   */\n  static get SelectOptionEvent() {\n    return SelectOptionEvent;\n  }\n\n  /**\n   * @param {string} value\n   */\n  static set SelectOptionEvent(value) {\n    SelectOptionEvent = value;\n  }\n\n  /**\n   * Finds the HTMLSelectOption with the given id and returns it wrapped in a PrimeElement.\n   *\n   * @param {String} id\n   * @returns {PrimeElement}\n   */\n  static findOptionWithId(id) {\n    return PrimeDocument.queryFirst('[data-option-id=\"' + id + '\"]');\n  }\n\n  /**\n   * Pass through to add event listeners to This. The custom events that this MultipleSelect fires are:\n   *\n   *  'MultipleSelect:deselectOption'\n   *  'MultipleSelect:selectOption'\n   *  'MultipleSelect:addOption'\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The listener function.\n   * @returns {MultipleSelect} This.\n   */\n  addEventListener(event, listener) {\n    this.element.addEventListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Determines if this MultipleSelect contains an option with the given value.\n   *\n   * @param {String} value The value to look for.\n   */\n  containsOptionWithValue(value) {\n    return this.findOptionWithValue(value) !== null;\n  }\n\n  /**\n   * Adds the given option to this select. The option will not be selected.\n   *\n   * @param {String} value The value for the option.\n   * @param {String} display The display text for the option.\n   * @param {?String} [id] The id of the element. (Defaults to null)\n   * @returns {MultipleSelect} This.\n   */\n  addOption(value, display, id) {\n    if ((id === null || id === undefined) && this.containsOptionWithValue(value)) {\n      return this;\n    }\n\n    let element = PrimeDocument.newElement('<option/>')\n        .setValue(value)\n        .setHTML(display)\n        .appendTo(this.element);\n\n    if (id) {\n      element.setDataAttribute(\"optionId\", id);\n    }\n\n    // Fire the custom event\n    this.element.fireEvent(MultipleSelect.AddOptionEvent, value, this);\n\n    return this;\n  }\n\n  /**\n   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n   * removing the option from the display container. If the MultipleSelect doesn't contain an option for the given value,\n   * this method throws an exception.\n   *\n   * @param {String} value The value to look for.\n   * @returns {MultipleSelect} This.\n   */\n  deselectOptionWithValue(value) {\n    const option = this.findOptionWithValue(value);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n    }\n\n    this.deselectOption(option);\n\n    return this;\n  }\n\n  /**\n   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n   * removing the option from the display container.\n   *\n   * @param {PrimeElement} option The option to deselect.\n   * @returns {MultipleSelect} This.\n   */\n  deselectOption(option) {\n    option.setSelected(false);\n\n    const id = option.getDataAttribute('optionId') || this._makeOptionID(option);\n    const displayOption = PrimeDocument.queryById(id);\n    if (displayOption !== null) {\n      displayOption.removeFromDOM();\n    }\n\n    // If there are no selected options left, add back the placeholder attribute to the input and resize it\n    if (this.optionList.query('li').length === 1) {\n      this.input.setAttribute('placeholder', this.options.placeholder);\n      this.searcher.resizeInput();\n    }\n\n    // Fire the custom event\n    this.element.fireEvent(MultipleSelect.DeselectOptionEvent, option.getValue(), this);\n\n    return this;\n  }\n\n  /**\n   * Destroys the widget completely.\n   */\n  destroy() {\n    this.element.show();\n    this.displayContainer.removeFromDOM();\n  }\n\n  /**\n   * Finds the HTMLSelectOption with the given text and returns it wrapped in a PrimeElement.\n   *\n   * @param {String} text The text to look for.\n   * @returns {PrimeElement} The option element or null.\n   */\n  findOptionWithText(text) {\n    const options = this.element.getOptions();\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].getTextContent() === text) {\n        return options[i];\n      }\n    }\n\n    return null;\n  }\n\n  deselectOptionWithId(id) {\n    const option = MultipleSelect.findOptionWithId(id);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the id [' + id + ']');\n    }\n\n    this.deselectOption(option);\n\n    return this;\n  }\n\n  /**\n   * Finds the HTMLSelectOption with the given value and returns it wrapped in a PrimeElement.\n   *\n   * @param {String} value The value to look for.\n   * @returns {PrimeElement} The option element or null.\n   */\n  findOptionWithValue(value) {\n    for (let i = 0; i < this.element.domElement.length; i++) {\n      const cur = this.element.domElement.options[i];\n      if (cur.value === value) {\n        return new PrimeElement(cur);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * @returns {string[]} The currently selected options values.\n   */\n  getSelectedValues() {\n    return this.element.getSelectedValues();\n  }\n\n  /**\n   * Determines if the MultipleSelect contains an option with the given value.\n   *\n   * @param {string} value The value.\n   * @returns {boolean} True if the MultipleSelect contains an option with the given value, false otherwise.\n   */\n  hasOptionWithValue(value) {\n    return this.findOptionWithValue(value) !== null;\n  }\n\n  /**\n   * Highlights the final selected option (if there is one) to indicate that it will be unselected if the user clicks\n   * the delete key again.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  highlightOptionForUnselect() {\n    const options = this.optionList.getChildren();\n    if (options.length > 1) {\n      options[options.length - 2].addClass('selected');\n    }\n\n    return this;\n  }\n\n  /**\n   * Initializes the display from the underlying select element. All of the current display options (li elements) are\n   * removed. New display options are added for each selected option in the select box.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  initialize() {\n    this.element.hide();\n\n    let id = this.element.getId();\n    if (id === null || id === '') {\n      id = 'prime-multiple-select' + MultipleSelect.count++;\n      this.element.setId(id);\n    }\n\n    this.displayContainer = PrimeDocument.queryById(id + '-display');\n    this.input = null;\n    if (this.displayContainer === null) {\n      this.displayContainer = PrimeDocument.newElement('<div/>')\n          .setId(id + '-display')\n          .addClass(this.options.className)\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('keyup', this._handleKeyUpEvent)\n          .insertAfter(this.element);\n\n      this.optionList = PrimeDocument.newElement('<ul/>')\n          .addClass('option-list')\n          .appendTo(this.displayContainer);\n\n      this.searchResults = PrimeDocument.newElement('<ul/>')\n          .addClass('search-results')\n          .hide()\n          .appendTo(this.displayContainer);\n    } else {\n      this.displayContainer\n          .removeAllEventListeners()\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('keyup', this._handleKeyUpEvent);\n      this.optionList = this.displayContainer.queryFirst('.option-list');\n      this.searchResults = this.displayContainer.queryFirst('.search-results');\n    }\n\n    PrimeDocument.queryFirst('html').addEventListener('click', this._handleGlobalClickEvent);\n\n    // Close the search\n    this.searchResults.hide();\n\n    this._redraw();\n\n    return this;\n  }\n\n  /**\n   * @returns {boolean} True if the last option is highlighted for unselect.\n   */\n  isLastOptionHighlightedForUnselect() {\n    const options = this.optionList.getChildren();\n    return options.length > 1 && options[options.length - 2].hasClass('selected');\n  }\n\n  /**\n   * Removes all of the options from the MultipleSelect.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  removeAllOptions() {\n    // Remove in reverse order because the options array is dynamically updated when elements are deleted from the DOM\n    const options = this.element.domElement.options;\n    for (let i = options.length - 1; i >= 0; i--) {\n      this.removeOption(new PrimeElement(options[i]));\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the highlighted option.\n   */\n  removeHighlightedOption() {\n    const options = this.optionList.getChildren();\n    if (this.options.allowDuplicates) {\n      this.deselectOptionWithId(options[options.length - 2].getId());\n    } else {\n      this.deselectOptionWithValue(options[options.length - 2].getAttribute('value'));\n    }\n    this.search();\n  }\n\n  /**\n   * Removes the given option from the MultipleSelect by removing the option in the select box and the option in the\n   * display container.\n   *\n   * @param {PrimeElement} option The option to remove.\n   * @returns {MultipleSelect} This.\n   */\n  removeOption(option) {\n    if (!(option instanceof PrimeElement)) {\n      throw new TypeError('MultipleSelect#removeOption only takes PrimeElement instances');\n    }\n\n    option.removeFromDOM();\n\n    let id, displayOption;\n    if (this.options.allowDuplicates) {\n      // The ids are random so we need to get the data attribute.\n      id = option.getDataAttribute('optionId');\n      displayOption = PrimeDocument.queryById(id);\n    } else {\n      // The ids aren't random and can be reproducably created.\n      id = this._makeOptionID(option);\n      displayOption = PrimeDocument.queryById(id);\n    }\n\n    // Check if the option has already been selected\n    if (displayOption !== null) {\n      displayOption.removeFromDOM();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the option with the given value from the MultipleSelect by removing the option in the select box and the\n   * option in the display container. If the MultipleSelect doesn't contain an option with the given value, this throws\n   * an exception.\n   *\n   * @param {string} value The value of the option to remove.\n   * @returns {MultipleSelect} This.\n   */\n  removeOptionWithValue(value) {\n    const option = this.findOptionWithValue(value);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n    }\n\n    this.removeOption(option);\n\n    return this;\n  }\n\n  /**\n   * Selects the given option by setting the selected attribute on the option in the select box (the object passed in is\n   * the option from the select box wrapped in a PrimeElement) and adding it to the display container. If the\n   * option is already in the display container, that step is skipped.\n   *\n   * @param {PrimeElement} option The option object from the select box wrapped in a PrimeElement instance.\n   * @returns {MultipleSelect} This.\n   */\n  selectOption(option) {\n    if (!(option instanceof PrimeElement)) {\n      throw new TypeError('MultipleSelect#selectOption only takes PrimeElement instances');\n    }\n\n    const id = this._makeOptionID(option);\n\n    // Check if the option has already been selected\n    if (PrimeDocument.queryById(id) === null) {\n      /*\n      If we allow dupes, always duplicate the option and append it to the end or the order will be a problem. The default multiselect doesn't support order)\n       */\n      if (this.options.allowDuplicates) {\n        this.addOption(option.getTextContent(), option.getTextContent(), id);\n        option = MultipleSelect.findOptionWithId(id);\n      }\n      option.setSelected(true);\n\n      const li = PrimeDocument.newElement('<li/>')\n          .setAttribute('value', option.getValue())\n          .setId(id)\n          .insertBefore(this.inputOption);\n      PrimeDocument.newElement('<span/>')\n          .setHTML(option.getHTML())\n          .setAttribute('value', option.getValue())\n          .appendTo(li);\n      PrimeDocument.newElement('<a/>')\n          .setAttribute('href', '#')\n          .setAttribute('value', option.getValue())\n          .setHTML(this.options.removeIcon)\n          .addEventListener('click', this._handleClickEvent)\n          .appendTo(li);\n    }\n\n    // Remove the placeholder attribute on the input and resize it\n    this.input.removeAttribute('placeholder');\n\n    // Close the search results and resize the input\n    this.searcher.closeSearchResults();\n\n    // Scroll the display to the bottom\n    this.optionList.scrollToBottom();\n\n    // Fire the custom event\n    this.element.fireEvent(MultipleSelect.SelectOptionEvent, option.getValue(), this);\n\n    return this;\n  }\n\n  /**\n   * Selects the option with the given value by setting the selected attribute on the option in the select box (the\n   * object passed in is the option from the select box wrapped in a PrimeElement) and adding it to the display\n   * container. If the option is already in the display container, that step is skipped.\n   * <p/>\n   * If there isn't an option with the given value, this throws an exception.\n   *\n   * @param {String} value The value of the option to select.\n   * @returns {MultipleSelect} This.\n   */\n  selectOptionWithValue(value) {\n    const option = this.findOptionWithValue(value);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n    }\n\n    this.selectOption(option);\n\n    return this;\n  }\n\n  /**\n   * Sets the selected options. This mimics the function on Element to provide consistency.\n   *\n   * @param {string[]} [arguments] The list of options to select based on their values.\n   * @returns {MultipleSelect} This.\n   */\n  setSelectedValues() {\n    this.element.setSelectedValues.apply(this.element, arguments);\n    this._redraw();\n    return this;\n  }\n\n  /**\n   * Unhighlights the last option if it is highlighted.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  unhighlightOptionForUnselect() {\n    this.optionList.getChildren().each(function(element) {\n      element.removeClass('selected');\n    });\n    return this;\n  }\n\n  withAllowDuplicates(value) {\n    this.options.allowDuplicates = value;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the MultipleSelect element.\n   *\n   * @param className {string} The class name.\n   * @returns {MultipleSelect} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {MultipleSelect} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets whether or not this MultipleSelect allows custom options to be added.\n   *\n   * @param {boolean} enabled The flag.\n   * @returns {MultipleSelect} This.\n   */\n  withCustomAddEnabled(enabled) {\n    this.options.customAddEnabled = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the label used when custom options are added.\n   *\n   * @param {string} customAddLabel The label.\n   * @returns {MultipleSelect} This.\n   */\n  withCustomAddLabel(customAddLabel) {\n    this.options.customAddLabel = customAddLabel;\n    return this;\n  }\n\n  /**\n   * Enable error class handling. When this option is used, if the specified error class is found on any element\n   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  withErrorClassHandling(errorClass) {\n    this.options.errorClass = errorClass;\n    return this;\n  }\n\n  /**\n   * Sets the label that is printed when there are no search results. This must be called before render is called.\n   *\n   * @param {string} noSearchResultsLabel The label text.\n   * @returns {MultipleSelect} This.\n   */\n  withNoSearchResultsLabel(noSearchResultsLabel) {\n    this.options.noSearchResultsLabel = noSearchResultsLabel;\n    return this;\n  }\n\n  /**\n   * Sets the placeholder text for This. This must be called before render is called.\n   *\n   * @param {string} placeholder The placeholder text.\n   * @returns {MultipleSelect} This.\n   */\n  withPlaceholder(placeholder) {\n    this.options.placeholder = placeholder;\n    return this;\n  }\n\n  /**\n   * Sets the remove icon value. This overrides the default value.\n   *\n   * @param {string} removeIcon The remove icon text.\n   * @returns {MultipleSelect} This.\n   */\n  withRemoveIcon(removeIcon) {\n    this.options.removeIcon = removeIcon;\n    return this;\n  }\n\n  /**\n   * Sets the search function that can be used to search other sources besides the select box that backs this widget.\n   *\n   * @param searchFunction {Function} The search function.\n   * @returns {MultipleSelect} This.\n   */\n  withSearchFunction(searchFunction) {\n    this.options.searchFunction = searchFunction;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Searcher's callback interface methods.\n   * ===================================================================================================================*/\n\n  /**\n   * Called when the Searcher gets a keyboard event that deletes beyond the search input. This highlights the last word\n   * in the phrase for removal.\n   */\n  deletedBeyondSearchInput() {\n    if (this.isLastOptionHighlightedForUnselect()) {\n      this.removeHighlightedOption();\n    }\n\n    this.highlightOptionForUnselect();\n  }\n\n  /**\n   * Called when the search needs to determine if the custom add option should be displayed. As long as this\n   * MultipleSelect does not contain the given value, the custom add option should be displayed.\n   *\n   * @param {string} value The value.\n   * @returns {boolean} True if this MultipleSelect does not contain the value, false otherwise.\n   */\n  doesNotContainValue(value) {\n    return !this.containsOptionWithValue(value);\n  }\n\n  /**\n   * Called when the Searcher is executing a search. This executes a search via the callback and returns the results.\n   *\n   * @param {string} [searchText] The text to search for.\n   * @returns {Object} The SearchResults.\n   */\n  search(searchText) {\n    this.unhighlightOptionForUnselect();\n    return this.options.searchFunction.call(null, searchText, this.element);\n  }\n\n  /**\n   * Called when the Searcher gets an event that causes a search result to be selected. This adds the word.\n   */\n  selectSearchResult(value) {\n    // Add the custom option if there is one\n    let option = this.findOptionWithText(value);\n    if (option === null) {\n      this.addOption(value, value);\n      option = this.findOptionWithText(value);\n    }\n\n    this.selectOption(option);\n  }\n\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the blur event when the input goes out of focus.\n   *\n   * @private\n   */\n  _handleBlurEvent() {\n    window.setTimeout((function() {\n      if (document.activeElement !== this.input.domElement) {\n        this.searcher.closeSearchResults();\n      }\n    }).bind(this), 300);\n    this.displayContainer.removeClass('focus');\n  }\n\n  /**\n   * Handles all click events sent to the MultipleSelect.\n   *\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleClickEvent(event) {\n    Utils.stopEvent(event);\n    const target = new PrimeElement(event.target);\n    if (target.is('a')) {\n      if (this.options.allowDuplicates) {\n        const id = target.getParent().getId();\n        this.removeOption(MultipleSelect.findOptionWithId(id));\n      } else {\n        this.removeOptionWithValue(target.getAttribute('value'));\n      }\n    } else if (target.is('span')) {\n      target.selectElementContents();\n    } else {\n      this.input.focus();\n    }\n  }\n\n  /**\n   * Handles the blur event when the input goes out of focus.\n   *\n   * @private\n   */\n  _handleFocusEvent() {\n    this.displayContainer.addClass('focus');\n  }\n\n  /**\n   * Handles mouse clicks outside of This. If they clicked anything that is not within this MultipleSelect,\n   * it closes the search results.\n   *\n   * @param {Event} event The event.\n   * @returns {boolean} Always true so the event is bubbled.\n   * @private\n   */\n  _handleGlobalClickEvent(event) {\n    const target = new PrimeElement(event.target);\n    if (this.displayContainer.domElement !== target.domElement && !target.isChildOf(this.displayContainer)) {\n      this.searcher.closeSearchResults();\n    }\n  }\n\n  /**\n   * Handles all key up events sent to the display container.\n   *\n   * @param {Event} event The browser event object.\n   * @returns {boolean} True if the search display is not open, false otherwise. This will prevent the event from continuing.\n   * @private\n   */\n  _handleKeyUpEvent(event) {\n    const key = event.keyCode;\n    if (key === Events.Keys.ESCAPE) {\n      this.unhighlightOptionForUnselect();\n    }\n  }\n\n  /**\n   * Makes an ID for the option.\n   *\n   * @param {PrimeElement} option The option to make the ID for.\n   * @private\n   */\n  _makeOptionID(option) {\n    if (this.options.allowDuplicates === true) {\n      let d = new Date().getTime();\n      // UUID ish\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        let r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n      });\n    }\n    return this.element.getId() + '-option-' + option.getValue().replace(' ', '-');\n  }\n\n  /**\n   * Redraws the widget.\n   * @private\n   */\n  _redraw() {\n    // Remove the currently displayed options\n    this.optionList.getChildren().each(function(option) {\n      option.removeFromDOM();\n    });\n\n    // Add the input option since the select options are inserted before it\n    this.inputOption = PrimeDocument.newElement('<li/>')\n        .appendTo(this.optionList);\n    this.input = PrimeDocument.newElement('<input/>')\n        .addEventListener('click', this._handleClickEvent)\n        .addEventListener('blur', this._handleBlurEvent)\n        .addEventListener('focus', this._handleFocusEvent)\n        .setAttribute('type', 'text')\n        .appendTo(this.inputOption);\n    this.searcher = new Searcher(this.input, this.searchResults, this)\n        .withOptions(this.options)\n        .initialize();\n\n    // Add the selected options\n    let hasSelectedOptions = false;\n    const options = this.element.getOptions();\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      if (option.isSelected()) {\n        this.selectOption(option);\n        hasSelectedOptions = true;\n      }\n    }\n\n    // Put the placeholder attribute in if the MultipleSelect has no selected options\n    if (!hasSelectedOptions) {\n      this.input.setAttribute('placeholder', this.options.placeholder);\n    }\n\n    this.searcher.resizeInput();\n\n    // If error class handling was enabled and the select box has the error class, add it to the display\n    if (this.options.errorClass && this.element.hasClass(this.options.errorClass)) {\n      this.displayContainer.addClass(this.options.errorClass);\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      allowDuplicates: false,\n      className: 'prime-multiple-select',\n      closeTimeout: 200,\n      customAddEnabled: true,\n      customAddLabel: 'Add Custom Value: ',\n      errorClass: null,\n      noSearchResultsLabel: 'No Matches For: ',\n      placeholder: 'Choose',\n      removeIcon: 'X',\n      searchFunction: Searcher.selectSearchFunction\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {MultipleSelect};\n","/*\n * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"../Utils\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\n\n//Some externs to make intellij linter shutup. :p\n/**\n * @external TouchEvent\n */\n\n/**\n * @property {Array} changedTouches\n * @name TouchEvent#changedTouches\n */\n\n/**\n * @class Touchable\n */\nclass Touchable {\n  /**\n   * Constructs a new Touchable object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Touchable widget.\n   * @param {Function} [eventPropagationHandler] A Function that handles how the event is handled for the touchstart,\n   * touchend, touchmove, and touchcancel events. This Function takes the event object as its only parameter.\n   * @constructor\n   */\n  constructor(element, eventPropagationHandler) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this.eventPropagationHandler = eventPropagationHandler;\n  }\n\n  /**\n   * Destroys the Touchable Widget\n   */\n  destroy() {\n    this.element\n        .removeEventListener('touchstart', this._handleTouchStart)\n        .removeEventListener('touchmove', this._handleTouchMove)\n        .removeEventListener('touchcancel', this._handleTouchCancel)\n        .removeEventListener('touchend', this._handleTouchEnd)\n        .removeEventListenersByPattern(/Prime\\.Widgets\\.Touchable:.+/)\n  }\n\n  /**\n   * Initializes the widget by attaching all of the event listeners to the element.\n   *\n   * @returns {Touchable} This.\n   */\n  initialize() {\n    this.element\n        .addEventListener('touchstart', this._handleTouchStart)\n        .addEventListener('touchmove', this._handleTouchMove)\n        .addEventListener('touchcancel', this._handleTouchCancel)\n        .addEventListener('touchend', this._handleTouchEnd);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a long press is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withLongPressHandler(handler) {\n    this.element.addEventListener('Touchable:longPress', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a move event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withMoveHandler(handler) {\n    this.element.addEventListener('Touchable:move', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a long press is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeDownHandler(handler) {\n    this.element.addEventListener('Touchable:swipeDown', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a swipe left event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeLeftHandler(handler) {\n    this.element.addEventListener('Touchable:swipeLeft', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a swipe right event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeRightHandler(handler) {\n    this.element.addEventListener('Touchable:swipeRight', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a swipe up event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeUpHandler(handler) {\n    this.element.addEventListener('Touchable:swipeUp', handler);\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Collects all of the touch data at the end of the touch and calculates the distances and times.\n   *\n   * @param {TouchEvent} event The TouchEvent.\n   * @private\n   */\n  _collectTouchData(event) {\n    const touchPoints = event.changedTouches.length;\n    if (touchPoints > 1) {\n      return;\n    }\n\n    const touch = event.changedTouches[0];\n    this.elapsedTime = new Date().getTime() - this.touchStarted;\n    this.touchEndX = touch.pageX;\n    this.touchEndY = touch.pageY;\n    this.touchX = this.touchStartX - this.touchEndX;\n    this.touchY = this.touchStartY - this.touchEndY;\n  }\n\n  /**\n   * Called when all processing is finished and the handlers are called based on direction and time of the touches.\n   *\n   * @private\n   */\n  _finished() {\n    // Make sure this was a swipe\n    const event = {\n      elapsedTime: this.elapsedTime,\n      touchStartX: this.touchStartX,\n      touchStartY: this.touchStartY,\n      touchEndX: this.touchEndX,\n      touchEndY: this.touchEndY,\n      touchX: this.touchX,\n      touchY: this.touchY,\n      element: this.element,\n      target: this.element.domElement\n    };\n    event.swipe = Math.abs(event.touchX) > 50 || Math.abs(event.touchY) > 50;\n    event.swipeX = event.swipe && Math.abs(event.touchX) > Math.abs(event.touchY);\n    event.swipeY = event.swipe && !event.swipeX;\n    event.longPress = !event.swipe && event.elapsedTime > 500;\n\n    if (event.longPress) {\n      this.element.fireCustomEvent('Touchable:longPress', event);\n    } else if (event.swipeX && event.touchX > 0) {\n      this.element.fireCustomEvent('Touchable:swipeLeft', event);\n    } else if (event.swipeX) {\n      this.element.fireCustomEvent('Touchable:swipeRight', event);\n    } else if (event.swipeY && event.touchY > 0) {\n      this.element.fireCustomEvent('Touchable:swipeUp', event);\n    } else if (event.swipeY) {\n      this.element.fireCustomEvent('Touchable:swipeDown', event);\n    }\n  }\n\n  /**\n   * Handle the touch cancel event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchCancel(event) {\n    this._collectTouchData(event);\n    this._finished();\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n\n  /**\n   * Handle the touch end event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchEnd(event) {\n    this._collectTouchData(event);\n    this._finished();\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n\n  /**\n   * Handle the touch move event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchMove(event) {\n    this.element.fireEvent('Touchable:move', event);\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n\n  /**\n   * Handle the touch start event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchStart(event) {\n    const touchPoints = event.changedTouches.length;\n    if (touchPoints > 1) {\n      if (Utils.isDefined(this.eventPropagationHandler)) {\n        this.eventPropagationHandler(event);\n      }\n\n      return;\n    }\n\n    const touch = event.changedTouches[0];\n    this.touchStarted = new Date().getTime();\n    this.touchStartX = touch.pageX;\n    this.touchStartY = touch.pageY;\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n}\n\nexport {Touchable};\n","/*\n * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Touchable} from \"./Touchable\";\nimport {Utils} from \"../Utils\";\n\nclass SideMenu {\n  /**\n   * Constructs the side menu.\n   *\n   * @param {PrimeElement|Element} button The button element that is used to open the side menu.\n   * @param {PrimeElement|Element} sideMenuElement The side menu element that will be \"hidden\" and \"show\".\n   * @constructor\n   */\n  constructor(button, sideMenuElement) {\n    Utils.bindAll(this);\n    this.sideMenu = PrimeElement.wrap(sideMenuElement);\n    this.button = PrimeElement.wrap(button);\n    this._setInitialOptions();\n  }\n\n  /**\n   * Closes the side menu.\n   *\n   * @returns {SideMenu} This.\n   */\n  close() {\n    if (!PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n      PrimeDocument.bodyElement.addClass(this.options.closedClass);\n    }\n\n    if (PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n      PrimeDocument.bodyElement.removeClass(this.options.openClass);\n    }\n\n    return this;\n  }\n\n  /**\n   * Initializes the widget by attaching the event listener to the menu button.\n   *\n   * @returns {SideMenu}\n   */\n  initialize() {\n    this.button.addEventListener('click', this._handleClickEvent);\n    return this;\n  }\n\n  /**\n   * @returns {boolean} True if the side menu is currently open.\n   */\n  isOpen() {\n    return this.sideMenu.getLeft() >= 0;\n    // return PrimeDocument.bodyElement.hasClass('prime-side-menu-open') || !PrimeDocument.bodyElement.hasClass('prime-side-menu-closed');\n  }\n\n  /**\n   * Opens the mobile nav.\n   * @returns {SideMenu} This.\n   */\n  open() {\n    if (PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n      PrimeDocument.bodyElement.removeClass(this.options.closedClass);\n    }\n\n    if (!PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n      PrimeDocument.bodyElement.addClass(this.options.openClass);\n    }\n\n    this.touchable = new Touchable(PrimeDocument.bodyElement).withSwipeLeftHandler(this._handleSwipeLeft);\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {SideMenu} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the click event on the side menu button and calls either the open or close function.\n   *\n   * @private\n   */\n  _handleClickEvent(event) {\n    Utils.stopEvent(event);\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Handles the synthetic swipe left event that Prime.js provides.\n   *\n   * @private\n   */\n  _handleSwipeLeft() {\n    if (this.isOpen()) {\n      this.close();\n    }\n\n    if (Utils.isDefined(this.touchable)) {\n      this.touchable.destroy();\n      this.touchable = null;\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      closedClass: 'prime-side-menu-closed',\n      openClass: 'prime-side-menu-open'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.sideMenu);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {SideMenu}\n","/*\n * Copyright (c) 2014-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\n\nclass SplitButton {\n  /**\n   * Constructs a new SplitButton object for the given ul element.\n   *\n   * The markup must be a ul element with one or more items containing an a tag with an href.\n   * You may optionally add a 'default' class on one of the items to indicate this is the default action.\n   * If this is not provided the first item will be considered the default action.\n   *\n   * Example 1, two actions the second action is set as default and shows on top w/out expansion.\n   * <pre>\n   *   &lt;ul&gt;\n   *     &lt;li&gt;&lt;a href=\"/admin/foo/delete/\"&gt;Delete&lt;/a&gt;&lt;/li&gt;\n   *     &lt;li class=\"default\"&gt;&lt;a href=\"/admin/foo/edit/\"&gt;Edit&lt;/a&gt;&lt;/li&gt;\n   *   &lt;/ul&gt;\n   * </pre>\n   *\n   * Example 2, two actions w/out a default. The top level action causes the button to expand.\n   * <pre>\n   *   &lt;ul&gt;\n   *     &lt;li&gt;&lt;a href=\"#\"&gt;Select&hellip;&lt;/a&gt;&lt;/li&gt;\n   *     &lt;li&gt;&lt;a href=\"/admin/foo/delete/\"&gt;Delete&lt;/a&gt;&lt;/li&gt;\n   *     &lt;li&gt;&lt;a href=\"/admin/foo/edit/\"&gt;Edit&lt;/a&gt;&lt;/li&gt;\n   *   &lt;/ul&gt;\n   * </pre>\n   *\n   * @param element {PrimeElement|Element|EventTarget} The ul element to transform into a split button.\n   * @constructor\n   */\n  constructor(element) {\n    this.element = PrimeElement.wrap(element);\n    const nodeName = this.element.domElement.nodeName.toLowerCase();\n    if (nodeName !== 'ul') {\n      throw new TypeError('SplitButton requires a ul element. The passed element type is <' + nodeName + '>');\n    }\n\n    if (this.element.hasClass('prime-initialized')) {\n      throw new Error('This element has already been initialized. Call destroy before initializing again.');\n    }\n\n    Utils.bindAll(this);\n\n    this.element.hide().addClass('prime-split-button');\n    this.container = PrimeDocument.queryUp('div,td', this.element);\n\n    // If a default action was not found, use the first one\n    this.defaultAction = this.element.queryFirst('ul > li.default a');\n    if (this.defaultAction === null) {\n      this.defaultAction = this.element.queryFirst('ul > li a');\n    }\n\n    // Build the split button markup and add listeners\n    this._buildSplitButton();\n    this.splitButton.addEventListener('mouseover', this._handleMouseOver);\n    this.splitButton.addEventListener('mouseout', this._handleMouseOut);\n    this.element.addEventListener('mouseout', this._handleMouseOut);\n    this.dropDown.addEventListener('click', this._handleDropDownClick);\n    this.dropDownDiv.addEventListener('click', this._handleDropDownClick);\n    this.defaultButton.addEventListener('click', this._handleDefaultButton);\n\n    // Register a single global listener to handle closing buttons\n    const body = new PrimeElement(document.body);\n    if (!body.getAttribute('data-prime-split-button-handler')) {\n      body.addEventListener('click', this._hideAllButtons);\n      body.setAttribute('data-prime-split-button-handler', 'true');\n    }\n    this.element.addClass('prime-initialized');\n  }\n\n  /**\n   * Destroy the the SplitButton widget\n   */\n  destroy() {\n    this.splitButton.removeAllEventListeners();\n    this.dropDown.removeAllEventListeners();\n    this.splitButton.removeFromDOM();\n\n    this.element.removeEventListener('mouseout', this._handleMouseOut);\n    this.element.removeAttribute('data-prime-active');\n    this.element.setStyle('margin-top', '');\n    this.element.removeClass('prime-initialized prime-split-button').show();\n    this.defaultAction.show();\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Clear the active marker.\n   * @private\n   */\n  _clearActiveMarker() {\n    PrimeDocument.query('ul.prime-split-button.prime-initialized[data-prime-active]').each(function(element) {\n      element.removeAttribute('data-prime-active');\n    });\n  }\n\n  /**\n   * Handle the default button click\n   * @param {MouseEvent} event the click event.\n   * @private\n   */\n  _handleDefaultButton(event) {\n    Utils.stopEvent(event);\n    this.defaultAction.fireEvent('click', null, null, false, true);\n  }\n\n  /**\n   * Handle the split button click to expand the action list.\n   * @param {MouseEvent} event the click event.\n   * @private\n   */\n  _handleDropDownClick(event) {\n    Utils.stopEvent(event);\n    this._clearActiveMarker();\n    this._setActiveMarker();\n    this._hideAllButtons();\n\n    if (this.element.isVisible()) {\n      this.element.hide();\n      this.splitButton.addClass('prime-inactive')\n    } else {\n      this.element.setStyle('margin-top', this.dropDownDiv.getHeight() + 2 + 'px');\n      this.element.show();\n      let width = 1;\n      this.splitButton.getChildren('div').each(function(element) {\n        width += element.getWidth();\n      });\n      this.element.setWidth(width);\n      this.splitButton.removeClass('prime-inactive')\n    }\n  }\n\n  /**\n   * Handles the mouse over event.\n   *\n   * @private\n   */\n  _handleMouseOver() {\n    this.splitButton.removeClass('prime-inactive')\n  }\n\n  /**\n   * Handles the mouse out event.\n   *\n   * @private\n   */\n  _handleMouseOut() {\n    if (!this.element.isVisible()) {\n      this.splitButton.addClass('prime-inactive')\n    }\n  }\n\n  /**\n   * Build the necessary markup to transform the ul to a split button action.\n   * @private\n   */\n  _buildSplitButton() {\n\n    const div = PrimeDocument.newElement('<div>');\n    div.addClass('prime-split-button prime-inactive');\n    div.prependTo(this.container);\n\n    // set a reference to this object\n    this.splitButton = PrimeDocument.queryFirst('div.prime-split-button', this.container);\n\n    let buttonDiv = PrimeDocument.newElement('<div>');\n    const button = PrimeDocument.newElement('<a>');\n\n    button.addClass('prime-split-button-default');\n    button.setAttribute('href', this.defaultAction.getAttribute('href'));\n    button.setHTML(this.defaultAction.getHTML());\n    // Setting href to '#' will expand the button and remove it from the expanded list\n    if (button.getAttribute('href') === '#') {\n      button.addEventListener('click', this._handleDropDownClick);\n      this.defaultAction.getParent().hide();\n    }\n\n    let dropDownDiv = PrimeDocument.newElement('<div>');\n    const dropDown = PrimeDocument.newElement('<a>');\n    dropDown.addClass('prime-drop-down');\n\n    dropDownDiv.prependTo(this.splitButton);\n    // re-assign reference to the DOM element\n    dropDownDiv = PrimeDocument.queryLast('div', this.splitButton);\n    dropDown.prependTo(dropDownDiv.domElement);\n\n    buttonDiv.prependTo(this.splitButton);\n    // re-assign reference to the DOM element\n    buttonDiv = PrimeDocument.queryFirst('div', this.splitButton);\n    button.prependTo(buttonDiv.domElement);\n\n    this.defaultButton = PrimeDocument.queryFirst('div', this.splitButton);\n    this.dropDown = PrimeDocument.queryFirst('a.prime-drop-down', this.splitButton);\n    this.dropDownDiv = PrimeDocument.queryUp('div', this.dropDown);\n    this.element.setStyle('margin-top', this.dropDown.getHeight() + '');\n  }\n\n  /**\n   * Hide all visible split buttons on the page. And ensure all are set to inactive.\n   * @param {Event} [event] The JavaScript event - this parameter is optional.\n   * @private\n   */\n  _hideAllButtons(event) {\n    PrimeDocument.query('ul.prime-split-button.prime-initialized').each(function(element) {\n      if (!Utils.isDefined(event)) {\n        if (!element.domElement.hasAttribute('data-prime-active') && element.isVisible()) {\n          element.hide();\n        }\n      } else {\n        if (element.isVisible()) {\n          element.hide();\n        }\n      }\n\n    });\n\n    PrimeDocument.query('div.prime-split-button:not(.prime-inactive)').each(function(element) {\n      element.addClass('prime-inactive');\n    });\n  }\n\n  /**\n   * Set the active split button.\n   * @private\n   */\n  _setActiveMarker() {\n    this.element.setAttribute('data-prime-active', 'true');\n  }\n}\n\nexport {SplitButton};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nconst PrimeStorage = {\n  /**\n   * True if local storage is supported.\n   * @type {boolean} true if local storage is supported. Local in this case being used to indicate either type 'local' or 'session'.\n   */\n  supported: typeof(Storage) !== 'undefined',\n\n  /**\n   * Set an object into session storage.\n   * @param key {string} the key to store the object.\n   * @param object {object} the object to store.\n   */\n  setSessionObject: function(key, object) {\n    PrimeStorage._setObject(sessionStorage, key, object);\n  },\n\n  /**\n   * Retrieve an object from session storage.\n   * @param key {string} the key that was used to store the object.\n   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n   */\n  getSessionObject: function(key) {\n    return PrimeStorage._getObject(sessionStorage, key);\n  },\n\n  /**\n   * Set an object into local storage storage.\n   * @param key {string} the key to store the object.\n   * @param object {object} the object to store.\n   */\n  setLocalObject: function(key, object) {\n    PrimeStorage._setObject(localStorage, key, object);\n  },\n\n  /**\n   * Retrieve an object from local storage.\n   * @param key {string} the key that was used to store the object.\n   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n   */\n  getLocalObject: function(key) {\n    return PrimeStorage._getObject(localStorage, key);\n  },\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  _getObject: function(storage, key) {\n    if (PrimeStorage.supported) {\n      const item = storage.getItem(key);\n      if (item !== null) {\n        return JSON.parse(item);\n      }\n    }\n\n    return null;\n  },\n\n  _setObject: function(storage, key, object) {\n    if (PrimeStorage.supported) {\n      storage.setItem(key, JSON.stringify(object));\n    }\n  }\n};\n\nexport {PrimeStorage};\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"../Utils\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {PrimeStorage} from \"../Storage\";\n\nclass Table {\n  /**\n   * Constructs a new Table object for the given table element.\n   *\n   * @param {PrimeElement|Element} element The table element.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.column = null;\n    this.columnIndex = 0;\n    this.sortAscending = true;\n\n    this.element = PrimeElement.wrap(element);\n    this.thead = this.element.queryFirst('thead');\n    this.tbody = this.element.queryFirst('tbody');\n\n    if (!this.element.is('table')) {\n      throw new TypeError('The element you passed in is not a table element.');\n    }\n\n    this._setInitialOptions();\n  }\n\n  /**\n   * Initializes the table widget.\n   *\n   * @returns {Table} This.\n   */\n  initialize() {\n    // Sortable by default unless it is disabled\n    if (this.element.getDataAttribute('sortable') !== 'false') {\n      this._initializeSort();\n    }\n\n    // Initialize the checkbox handling\n    this.selectAll = this.element.queryFirst('thead > tr > th input[type=\"checkbox\"]');\n    if (this.selectAll !== null) {\n      this.selectAll.addEventListener('change', this._handleSelectAllChange);\n    }\n\n    this.element.query('tbody > tr > td input[type=\"checkbox\"]').addEventListener('click', this._handleCheckboxEvent);\n    this.checkedCount = 0;\n    this.numberofCheckboxes = this.element.query('tbody td input[type=\"checkbox\"]').length;\n\n    return this;\n  }\n\n  /**\n   * Sort the table.\n   */\n  sort() {\n    this._clearSortIndicators();\n\n    if (this.column.hasClass('sort-up')) {\n      this.column.removeClass('sort-up').addClass('sort-down');\n      this.sortAscending = false;\n    } else if (this.column.hasClass('sort-down')) {\n      this.column.removeClass('sort-down').addClass('sort-up');\n      this.sortAscending = true;\n    } else {\n      this.column.addClass('sort-up');\n      this.sortAscending = true;\n    }\n\n    // Collect the values to sort\n    const rows = [];\n    this.tbody.query('tr').each(function(element) {\n      rows.push(element);\n    });\n\n    rows.sort(this._comparator);\n    let i = 0;\n    const length = rows.length;\n    if (this.sortAscending) {\n      for (i = 0; i <  length; i++) {\n        this.tbody.appendElement(rows[i]);\n      }\n    } else {\n      for (i = length; i > 0; i--) {\n        this.tbody.appendElement(rows[i - 1]);\n      }\n    }\n\n    // Save current sorted column state in local storage.\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      const data = {\n        columnIndex: this.columnIndex,\n        sortAscending: this.sortAscending\n      };\n      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n    }\n  }\n\n  /**\n   * Sets a callback on a checkbox event.\n   *\n   * @param {function} callback The callback function\n   * @returns {Table} This.\n   */\n  withCheckEventCallback(callback) {\n    this.options.checkEventCallback = callback;\n    return this;\n  }\n\n  /**\n   * Enables local storage of the sorted column. This key is required to enable local storage of the sorted column.\n   *\n   * @param {String} key The local storage key.\n   * @returns {Table} This.\n   */\n  withLocalStorageKey(key) {\n    this.options.localStorageKey = key;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Table} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Remove the ascending and descending sort classes on every column except the current column being sorted.\n   * @private\n   */\n  _clearSortIndicators() {\n    this.thead.query('th').each((function(element) {\n      if (element.domElement !== this.column.domElement) {\n        element.removeClass('sort-up sort-down');\n      }\n    }).bind(this));\n  }\n\n  /**\n   * Sort function to be used by the .sort() method.\n   * @param a The first row to compare\n   * @param b The second row to compare\n   * @returns {number}\n   * @private\n   */\n  _comparator(a, b) {\n    const sortType = this.thead.query('th')[this.columnIndex].getDataAttribute('sortType') || 'string';\n    if (sortType !== 'string' && sortType !== 'number') {\n      throw new Error('Unsupported sort type. [string] or [number] are the two supported sort types.');\n    }\n\n    const cell1 = a.query('td')[this.columnIndex];\n    const cell2 = b.query('td')[this.columnIndex];\n\n    const sortValue1 = cell1.getDataAttribute('sortValue');\n    const sortValue2 = cell2.getDataAttribute('sortValue');\n\n    // Prefer the data-sort-value if provided\n    let value1 = sortValue1 || cell1.getTextContent().toLowerCase();\n    let value2 = sortValue2 || cell2.getTextContent().toLowerCase();\n\n    if (sortType === 'string') {\n      return value1.localeCompare(value2);\n    } else {\n      value1 = this._toNumber(value1);\n      value2 = this._toNumber(value2);\n\n      if (value1 < value2) {\n        return -1;\n      }\n\n      if (value1 > value2) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Return the column index where 0 is the first column in the table.\n   * @param column {PrimeElement} the column to determine the index of\n   * @returns {number} a positive integer representing the index of the column in the table.\n   * @private\n   */\n  _getColumnIndex(column) {\n    let columnIndex = 0;\n    let current = column;\n    let previous = column;\n    while (previous !== null) {\n      previous = current.getPreviousSibling();\n      current = previous;\n      columnIndex++;\n    }\n\n    return columnIndex - 1;\n  }\n\n  _handleCheckboxEvent(event) {\n    const target = new PrimeElement(event.currentTarget);\n    const currentCheckedCount = this.checkedCount;\n    this.checkedCount = this.checkedCount + (target.isChecked() ? 1 : -1);\n\n    if (this.selectAll !== null) {\n      if (currentCheckedCount === this.numberofCheckboxes && this.numberofCheckboxes !== this.checkedCount) {\n        this.selectAll.setChecked(false);\n      } else if (currentCheckedCount !== this.numberofCheckboxes && this.numberofCheckboxes === this.checkedCount) {\n        this.selectAll.setChecked(true);\n      }\n    }\n\n    if (this.options.checkEventCallback !== null) {\n      this.options.checkEventCallback({\n        checkedCount: this.checkedCount\n      });\n    }\n  }\n\n  _handleSelectAllChange() {\n    if (this.selectAll.isChecked()) {\n      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n        if (!e.isChecked()) {\n          e.setChecked(true);\n          this.checkedCount++;\n        }\n      }.bind(this));\n    } else {\n      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n        if (e.isChecked()) {\n          e.setChecked(false);\n          this.checkedCount--;\n        }\n      }.bind(this));\n    }\n\n    if (this.options.checkEventCallback !== null) {\n      this.options.checkEventCallback({\n        checkedCount: this.checkedCount\n      });\n    }\n  }\n\n  /**\n   * Handle the click event on the sortable column.\n   * @param event {MouseEvent} the click event\n   * @private\n   */\n  _handleSortableColumnClick(event) {\n    Utils.stopEvent(event);\n    const target = new PrimeElement(event.currentTarget);\n    this.column = target;\n    this.columnIndex = this._getColumnIndex(target);\n\n    this.sort();\n  }\n\n  /**\n   * Add the click event listener to the column unless it matches the ignore selector.\n   * @param column {PrimeElement} the column element to initialize.\n   * @private\n   */\n  _initializeColumn(column) {\n    if (!column.is('[data-sortable=\"false\"]') && column.queryFirst('input[type=\"checkbox\"]') === null) {\n      column.addClass('sortable').addEventListener('click', this._handleSortableColumnClick);\n    }\n  }\n\n  _initializeSort() {\n    this.thead.query('th').each(this._initializeColumn);\n\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n      if (state !== null) {\n        this.columnIndex = state.columnIndex;\n        this.sortAscending = state.sortAscending;\n\n        this.column = this.thead.query('th')[this.columnIndex];\n        if (this.sortAscending) {\n          this.column.addClass('sort-down');\n        } else {\n          this.column.addClass('sort-up');\n        }\n\n        this.sort();\n      }\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      localStorageKey: null,\n      checkEventCallback: null\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n\n  // noinspection JSMethodCanBeStatic\n  _toNumber(value) {\n    const number = Number(value);\n    if (isNaN(value)) {\n      console.error(new Error('Expected value [' + value + '] to be a number.'));\n      return value;\n    }\n    return number;\n  }\n}\n\nexport {Table};\n","/*\n * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"../Utils\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeStorage} from \"../Storage\";\nimport {PrimeRequest} from \"../PrimeRequest\";\n\nclass Tabs {\n  /**\n   * Constructs a new Tabs object for the given ul element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The ul element to build the tab widget from\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    if (this.element.getTagName().toLowerCase() === 'ul') {\n      this.tabsContainer = this.element;\n    } else {\n      this.tabsContainer = this.element.queryFirst('ul');\n    }\n\n    if (this.tabsContainer === null) {\n      throw new TypeError('Tabs requires a ul element. The passed element does not contain a ul element');\n    }\n\n    this._setInitialOptions();\n    this.tabContents = {};\n    this.tabs = {};\n    this.tabArray = [];\n    this.selectedTab = null;\n  }\n\n  /**\n   * Destroys the Tabs widget\n   */\n  destroy() {\n    this.tabsContainer.query('a').each(function(a) {\n      a.removeEventListener('click', this._handleClick);\n    }.bind(this));\n\n    for (let i = 0; i < this.tabs.length; i++) {\n      this.tabs[i].removeClass(this.options.tabContentClass);\n    }\n  }\n\n  /**\n   * Hides the tab for the given Id.\n   *\n   * @param id The Id of the tab to hide.\n   */\n  hideTab(id) {\n    const tab = this.tabs[id];\n    tab.hide();\n    this.redraw();\n  }\n\n  /**\n   * Initializes the Tabs widget. Call this after you have set all the initial options.\n   *\n   * @returns {Tabs} This.\n   */\n  initialize() {\n    this.tabsContainer.query('li:not(.disabled)').each(function(tab) {\n      const a = tab.queryFirst('a').addEventListener('click', this._handleClick);\n      const dataSet = tab.getDataSet();\n\n      const href = a.getAttribute('href');\n      const isAnchor = href.charAt(0) === '#';\n      if (isAnchor) {\n        dataSet.tabId = href.substring(1);\n        dataSet.tabUrl = '';\n      } else {\n        dataSet.tabId = href;\n        dataSet.tabUrl = href;\n      }\n\n      this.tabs[dataSet.tabId] = tab;\n      this.tabArray.push(tab);\n\n      let content = PrimeDocument.queryById(dataSet.tabId);\n      if (content === null && isAnchor) {\n        throw new Error('A div is required with the following ID [' + dataSet.tabId + ']');\n      } else if (content === null) {\n        content = PrimeDocument.newElement('<div>').insertAfter(this.element).setAttribute('id', href);\n      }\n\n      content.hide();\n\n      content.addClass(this.options.tabContentClass);\n      this.tabContents[dataSet.tabId] = content;\n    }.bind(this));\n\n    if (this.options.deepLinkingEnabled) {\n      const tabId = window.location.hash.replace(/^#/, '');\n      if (Utils.isDefined(tabId) && Utils.isDefined(this.tabs[tabId])) {\n        this.selectTab(tabId);\n      }\n    }\n\n    this.redraw();\n    return this;\n  }\n\n  /**\n   * Re-applies the first-child, last-child, and active classes based on the current state of the tabs. If there\n   * is no tab that is active, this also selects the first tab that is visible.\n   */\n  redraw() {\n    let firstVisible = null;\n    let lastVisible = null;\n    let selectNew = false;\n    let noneActive = true;\n    for (let i = 0; i < this.tabArray.length; i++) {\n      if (this.tabArray[i].isVisible()) {\n        if (firstVisible === null) {\n          firstVisible = this.tabArray[i];\n        }\n\n        lastVisible = this.tabArray[i];\n\n        if (this.tabArray[i].hasClass('selected')) {\n          noneActive = false;\n        }\n      } else if (this.tabArray[i].hasClass('selected')) {\n        selectNew = true;\n      }\n\n      this.tabArray[i].removeClass('first-visible-tab');\n      this.tabArray[i].removeClass('last-visible-tab');\n    }\n\n    firstVisible.addClass('first-visible-tab');\n    lastVisible.addClass('last-visible-tab');\n\n    let tabId = null;\n    if (selectNew || noneActive) {\n      if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n        const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n        if (state !== null) {\n          tabId = state.tabId;\n        }\n      }\n\n      // If no tabId was found or the tab is not currently visible, select the first visible\n      if (tabId === null || !this.tabs[tabId] || !this.tabs[tabId].isVisible()) {\n        tabId = firstVisible.getDataSet().tabId;\n      }\n\n      this.selectTab(tabId);\n    }\n\n    // If error class handling was enabled, add the error class to the tab and set focus\n    if (this.options.errorClass) {\n      for (tabId in this.tabContents) {\n        if (this.tabContents.hasOwnProperty(tabId)) {\n          const errorElement = this.tabContents[tabId].queryFirst('.' + this.options.errorClass);\n          if (errorElement !== null) {\n            this.tabs[tabId].queryFirst('a').addClass(this.options.errorClass);\n            this.selectTab(tabId);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Select the active tab. Sets the active class on the li and shows only the corresponding tab content.\n   *\n   * @param id The Id of the tab to select.\n   */\n  selectTab(id) {\n    if (this.selectedTab !== null && this.selectedTab.getDataSet().tabId === id) {\n      return;\n    }\n\n    for (const tabId in this.tabs) {\n      if (this.tabs.hasOwnProperty(tabId)) {\n        this.tabs[tabId].removeClass('selected');\n      }\n    }\n\n    this.tabs[id].addClass('selected');\n    this.selectedTab = this.tabs[id];\n    for (const tabId in this.tabContents) {\n      if (this.tabContents.hasOwnProperty(tabId) && tabId === id) {\n        this.tabContents[tabId].show('block');\n        if (this.options.selectCallback) {\n          this.options.selectCallback(this.tabs[tabId], this.tabContents[tabId]);\n        }\n      } else {\n        this.tabContents[tabId].hide();\n      }\n    }\n\n    // Save current selected tab state in local storage. The JSON object isn't necessary at the moment,\n    // but we can tack on other properties as needed for additional state in the future.\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      const data = {\n        tabId: id\n      };\n      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n    }\n\n    const ajaxURL = this.selectedTab.getDataSet().tabUrl;\n    if (ajaxURL !== '') {\n      this.selectedTab.addClass('loading');\n      this.tabContents[id].setHTML('');\n      this.tabContents[id].addClass('loading');\n      new PrimeRequest(ajaxURL, 'GET')\n          .withSuccessHandler(this._handleAJAXResponse)\n          .withErrorHandler(this._handleAJAXResponse)\n          .go();\n    }\n  }\n\n  /**\n   * Shows the tab for the given Id.\n   *\n   * @param {String} id The Id of the tab to hide.\n   */\n  showTab(id) {\n    this.tabs[id].show();\n    this.redraw();\n  }\n\n  /**\n   * Adds a callback for AJAX calls. This is invoked after the AJAX load completes and the HTML is inserted into the\n   * DOM. The function is passed the container for the tab that was selected.\n   *\n   * @param {Function} callback The callback function.\n   * @returns {Tabs} This Tabs.\n   */\n  withAJAXCallback(callback) {\n    this.options.ajaxCallback = callback;\n    return this;\n  }\n\n  /**\n   * Disable the default behavior of allowing a deep link provided on the URL to set the default tab during render.\n   *\n   * @returns {Tabs} This Tabs.\n   */\n  withDeepLinkingDisabled() {\n    this.options.deepLinkingEnabled = false;\n    return this;\n  }\n\n  /**\n   * Enable error class handling. When this option is used, if the specified error class is found on any element\n   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n   *\n   * @returns {Tabs} This Tabs.\n   */\n  withErrorClassHandling(errorClass) {\n    this.options.errorClass = errorClass;\n    return this;\n  }\n\n  /**\n   * Enables local storage of the currently selected tab. If the user navigates away from the page and back, the same\n   * tab will be selected. This key is how the selected tab is stored in local storage and by setting a key you also\n   * enable this feature.\n   *\n   * @param {?String} key The local storage key.\n   * @returns {Tabs} This Tabs.\n   */\n  withLocalStorageKey(key) {\n    this.options.localStorageKey = key;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Tabs} This Tabs.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Specifies a callback function that is called whenever tabs are changed.\n   *\n   * @param {?Function} callback The callback function.\n   * @returns {Tabs} This Tabs.\n   */\n  withSelectCallback(callback) {\n    this.options.selectCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the tab content elements.\n   *\n   * @param className {String} The class name.\n   * @returns {Tabs}\n   */\n  withTabContentClass(className) {\n    this.options.tabContentClass = className;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the AJAX response.\n   *\n   * @param {XMLHttpRequest} xhr The AJAX response.\n   * @private\n   */\n  _handleAJAXResponse(xhr) {\n    this.selectedTab.removeClass('loading');\n    const container = this.tabContents[this.selectedTab.getDataSet().tabId];\n    container.removeClass('loading');\n    container.setHTML(xhr.responseText);\n\n    if (this.options.ajaxCallback !== null) {\n      this.options.ajaxCallback(container);\n    }\n  }\n\n  /**\n   * Handle the tab click by showing the corresponding panel and hiding the others.\n   *\n   * @param {MouseEvent} event The click event on the anchor tag.\n   * @private\n   */\n  _handleClick(event) {\n    Utils.stopEvent(event);\n    const a = new PrimeElement(event.currentTarget);\n    if (!a.hasClass('disabled')) {\n      const href = a.getAttribute('href');\n      if (href.charAt(0) === '#') {\n        this.selectTab(href.substring(1));\n      } else {\n        this.selectTab(href);\n      }\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      ajaxCallback: null,\n      errorClass: null,\n      deepLinkingEnabled: true,\n      localStorageKey: null,\n      selectCallback: null,\n      tabContentClass: 'prime-tab-content'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {Tabs};\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"../PrimeDocument\";\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {PrimeWindow} from \"../Window\";\nimport {Utils} from \"../Utils\";\n\nconst open = [];\n\nclass Tooltip {\n  /**\n   * Constructs a new Tooltip object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Tooltip widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n  }\n\n  static get open() {\n    return open;\n  }\n\n  /**\n   * Hides the tooltip.\n   *\n   * @returns {Tooltip} This.\n   */\n  hide() {\n    if (Tooltip.open.length > 0) {\n      Tooltip.open.forEach(function(t) {\n        t.removeFromDOM();\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Initializes the widget by attaching event listeners to the element.\n   *\n   * @returns {Tooltip} This.\n   */\n  initialize() {\n    this.element.addEventListener('mouseenter', this._handleMouseEnter).addEventListener('mouseleave', this._handleMouseLeave);\n    PrimeDocument.addEventListener('scroll', this._handleMouseLeave);\n    return this;\n  }\n\n  /**\n   * Shows the tooltip.\n   *\n   * @returns {Tooltip} This.\n   */\n  show() {\n    const text = this.element.getDataSet()[this.options.dataName];\n    const zIndex = this.element.getRelativeZIndex();\n    let classNames = this.options.className + ' ' + this.element.getTagName().toLocaleLowerCase();\n    if (this.options.additionalClasses !== null) {\n      classNames = classNames + ' ' + this.options.additionalClasses\n    }\n    const tooltip = PrimeDocument.newElement('<span>')\n        .appendTo(PrimeDocument.bodyElement)\n        .addClass(classNames)\n        .setHTML(text)\n        .setStyle('zIndex', zIndex + 10);\n\n    const left = this.element.getLeft();\n    const top = this.element.getTop();\n    const width = this.element.getWidth();\n    const tooltipWidth = tooltip.getWidth();\n    const tooltipHeight = tooltip.getHeight();\n\n    tooltip.setLeft(left - (tooltipWidth / 2) + (width / 2));\n    tooltip.setTop(top - tooltipHeight - 8);\n\n    // If the tooltip is too close to the top of the screen invert it and move it under the element\n    if ((top - tooltipHeight - 8) < 0) {\n      tooltip.setTop(top + this.element.getHeight() + 8).addClass('inverted');\n    }\n\n    Tooltip.open.push(tooltip);\n    return this;\n  }\n\n  /**\n   * Sets the class name to use when creating the tooltip.\n   *\n   * @param additionalClasses {?String} The class name or spaces separated names.\n   * @returns {Tooltip} This.\n   */\n  withAdditionalClassNames(additionalClasses) {\n    this.options.additionalClasses = additionalClasses;\n    return this;\n  }\n\n  /**\n   * Sets the class name to use when creating the tooltip.\n   *\n   * @param className {String} The class name.\n   * @returns {Tooltip} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Set data-set name to pull the tooltip text from.\n   *\n   * @param {string} name The data-set name.\n   * @returns {Tooltip} This.\n   */\n  withDataName(name) {\n    this.options.dataName = name;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Tooltip} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the mouse enter event to show the tooltip.\n   *\n   * @private\n   */\n  _handleMouseEnter() {\n    this.show();\n  }\n\n  /**\n   * Handles the mouse exit event to hide the tooltip.\n   *\n   * @private\n   */\n  _handleMouseLeave() {\n    this.hide();\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      additionalClasses: null,\n      className: 'prime-tooltip',\n      dataName: 'tooltip'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nPrimeDocument.onReady(function() {\n  // Fix browser issues with tooltips sticking around on back-button navigation\n  PrimeWindow.addEventListener('beforeunload', function() {\n    if (Tooltip.open.length > 0) {\n      Tooltip.open.forEach(function(t) {\n        t.removeFromDOM();\n      });\n    }\n  });\n});\n\nexport {Tooltip};\n","/*\n * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement\";\nimport {Utils} from \"../Utils\";\n\nclass TreeView {\n  /**\n   * Constructs a new TreeView object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the TreeView widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n  }\n\n  /**\n   * Initializes the element by traverse its children to find all of the anchor tags with the folder-toggle class (or\n   * whatever you set the class to).\n   *\n   * @returns {TreeView} This.\n   */\n  initialize() {\n    this.element.query('a.' + this.options.folderToggleClassName).each(function(e) {\n      e.addEventListener('click', this._handleClick);\n    }.bind(this));\n    return this;\n  }\n\n  /**\n   * Sets the folder toggle class name.\n   *\n   * @param className {String} The class name.\n   * @returns {TreeView} This.\n   */\n  withFolderToggleClassName(className) {\n    this.options.folderToggleClassName = className;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Handles the click event.\n   * @private\n   */\n  _handleClick(event) {\n    Utils.stopEvent(event);\n    const a = PrimeElement.wrap(event.target);\n    const li = a.getParent();\n    if (a.hasClass('open')) {\n      a.removeClass('open');\n      li.removeClass('open');\n    } else {\n      a.addClass('open');\n      li.addClass('open');\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      folderToggleClassName: 'prime-folder-toggle'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (const option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {TreeView};\n","/*\n * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils\";\nimport {PrimeElement} from \"./Document/PrimeElement\";\n\nclass BaseTransition {\n  /**\n   * Constructs a BaseTransition for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element the effect will be applied to.\n   * @param {number} endValue The end value for the transition.\n   * @constructor\n   */\n  constructor(element, endValue) {\n    Utils.bindAll(this);\n    this.element = PrimeElement.wrap(element);\n    this.duration = 1000;\n    this.endFunction = null;\n    this.endValue = endValue;\n    this.iterations = 20;\n  }\n\n  /**\n   * Sets the function that is called when the effect has completed.\n   *\n   * @param {Function} endFunction The function that is called when the effect is completed.\n   * @returns {BaseTransition} This Effect.\n   */\n  withEndFunction(endFunction) {\n    this.endFunction = endFunction;\n    return this;\n  }\n\n  /**\n   * Sets the duration of the fade-out effect.\n   *\n   * @param {number} duration The duration in milliseconds.\n   * @returns {BaseTransition} This Effect.\n   */\n  withDuration(duration) {\n    if (duration < 100) {\n      throw new TypeError('Duration should be greater than 100 milliseconds or it won\\'t really be noticeable');\n    }\n\n    this.duration = duration;\n    return this;\n  }\n\n  /*\n   * Protected functions\n   */\n\n  /**\n   * Changes an integer style property of the Element iteratively over a given period of time from one value to another\n   * value.\n   *\n   * @protected\n   * @param {Function} getFunction The function on the element to call to get the current value for the transition.\n   * @param {Function} setFunction The function on the element to call to set the new value for the transition.\n   */\n  _changeNumberStyleIteratively(getFunction, setFunction) {\n    let currentValue = getFunction.call(this.element);\n    const step = Math.abs(this.endValue - currentValue) / this.iterations;\n\n    // Close around ourselves\n    const self = this;\n    const stepFunction = function(last) {\n      if (last) {\n        currentValue = self.endValue;\n      } else {\n        if (currentValue < self.endValue) {\n          currentValue += step;\n        } else {\n          currentValue -= step;\n        }\n      }\n\n      setFunction.call(self.element, currentValue);\n    };\n\n    Utils.callIteratively(this.duration, this.iterations, stepFunction, this._internalEndFunction);\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the call back at the end.\n   *\n   * @private\n   */\n  _internalEndFunction() {\n    this._subclassEndFunction(this);\n\n    if (this.endFunction) {\n      this.endFunction(this);\n    }\n  }\n\n  /**\n   * Virtual function stub\n   *\n   * @private\n   */\n  _subclassEndFunction() {\n  }\n}\n\nclass Fade extends BaseTransition {\n  /**\n   * Constructs a new Fade for the given element. The fade effect uses the CSS opacity style and supports the IE alpha\n   * style. The duration defaults to 1000 milliseconds (1 second). This changes the opacity over the duration from 1.0 to\n   * 0.0. At the end, this hides the element so that it doesn't take up any space.\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to fade out.\n   */\n  constructor(element) {\n    super(element, 0.0);\n  }\n\n  /**\n   * Internal call back at the end of the transition. This hides the element so it doesn't take up space.\n   *\n   * @override\n   * @private\n   */\n  _subclassEndFunction() {\n    this.element.hide();\n  }\n\n  /**\n   * Executes the fade effect on the element using the opacity style.\n   */\n  go() {\n    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n  }\n}\n\nclass Appear extends BaseTransition {\n  /**\n   * Constructs a new Appear for the given element. The appear effect uses the CSS opacity style and supports the IE\n   * alpha style. The duration defaults to 1000 milliseconds (1 second). This first sets the opacity to 0, then it shows\n   * the element and finally it raises the opacity.\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to appear.\n   * @param {number} [opacity=1.0] The final opacity to reach when the effect is complete. Defaults to 1.0.\n   */\n  constructor(element, opacity) {\n    if (!Utils.isDefined(opacity)) {\n      opacity = 1.0;\n    }\n    super(element, opacity);\n  }\n\n  /**\n   * Executes the appear effect on the element using the opacity style.\n   */\n  go() {\n    this.element.setOpacity(0.0);\n    this.element.show();\n    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n  }\n}\n\nclass ScrollTo extends BaseTransition {\n  /**\n   * Constructs a new ScrollTo for the given element. The duration defaults to 1000 milliseconds (1 second).\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to scroll.\n   * @param {number} position The position to scroll the element to.\n   * @constructor\n   */\n  constructor(element, position) {\n    super(element, position);\n\n    this.axis = 'vertical';\n  }\n\n  /**\n   * Set the scroll axis, either 'horizontal' or 'vertical'. Default is 'vertical'.\n   *\n   * @param {string} axis The axis to scroll.\n   * @returns {ScrollTo}\n   */\n  withAxis(axis) {\n    this.axis = axis || 'vertical';\n    return this;\n  }\n\n  /**\n   * Executes the scroll effect on the element.\n   */\n  go() {\n    if (this.axis === 'vertical') {\n      this._changeNumberStyleIteratively(this.element.getScrollTop, this.element.scrollTo);\n    } else {\n      this._changeNumberStyleIteratively(this.element.getScrollLeft, this.element.scrollLeftTo);\n    }\n  }\n}\n\nclass SlideOpen {\n  /**\n   * Creates a SlideOpen effect on the given element.\n   *\n   * @param {PrimeElement} element The element.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = element;\n    if (this.isOpen()) {\n      element.domElement.primeVisibleHeight = element.getHeight();\n    } else {\n      element.setStyle('height', 'auto');\n      element.domElement.primeVisibleHeight = element.getHeight();\n      element.setStyle('height', '0');\n    }\n\n    this.isTransitioning = false;\n\n    this._setInitialOptions();\n  }\n\n  close() {\n    if (!this.isOpen()) {\n      return;\n    }\n\n    // Set a fixed height instead of auto so that the transition runs, but only if the element is \"open\"\n    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n    this.isTransitioning = true;\n\n    // This timeout is needed since the height change takes time to run\n    setTimeout(function() {\n      this.element.setHeight(0);\n      this.element.removeClass('open');\n      this.isTransitioning = false;\n\n      if (this.options.closeCallback !== null) {\n        this.options.closeCallback();\n      }\n    }.bind(this), this.options.timeout);\n  }\n\n  isOpen() {\n    return this.element.getHeight() !== 0 || this.element.hasClass('open');\n  }\n\n  open() {\n    if (this.isOpen()) {\n      return;\n    }\n\n    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n    this.isTransitioning = true;\n\n    setTimeout(function() {\n      this.element.setHeight('auto');\n      this.element.addClass('open');\n      this.isTransitioning = false;\n\n      if (this.options.openCallback !== null) {\n        this.options.openCallback();\n      }\n    }.bind(this), this.options.timeout);\n  }\n\n  toggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Set the close callback function.\n   *\n   * @param {?Function} callback The close callback\n   * @returns {SlideOpen} This.\n   */\n  withCloseCallback(callback) {\n    this.options.closeCallback = callback;\n    return this;\n  }\n\n  /**\n   * Set the open callback function.\n   *\n   * @param {?Function} callback The open callback\n   * @returns {SlideOpen} This.\n   */\n  withOpenCallback(callback) {\n    this.options.openCallback = callback;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {SlideOpen} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Set the initial options of the widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      openCallback: null,\n      closeCallback: null,\n      timeout: 310\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {BaseTransition, Fade, Appear, ScrollTo, SlideOpen}\n","/*\n * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils\";\n\nclass DataQueue {\n  /**\n   * First-In-First-Out Queue implementation modeled after java.util.Deque interface.\n   *\n   * @constructor\n   */\n  constructor() {\n    Utils.bindAll(this);\n    this._elements = {};\n    this._head = 0;\n    this._tail = 0;\n  }\n\n  /**\n   * Add the element to the head of the queue.\n   *\n   * @param {Object} element An object to store in the queue.\n   * @returns {DataQueue} This Element.\n   */\n  add(element) {\n    this._elements[this._head] = element;\n    this._head++;\n\n    return this;\n  }\n\n  /**\n   * Return true if the queue is empty.\n   *\n   * @returns {boolean} True if the queue is empty, false if not.\n   */\n  isEmpty() {\n    return this._head === this._tail;\n  }\n\n  /**\n   * Return but do not remove the tail of the queue. This is the oldest element in the queue.\n   *\n   * @returns {Object} The object at the tail of the queue, or null if empty.\n   */\n  peek() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    return this._elements[this._tail];\n  }\n\n  /**\n   * Return and remove the tail of the queue. This is the oldest element in the queue.\n   *\n   * @returns {Object} the object at the tail of the queue, or null if the queue is empty.\n   */\n  poll() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const object = this._elements[this._tail];\n    delete this._elements[this._tail];\n    this._tail++;\n\n    // The cursor should not go off the end of the queue\n    if (this._cursor < this._tail) {\n      this._cursor = this._tail;\n    }\n\n    return object;\n  }\n\n  /**\n   * Return the size of the queue.\n   *\n   * @returns {Number} The size of the queue.\n   */\n  size() {\n    return this._head - this._tail;\n  }\n\n}\n\nexport {DataQueue};\n","/*\n * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils\"\nimport {PrimeElement} from \"./Document/PrimeElement\";\n\nclass Template {\n  /**\n   * A Javascript Object that can serve to generate Prime.Document.Element from a source string and optional parameters.\n   *\n   * @constructor\n   * @param {string} template The String that defines the source of the template.\n   */\n  constructor(template) {\n    Utils.bindAll(this);\n    this.init(template);\n  }\n\n  init(template) {\n    this.template = template;\n  }\n\n  /**\n   * Generates a String from the given parameterHash.  Provide a hash of String keys to values.\n   * Keys can be regular text strings, in which case it will look for and replace #{key} as with the value.  You can\n   * also make the key a String \"/key/\", which will be converted to a Regex and run.\n   *\n   * For the value you can provide a straight up String, int, etc, or you can provide a function which will be called\n   * to provide the value\n   *\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   * @returns {string} The result of executing the template.\n   */\n  generate(parameters) {\n    parameters = Utils.isDefined(parameters) ? parameters : {};\n    let templateCopy = String(this.template);\n    for (let key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        const value = parameters[key];\n        let expressedValue;\n        if (typeof(value) === 'function') {\n          expressedValue = value();\n        } else {\n          expressedValue = value;\n        }\n\n        if (key.indexOf('/') === 0 && key.lastIndexOf('/') === key.length - 1) {\n          templateCopy = templateCopy.replace(new RegExp(key.substring(1, key.length - 1), \"g\"), expressedValue);\n        } else {\n          const expressedKey = \"#{\" + key + \"}\";\n          while (templateCopy.indexOf(expressedKey) !== -1) {\n            templateCopy = templateCopy.replace(expressedKey, expressedValue);\n          }\n        }\n      }\n    }\n\n    return templateCopy;\n  }\n\n  /**\n   * Calls to generate and then appends the resulting value to the inner HTML of the provided primeElement.\n   *\n   * @param {PrimeElement} primeElement The prime Element instance to append the result of executing the template to.\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   */\n  appendTo(primeElement, parameters) {\n    if (Utils.isDefined(primeElement)) {\n      primeElement.setHTML(primeElement.getHTML() + this.generate(parameters));\n    } else {\n      throw new TypeError('Please supply an element to append to');\n    }\n  }\n\n  /**\n   * Calls to generate and then inserts the resulting elements into the dom before the primeElement\n   *\n   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template before.\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   */\n  insertBefore(primeElement, parameters) {\n    if (Utils.isDefined(primeElement)) {\n      const holder = document.createElement('div');\n      holder.innerHTML = this.generate(parameters);\n      new PrimeElement(holder.children[0]).insertBefore(primeElement);\n    } else {\n      throw new TypeError('Please supply an element to append to');\n    }\n  }\n\n  /**\n   * Calls to generate and then inserts the resulting elements into the dom after the primeElement\n   *\n   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template after.\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   */\n  insertAfter(primeElement, parameters) {\n    if (Utils.isDefined(primeElement)) {\n      const holder = document.createElement('div');\n      holder.innerHTML = this.generate(parameters);\n      new PrimeElement(holder.children[0]).insertAfter(primeElement);\n    } else {\n      throw new TypeError('Please supply an element to append to');\n    }\n  }\n}\n\nexport {Template};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nimport * as Widgets from \"./Widgets/Widgets\"\nimport * as Effects from \"./Effects\"\n// Do any polyfill imports here for backwards compatibility\nimport {DataQueue} from \"./DataQueue\";\nimport {PrimeRequest} from \"./PrimeRequest\";\n\nexport {Browser} from \"./Browser\"\nexport {Effects}\nexport {Events} from \"./Events\"\nexport {PrimeDate as Date} from \"./Date\"\nexport {PrimeDocument as Document} from \"./PrimeDocument\"\nexport {PrimeStorage as Storage} from \"./Storage\"\nexport {PrimeWindow as Window} from \"./Window\"\nexport {Template} from \"./Template\"\nexport {Utils} from \"./Utils\"\nexport {Widgets}\n\nconst Ajax = {\n  Request: PrimeRequest\n};\n\nconst Data = {\n  Queue: DataQueue\n};\n\nexport {Ajax}\nexport {Data}\n"]}